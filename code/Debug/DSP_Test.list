
DSP_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062c4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08006450  08006450  00016450  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006688  08006688  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08006688  08006688  00016688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006690  08006690  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006690  08006690  00016690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006694  08006694  00016694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08006698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008164  2000008c  08006724  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200081f0  08006724  000281f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ea2  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001956  00000000  00000000  00027f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006e0  00000000  00000000  000298b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005f8  00000000  00000000  00029f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fee0  00000000  00000000  0002a590  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007816  00000000  00000000  0004a470  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c0cdf  00000000  00000000  00051c86  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000eb  00000000  00000000  00112965  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f38  00000000  00000000  00112a50  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000005bb  00000000  00000000  00114988  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000008c 	.word	0x2000008c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006434 	.word	0x08006434

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000090 	.word	0x20000090
 80001c4:	08006434 	.word	0x08006434

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b972 	b.w	8000e8c <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9e08      	ldr	r6, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	4688      	mov	r8, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14b      	bne.n	8000c66 <__udivmoddi4+0xa6>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4615      	mov	r5, r2
 8000bd2:	d967      	bls.n	8000ca4 <__udivmoddi4+0xe4>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b14a      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bda:	f1c2 0720 	rsb	r7, r2, #32
 8000bde:	fa01 f302 	lsl.w	r3, r1, r2
 8000be2:	fa20 f707 	lsr.w	r7, r0, r7
 8000be6:	4095      	lsls	r5, r2
 8000be8:	ea47 0803 	orr.w	r8, r7, r3
 8000bec:	4094      	lsls	r4, r2
 8000bee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bf2:	0c23      	lsrs	r3, r4, #16
 8000bf4:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bf8:	fa1f fc85 	uxth.w	ip, r5
 8000bfc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c00:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c04:	fb07 f10c 	mul.w	r1, r7, ip
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x60>
 8000c0c:	18eb      	adds	r3, r5, r3
 8000c0e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c12:	f080 811b 	bcs.w	8000e4c <__udivmoddi4+0x28c>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 8118 	bls.w	8000e4c <__udivmoddi4+0x28c>
 8000c1c:	3f02      	subs	r7, #2
 8000c1e:	442b      	add	r3, r5
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c34:	45a4      	cmp	ip, r4
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x8c>
 8000c38:	192c      	adds	r4, r5, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3e:	f080 8107 	bcs.w	8000e50 <__udivmoddi4+0x290>
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	f240 8104 	bls.w	8000e50 <__udivmoddi4+0x290>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	442c      	add	r4, r5
 8000c4c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c50:	eba4 040c 	sub.w	r4, r4, ip
 8000c54:	2700      	movs	r7, #0
 8000c56:	b11e      	cbz	r6, 8000c60 <__udivmoddi4+0xa0>
 8000c58:	40d4      	lsrs	r4, r2
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c60:	4639      	mov	r1, r7
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d909      	bls.n	8000c7e <__udivmoddi4+0xbe>
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	f000 80eb 	beq.w	8000e46 <__udivmoddi4+0x286>
 8000c70:	2700      	movs	r7, #0
 8000c72:	e9c6 0100 	strd	r0, r1, [r6]
 8000c76:	4638      	mov	r0, r7
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	fab3 f783 	clz	r7, r3
 8000c82:	2f00      	cmp	r7, #0
 8000c84:	d147      	bne.n	8000d16 <__udivmoddi4+0x156>
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d302      	bcc.n	8000c90 <__udivmoddi4+0xd0>
 8000c8a:	4282      	cmp	r2, r0
 8000c8c:	f200 80fa 	bhi.w	8000e84 <__udivmoddi4+0x2c4>
 8000c90:	1a84      	subs	r4, r0, r2
 8000c92:	eb61 0303 	sbc.w	r3, r1, r3
 8000c96:	2001      	movs	r0, #1
 8000c98:	4698      	mov	r8, r3
 8000c9a:	2e00      	cmp	r6, #0
 8000c9c:	d0e0      	beq.n	8000c60 <__udivmoddi4+0xa0>
 8000c9e:	e9c6 4800 	strd	r4, r8, [r6]
 8000ca2:	e7dd      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000ca4:	b902      	cbnz	r2, 8000ca8 <__udivmoddi4+0xe8>
 8000ca6:	deff      	udf	#255	; 0xff
 8000ca8:	fab2 f282 	clz	r2, r2
 8000cac:	2a00      	cmp	r2, #0
 8000cae:	f040 808f 	bne.w	8000dd0 <__udivmoddi4+0x210>
 8000cb2:	1b49      	subs	r1, r1, r5
 8000cb4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb8:	fa1f f885 	uxth.w	r8, r5
 8000cbc:	2701      	movs	r7, #1
 8000cbe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cc2:	0c23      	lsrs	r3, r4, #16
 8000cc4:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb08 f10c 	mul.w	r1, r8, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x124>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x122>
 8000cdc:	4299      	cmp	r1, r3
 8000cde:	f200 80cd 	bhi.w	8000e7c <__udivmoddi4+0x2bc>
 8000ce2:	4684      	mov	ip, r0
 8000ce4:	1a59      	subs	r1, r3, r1
 8000ce6:	b2a3      	uxth	r3, r4
 8000ce8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cec:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cf0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cf4:	fb08 f800 	mul.w	r8, r8, r0
 8000cf8:	45a0      	cmp	r8, r4
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x14c>
 8000cfc:	192c      	adds	r4, r5, r4
 8000cfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x14a>
 8000d04:	45a0      	cmp	r8, r4
 8000d06:	f200 80b6 	bhi.w	8000e76 <__udivmoddi4+0x2b6>
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	eba4 0408 	sub.w	r4, r4, r8
 8000d10:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d14:	e79f      	b.n	8000c56 <__udivmoddi4+0x96>
 8000d16:	f1c7 0c20 	rsb	ip, r7, #32
 8000d1a:	40bb      	lsls	r3, r7
 8000d1c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d20:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d24:	fa01 f407 	lsl.w	r4, r1, r7
 8000d28:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d2c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d30:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d34:	4325      	orrs	r5, r4
 8000d36:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d3a:	0c2c      	lsrs	r4, r5, #16
 8000d3c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d40:	fa1f fa8e 	uxth.w	sl, lr
 8000d44:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d48:	fb09 f40a 	mul.w	r4, r9, sl
 8000d4c:	429c      	cmp	r4, r3
 8000d4e:	fa02 f207 	lsl.w	r2, r2, r7
 8000d52:	fa00 f107 	lsl.w	r1, r0, r7
 8000d56:	d90b      	bls.n	8000d70 <__udivmoddi4+0x1b0>
 8000d58:	eb1e 0303 	adds.w	r3, lr, r3
 8000d5c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d60:	f080 8087 	bcs.w	8000e72 <__udivmoddi4+0x2b2>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f240 8084 	bls.w	8000e72 <__udivmoddi4+0x2b2>
 8000d6a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d6e:	4473      	add	r3, lr
 8000d70:	1b1b      	subs	r3, r3, r4
 8000d72:	b2ad      	uxth	r5, r5
 8000d74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d78:	fb08 3310 	mls	r3, r8, r0, r3
 8000d7c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d80:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d84:	45a2      	cmp	sl, r4
 8000d86:	d908      	bls.n	8000d9a <__udivmoddi4+0x1da>
 8000d88:	eb1e 0404 	adds.w	r4, lr, r4
 8000d8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d90:	d26b      	bcs.n	8000e6a <__udivmoddi4+0x2aa>
 8000d92:	45a2      	cmp	sl, r4
 8000d94:	d969      	bls.n	8000e6a <__udivmoddi4+0x2aa>
 8000d96:	3802      	subs	r0, #2
 8000d98:	4474      	add	r4, lr
 8000d9a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d9e:	fba0 8902 	umull	r8, r9, r0, r2
 8000da2:	eba4 040a 	sub.w	r4, r4, sl
 8000da6:	454c      	cmp	r4, r9
 8000da8:	46c2      	mov	sl, r8
 8000daa:	464b      	mov	r3, r9
 8000dac:	d354      	bcc.n	8000e58 <__udivmoddi4+0x298>
 8000dae:	d051      	beq.n	8000e54 <__udivmoddi4+0x294>
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	d069      	beq.n	8000e88 <__udivmoddi4+0x2c8>
 8000db4:	ebb1 050a 	subs.w	r5, r1, sl
 8000db8:	eb64 0403 	sbc.w	r4, r4, r3
 8000dbc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dc0:	40fd      	lsrs	r5, r7
 8000dc2:	40fc      	lsrs	r4, r7
 8000dc4:	ea4c 0505 	orr.w	r5, ip, r5
 8000dc8:	e9c6 5400 	strd	r5, r4, [r6]
 8000dcc:	2700      	movs	r7, #0
 8000dce:	e747      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000dd0:	f1c2 0320 	rsb	r3, r2, #32
 8000dd4:	fa20 f703 	lsr.w	r7, r0, r3
 8000dd8:	4095      	lsls	r5, r2
 8000dda:	fa01 f002 	lsl.w	r0, r1, r2
 8000dde:	fa21 f303 	lsr.w	r3, r1, r3
 8000de2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de6:	4338      	orrs	r0, r7
 8000de8:	0c01      	lsrs	r1, r0, #16
 8000dea:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dee:	fa1f f885 	uxth.w	r8, r5
 8000df2:	fb0e 3317 	mls	r3, lr, r7, r3
 8000df6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dfa:	fb07 f308 	mul.w	r3, r7, r8
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	fa04 f402 	lsl.w	r4, r4, r2
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x256>
 8000e06:	1869      	adds	r1, r5, r1
 8000e08:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e0c:	d22f      	bcs.n	8000e6e <__udivmoddi4+0x2ae>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d92d      	bls.n	8000e6e <__udivmoddi4+0x2ae>
 8000e12:	3f02      	subs	r7, #2
 8000e14:	4429      	add	r1, r5
 8000e16:	1acb      	subs	r3, r1, r3
 8000e18:	b281      	uxth	r1, r0
 8000e1a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e26:	fb00 f308 	mul.w	r3, r0, r8
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x27e>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e34:	d217      	bcs.n	8000e66 <__udivmoddi4+0x2a6>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d915      	bls.n	8000e66 <__udivmoddi4+0x2a6>
 8000e3a:	3802      	subs	r0, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1ac9      	subs	r1, r1, r3
 8000e40:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e44:	e73b      	b.n	8000cbe <__udivmoddi4+0xfe>
 8000e46:	4637      	mov	r7, r6
 8000e48:	4630      	mov	r0, r6
 8000e4a:	e709      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000e4c:	4607      	mov	r7, r0
 8000e4e:	e6e7      	b.n	8000c20 <__udivmoddi4+0x60>
 8000e50:	4618      	mov	r0, r3
 8000e52:	e6fb      	b.n	8000c4c <__udivmoddi4+0x8c>
 8000e54:	4541      	cmp	r1, r8
 8000e56:	d2ab      	bcs.n	8000db0 <__udivmoddi4+0x1f0>
 8000e58:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e5c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e60:	3801      	subs	r0, #1
 8000e62:	4613      	mov	r3, r2
 8000e64:	e7a4      	b.n	8000db0 <__udivmoddi4+0x1f0>
 8000e66:	4660      	mov	r0, ip
 8000e68:	e7e9      	b.n	8000e3e <__udivmoddi4+0x27e>
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	e795      	b.n	8000d9a <__udivmoddi4+0x1da>
 8000e6e:	4667      	mov	r7, ip
 8000e70:	e7d1      	b.n	8000e16 <__udivmoddi4+0x256>
 8000e72:	4681      	mov	r9, r0
 8000e74:	e77c      	b.n	8000d70 <__udivmoddi4+0x1b0>
 8000e76:	3802      	subs	r0, #2
 8000e78:	442c      	add	r4, r5
 8000e7a:	e747      	b.n	8000d0c <__udivmoddi4+0x14c>
 8000e7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e80:	442b      	add	r3, r5
 8000e82:	e72f      	b.n	8000ce4 <__udivmoddi4+0x124>
 8000e84:	4638      	mov	r0, r7
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xda>
 8000e88:	4637      	mov	r7, r6
 8000e8a:	e6e9      	b.n	8000c60 <__udivmoddi4+0xa0>

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e94:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0d      	ldr	r2, [pc, #52]	; (8000ed0 <HAL_Init+0x40>)
 8000e9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <HAL_Init+0x40>)
 8000ea6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <HAL_Init+0x40>)
 8000eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb8:	2003      	movs	r0, #3
 8000eba:	f000 f92b 	bl	8001114 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	f000 f808 	bl	8000ed4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec4:	f002 ffde 	bl	8003e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40023c00 	.word	0x40023c00

08000ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <HAL_InitTick+0x54>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <HAL_InitTick+0x58>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 f943 	bl	800117e <HAL_SYSTICK_Config>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e00e      	b.n	8000f20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b0f      	cmp	r3, #15
 8000f06:	d80a      	bhi.n	8000f1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	6879      	ldr	r1, [r7, #4]
 8000f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f10:	f000 f90b 	bl	800112a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f14:	4a06      	ldr	r2, [pc, #24]	; (8000f30 <HAL_InitTick+0x5c>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	e000      	b.n	8000f20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000020 	.word	0x20000020
 8000f2c:	20000004 	.word	0x20000004
 8000f30:	20000000 	.word	0x20000000

08000f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_IncTick+0x20>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_IncTick+0x24>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4413      	add	r3, r2
 8000f44:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <HAL_IncTick+0x24>)
 8000f46:	6013      	str	r3, [r2, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000004 	.word	0x20000004
 8000f58:	200000ac 	.word	0x200000ac

08000f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <HAL_GetTick+0x14>)
 8000f62:	681b      	ldr	r3, [r3, #0]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	200000ac 	.word	0x200000ac

08000f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f90:	4013      	ands	r3, r2
 8000f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	60d3      	str	r3, [r2, #12]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	f003 0307 	and.w	r3, r3, #7
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	db0b      	blt.n	8001002 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	f003 021f 	and.w	r2, r3, #31
 8000ff0:	4907      	ldr	r1, [pc, #28]	; (8001010 <__NVIC_EnableIRQ+0x38>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	095b      	lsrs	r3, r3, #5
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000e100 	.word	0xe000e100

08001014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	6039      	str	r1, [r7, #0]
 800101e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	db0a      	blt.n	800103e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	b2da      	uxtb	r2, r3
 800102c:	490c      	ldr	r1, [pc, #48]	; (8001060 <__NVIC_SetPriority+0x4c>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	0112      	lsls	r2, r2, #4
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	440b      	add	r3, r1
 8001038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800103c:	e00a      	b.n	8001054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4908      	ldr	r1, [pc, #32]	; (8001064 <__NVIC_SetPriority+0x50>)
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	f003 030f 	and.w	r3, r3, #15
 800104a:	3b04      	subs	r3, #4
 800104c:	0112      	lsls	r2, r2, #4
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	440b      	add	r3, r1
 8001052:	761a      	strb	r2, [r3, #24]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000e100 	.word	0xe000e100
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	; 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f1c3 0307 	rsb	r3, r3, #7
 8001082:	2b04      	cmp	r3, #4
 8001084:	bf28      	it	cs
 8001086:	2304      	movcs	r3, #4
 8001088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3304      	adds	r3, #4
 800108e:	2b06      	cmp	r3, #6
 8001090:	d902      	bls.n	8001098 <NVIC_EncodePriority+0x30>
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3b03      	subs	r3, #3
 8001096:	e000      	b.n	800109a <NVIC_EncodePriority+0x32>
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	f04f 32ff 	mov.w	r2, #4294967295
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43da      	mvns	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	401a      	ands	r2, r3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b0:	f04f 31ff 	mov.w	r1, #4294967295
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ba:	43d9      	mvns	r1, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	4313      	orrs	r3, r2
         );
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3724      	adds	r7, #36	; 0x24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e0:	d301      	bcc.n	80010e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e2:	2301      	movs	r3, #1
 80010e4:	e00f      	b.n	8001106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <SysTick_Config+0x40>)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ee:	210f      	movs	r1, #15
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295
 80010f4:	f7ff ff8e 	bl	8001014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <SysTick_Config+0x40>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fe:	4b04      	ldr	r3, [pc, #16]	; (8001110 <SysTick_Config+0x40>)
 8001100:	2207      	movs	r2, #7
 8001102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	e000e010 	.word	0xe000e010

08001114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff ff29 	bl	8000f74 <__NVIC_SetPriorityGrouping>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
 8001136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800113c:	f7ff ff3e 	bl	8000fbc <__NVIC_GetPriorityGrouping>
 8001140:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	68b9      	ldr	r1, [r7, #8]
 8001146:	6978      	ldr	r0, [r7, #20]
 8001148:	f7ff ff8e 	bl	8001068 <NVIC_EncodePriority>
 800114c:	4602      	mov	r2, r0
 800114e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff5d 	bl	8001014 <__NVIC_SetPriority>
}
 800115a:	bf00      	nop
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff31 	bl	8000fd8 <__NVIC_EnableIRQ>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ffa2 	bl	80010d0 <SysTick_Config>
 800118c:	4603      	mov	r3, r0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f7ff feda 	bl	8000f5c <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d101      	bne.n	80011b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e099      	b.n	80012e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2202      	movs	r2, #2
 80011c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f022 0201 	bic.w	r2, r2, #1
 80011d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011d4:	e00f      	b.n	80011f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011d6:	f7ff fec1 	bl	8000f5c <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b05      	cmp	r3, #5
 80011e2:	d908      	bls.n	80011f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2220      	movs	r2, #32
 80011e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2203      	movs	r2, #3
 80011ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e078      	b.n	80012e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1e8      	bne.n	80011d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	4b38      	ldr	r3, [pc, #224]	; (80012f0 <HAL_DMA_Init+0x158>)
 8001210:	4013      	ands	r3, r2
 8001212:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001222:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800122e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800123a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	4313      	orrs	r3, r2
 8001246:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124c:	2b04      	cmp	r3, #4
 800124e:	d107      	bne.n	8001260 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001258:	4313      	orrs	r3, r2
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	4313      	orrs	r3, r2
 800125e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	f023 0307 	bic.w	r3, r3, #7
 8001276:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	4313      	orrs	r3, r2
 8001280:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001286:	2b04      	cmp	r3, #4
 8001288:	d117      	bne.n	80012ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	4313      	orrs	r3, r2
 8001292:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001298:	2b00      	cmp	r3, #0
 800129a:	d00e      	beq.n	80012ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 fa77 	bl	8001790 <DMA_CheckFifoParam>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d008      	beq.n	80012ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2240      	movs	r2, #64	; 0x40
 80012ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2201      	movs	r2, #1
 80012b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80012b6:	2301      	movs	r3, #1
 80012b8:	e016      	b.n	80012e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 fa2e 	bl	8001724 <DMA_CalcBaseAndBitshift>
 80012c8:	4603      	mov	r3, r0
 80012ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d0:	223f      	movs	r2, #63	; 0x3f
 80012d2:	409a      	lsls	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2201      	movs	r2, #1
 80012e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	f010803f 	.word	0xf010803f

080012f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
 8001300:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001302:	2300      	movs	r3, #0
 8001304:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001312:	2b01      	cmp	r3, #1
 8001314:	d101      	bne.n	800131a <HAL_DMA_Start_IT+0x26>
 8001316:	2302      	movs	r3, #2
 8001318:	e048      	b.n	80013ac <HAL_DMA_Start_IT+0xb8>
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2201      	movs	r2, #1
 800131e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b01      	cmp	r3, #1
 800132c:	d137      	bne.n	800139e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2202      	movs	r2, #2
 8001332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2200      	movs	r2, #0
 800133a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	68b9      	ldr	r1, [r7, #8]
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f000 f9c0 	bl	80016c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800134c:	223f      	movs	r2, #63	; 0x3f
 800134e:	409a      	lsls	r2, r3
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f042 0216 	orr.w	r2, r2, #22
 8001362:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	695a      	ldr	r2, [r3, #20]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001372:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	2b00      	cmp	r3, #0
 800137a:	d007      	beq.n	800138c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f042 0208 	orr.w	r2, r2, #8
 800138a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f042 0201 	orr.w	r2, r2, #1
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	e005      	b.n	80013aa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80013a6:	2302      	movs	r3, #2
 80013a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80013aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80013bc:	2300      	movs	r3, #0
 80013be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013c0:	4b92      	ldr	r3, [pc, #584]	; (800160c <HAL_DMA_IRQHandler+0x258>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a92      	ldr	r2, [pc, #584]	; (8001610 <HAL_DMA_IRQHandler+0x25c>)
 80013c6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ca:	0a9b      	lsrs	r3, r3, #10
 80013cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013de:	2208      	movs	r2, #8
 80013e0:	409a      	lsls	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4013      	ands	r3, r2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d01a      	beq.n	8001420 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d013      	beq.n	8001420 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0204 	bic.w	r2, r2, #4
 8001406:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800140c:	2208      	movs	r2, #8
 800140e:	409a      	lsls	r2, r3
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001418:	f043 0201 	orr.w	r2, r3, #1
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001424:	2201      	movs	r2, #1
 8001426:	409a      	lsls	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4013      	ands	r3, r2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d012      	beq.n	8001456 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800143a:	2b00      	cmp	r3, #0
 800143c:	d00b      	beq.n	8001456 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001442:	2201      	movs	r2, #1
 8001444:	409a      	lsls	r2, r3
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800144e:	f043 0202 	orr.w	r2, r3, #2
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800145a:	2204      	movs	r2, #4
 800145c:	409a      	lsls	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	4013      	ands	r3, r2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d012      	beq.n	800148c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00b      	beq.n	800148c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001478:	2204      	movs	r2, #4
 800147a:	409a      	lsls	r2, r3
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001484:	f043 0204 	orr.w	r2, r3, #4
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001490:	2210      	movs	r2, #16
 8001492:	409a      	lsls	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4013      	ands	r3, r2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d043      	beq.n	8001524 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0308 	and.w	r3, r3, #8
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d03c      	beq.n	8001524 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ae:	2210      	movs	r2, #16
 80014b0:	409a      	lsls	r2, r3
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d018      	beq.n	80014f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d108      	bne.n	80014e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d024      	beq.n	8001524 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	4798      	blx	r3
 80014e2:	e01f      	b.n	8001524 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d01b      	beq.n	8001524 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	4798      	blx	r3
 80014f4:	e016      	b.n	8001524 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001500:	2b00      	cmp	r3, #0
 8001502:	d107      	bne.n	8001514 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 0208 	bic.w	r2, r2, #8
 8001512:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001528:	2220      	movs	r2, #32
 800152a:	409a      	lsls	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4013      	ands	r3, r2
 8001530:	2b00      	cmp	r3, #0
 8001532:	f000 808e 	beq.w	8001652 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0310 	and.w	r3, r3, #16
 8001540:	2b00      	cmp	r3, #0
 8001542:	f000 8086 	beq.w	8001652 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154a:	2220      	movs	r2, #32
 800154c:	409a      	lsls	r2, r3
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b05      	cmp	r3, #5
 800155c:	d136      	bne.n	80015cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 0216 	bic.w	r2, r2, #22
 800156c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	695a      	ldr	r2, [r3, #20]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800157c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	2b00      	cmp	r3, #0
 8001584:	d103      	bne.n	800158e <HAL_DMA_IRQHandler+0x1da>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800158a:	2b00      	cmp	r3, #0
 800158c:	d007      	beq.n	800159e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 0208 	bic.w	r2, r2, #8
 800159c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a2:	223f      	movs	r2, #63	; 0x3f
 80015a4:	409a      	lsls	r2, r3
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d07d      	beq.n	80016be <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	4798      	blx	r3
        }
        return;
 80015ca:	e078      	b.n	80016be <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d01c      	beq.n	8001614 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d108      	bne.n	80015fa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d030      	beq.n	8001652 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	4798      	blx	r3
 80015f8:	e02b      	b.n	8001652 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d027      	beq.n	8001652 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	4798      	blx	r3
 800160a:	e022      	b.n	8001652 <HAL_DMA_IRQHandler+0x29e>
 800160c:	20000020 	.word	0x20000020
 8001610:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10f      	bne.n	8001642 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 0210 	bic.w	r2, r2, #16
 8001630:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2201      	movs	r2, #1
 800163e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001656:	2b00      	cmp	r3, #0
 8001658:	d032      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b00      	cmp	r3, #0
 8001664:	d022      	beq.n	80016ac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2205      	movs	r2, #5
 800166a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 0201 	bic.w	r2, r2, #1
 800167c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	3301      	adds	r3, #1
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	429a      	cmp	r2, r3
 8001688:	d307      	bcc.n	800169a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1f2      	bne.n	800167e <HAL_DMA_IRQHandler+0x2ca>
 8001698:	e000      	b.n	800169c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800169a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	4798      	blx	r3
 80016bc:	e000      	b.n	80016c0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80016be:	bf00      	nop
    }
  }
}
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop

080016c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
 80016d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2b40      	cmp	r3, #64	; 0x40
 80016f4:	d108      	bne.n	8001708 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001706:	e007      	b.n	8001718 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68ba      	ldr	r2, [r7, #8]
 800170e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	60da      	str	r2, [r3, #12]
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	3b10      	subs	r3, #16
 8001734:	4a14      	ldr	r2, [pc, #80]	; (8001788 <DMA_CalcBaseAndBitshift+0x64>)
 8001736:	fba2 2303 	umull	r2, r3, r2, r3
 800173a:	091b      	lsrs	r3, r3, #4
 800173c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800173e:	4a13      	ldr	r2, [pc, #76]	; (800178c <DMA_CalcBaseAndBitshift+0x68>)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4413      	add	r3, r2
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2b03      	cmp	r3, #3
 8001750:	d909      	bls.n	8001766 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800175a:	f023 0303 	bic.w	r3, r3, #3
 800175e:	1d1a      	adds	r2, r3, #4
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	659a      	str	r2, [r3, #88]	; 0x58
 8001764:	e007      	b.n	8001776 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800176e:	f023 0303 	bic.w	r3, r3, #3
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800177a:	4618      	mov	r0, r3
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	aaaaaaab 	.word	0xaaaaaaab
 800178c:	08006450 	.word	0x08006450

08001790 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d11f      	bne.n	80017ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	2b03      	cmp	r3, #3
 80017ae:	d855      	bhi.n	800185c <DMA_CheckFifoParam+0xcc>
 80017b0:	a201      	add	r2, pc, #4	; (adr r2, 80017b8 <DMA_CheckFifoParam+0x28>)
 80017b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b6:	bf00      	nop
 80017b8:	080017c9 	.word	0x080017c9
 80017bc:	080017db 	.word	0x080017db
 80017c0:	080017c9 	.word	0x080017c9
 80017c4:	0800185d 	.word	0x0800185d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d045      	beq.n	8001860 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017d8:	e042      	b.n	8001860 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017e2:	d13f      	bne.n	8001864 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017e8:	e03c      	b.n	8001864 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017f2:	d121      	bne.n	8001838 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d836      	bhi.n	8001868 <DMA_CheckFifoParam+0xd8>
 80017fa:	a201      	add	r2, pc, #4	; (adr r2, 8001800 <DMA_CheckFifoParam+0x70>)
 80017fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001800:	08001811 	.word	0x08001811
 8001804:	08001817 	.word	0x08001817
 8001808:	08001811 	.word	0x08001811
 800180c:	08001829 	.word	0x08001829
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	73fb      	strb	r3, [r7, #15]
      break;
 8001814:	e02f      	b.n	8001876 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d024      	beq.n	800186c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001826:	e021      	b.n	800186c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001830:	d11e      	bne.n	8001870 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001836:	e01b      	b.n	8001870 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	2b02      	cmp	r3, #2
 800183c:	d902      	bls.n	8001844 <DMA_CheckFifoParam+0xb4>
 800183e:	2b03      	cmp	r3, #3
 8001840:	d003      	beq.n	800184a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001842:	e018      	b.n	8001876 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	73fb      	strb	r3, [r7, #15]
      break;
 8001848:	e015      	b.n	8001876 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00e      	beq.n	8001874 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	73fb      	strb	r3, [r7, #15]
      break;
 800185a:	e00b      	b.n	8001874 <DMA_CheckFifoParam+0xe4>
      break;
 800185c:	bf00      	nop
 800185e:	e00a      	b.n	8001876 <DMA_CheckFifoParam+0xe6>
      break;
 8001860:	bf00      	nop
 8001862:	e008      	b.n	8001876 <DMA_CheckFifoParam+0xe6>
      break;
 8001864:	bf00      	nop
 8001866:	e006      	b.n	8001876 <DMA_CheckFifoParam+0xe6>
      break;
 8001868:	bf00      	nop
 800186a:	e004      	b.n	8001876 <DMA_CheckFifoParam+0xe6>
      break;
 800186c:	bf00      	nop
 800186e:	e002      	b.n	8001876 <DMA_CheckFifoParam+0xe6>
      break;   
 8001870:	bf00      	nop
 8001872:	e000      	b.n	8001876 <DMA_CheckFifoParam+0xe6>
      break;
 8001874:	bf00      	nop
    }
  } 
  
  return status; 
 8001876:	7bfb      	ldrb	r3, [r7, #15]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001884:	b480      	push	{r7}
 8001886:	b089      	sub	sp, #36	; 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
 800189e:	e16b      	b.n	8001b78 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018a0:	2201      	movs	r2, #1
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	f040 815a 	bne.w	8001b72 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0x4a>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b12      	cmp	r3, #18
 80018cc:	d123      	bne.n	8001916 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	08da      	lsrs	r2, r3, #3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3208      	adds	r2, #8
 80018d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	220f      	movs	r2, #15
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	691a      	ldr	r2, [r3, #16]
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	08da      	lsrs	r2, r3, #3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3208      	adds	r2, #8
 8001910:	69b9      	ldr	r1, [r7, #24]
 8001912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	2203      	movs	r2, #3
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4013      	ands	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 0203 	and.w	r2, r3, #3
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4313      	orrs	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d00b      	beq.n	800196a <HAL_GPIO_Init+0xe6>
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d007      	beq.n	800196a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800195e:	2b11      	cmp	r3, #17
 8001960:	d003      	beq.n	800196a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b12      	cmp	r3, #18
 8001968:	d130      	bne.n	80019cc <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	2203      	movs	r2, #3
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4013      	ands	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	68da      	ldr	r2, [r3, #12]
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019a0:	2201      	movs	r2, #1
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	091b      	lsrs	r3, r3, #4
 80019b6:	f003 0201 	and.w	r2, r3, #1
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	2203      	movs	r2, #3
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 80b4 	beq.w	8001b72 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4b5f      	ldr	r3, [pc, #380]	; (8001b8c <HAL_GPIO_Init+0x308>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	4a5e      	ldr	r2, [pc, #376]	; (8001b8c <HAL_GPIO_Init+0x308>)
 8001a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a18:	6453      	str	r3, [r2, #68]	; 0x44
 8001a1a:	4b5c      	ldr	r3, [pc, #368]	; (8001b8c <HAL_GPIO_Init+0x308>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a26:	4a5a      	ldr	r2, [pc, #360]	; (8001b90 <HAL_GPIO_Init+0x30c>)
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	089b      	lsrs	r3, r3, #2
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	220f      	movs	r2, #15
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4013      	ands	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a51      	ldr	r2, [pc, #324]	; (8001b94 <HAL_GPIO_Init+0x310>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d02b      	beq.n	8001aaa <HAL_GPIO_Init+0x226>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a50      	ldr	r2, [pc, #320]	; (8001b98 <HAL_GPIO_Init+0x314>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d025      	beq.n	8001aa6 <HAL_GPIO_Init+0x222>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a4f      	ldr	r2, [pc, #316]	; (8001b9c <HAL_GPIO_Init+0x318>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d01f      	beq.n	8001aa2 <HAL_GPIO_Init+0x21e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a4e      	ldr	r2, [pc, #312]	; (8001ba0 <HAL_GPIO_Init+0x31c>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d019      	beq.n	8001a9e <HAL_GPIO_Init+0x21a>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a4d      	ldr	r2, [pc, #308]	; (8001ba4 <HAL_GPIO_Init+0x320>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d013      	beq.n	8001a9a <HAL_GPIO_Init+0x216>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a4c      	ldr	r2, [pc, #304]	; (8001ba8 <HAL_GPIO_Init+0x324>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d00d      	beq.n	8001a96 <HAL_GPIO_Init+0x212>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a4b      	ldr	r2, [pc, #300]	; (8001bac <HAL_GPIO_Init+0x328>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d007      	beq.n	8001a92 <HAL_GPIO_Init+0x20e>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a4a      	ldr	r2, [pc, #296]	; (8001bb0 <HAL_GPIO_Init+0x32c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d101      	bne.n	8001a8e <HAL_GPIO_Init+0x20a>
 8001a8a:	2307      	movs	r3, #7
 8001a8c:	e00e      	b.n	8001aac <HAL_GPIO_Init+0x228>
 8001a8e:	2308      	movs	r3, #8
 8001a90:	e00c      	b.n	8001aac <HAL_GPIO_Init+0x228>
 8001a92:	2306      	movs	r3, #6
 8001a94:	e00a      	b.n	8001aac <HAL_GPIO_Init+0x228>
 8001a96:	2305      	movs	r3, #5
 8001a98:	e008      	b.n	8001aac <HAL_GPIO_Init+0x228>
 8001a9a:	2304      	movs	r3, #4
 8001a9c:	e006      	b.n	8001aac <HAL_GPIO_Init+0x228>
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e004      	b.n	8001aac <HAL_GPIO_Init+0x228>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	e002      	b.n	8001aac <HAL_GPIO_Init+0x228>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <HAL_GPIO_Init+0x228>
 8001aaa:	2300      	movs	r3, #0
 8001aac:	69fa      	ldr	r2, [r7, #28]
 8001aae:	f002 0203 	and.w	r2, r2, #3
 8001ab2:	0092      	lsls	r2, r2, #2
 8001ab4:	4093      	lsls	r3, r2
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001abc:	4934      	ldr	r1, [pc, #208]	; (8001b90 <HAL_GPIO_Init+0x30c>)
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	089b      	lsrs	r3, r3, #2
 8001ac2:	3302      	adds	r3, #2
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aca:	4b3a      	ldr	r3, [pc, #232]	; (8001bb4 <HAL_GPIO_Init+0x330>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aee:	4a31      	ldr	r2, [pc, #196]	; (8001bb4 <HAL_GPIO_Init+0x330>)
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001af4:	4b2f      	ldr	r3, [pc, #188]	; (8001bb4 <HAL_GPIO_Init+0x330>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b18:	4a26      	ldr	r2, [pc, #152]	; (8001bb4 <HAL_GPIO_Init+0x330>)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b1e:	4b25      	ldr	r3, [pc, #148]	; (8001bb4 <HAL_GPIO_Init+0x330>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b42:	4a1c      	ldr	r2, [pc, #112]	; (8001bb4 <HAL_GPIO_Init+0x330>)
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b48:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <HAL_GPIO_Init+0x330>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b6c:	4a11      	ldr	r2, [pc, #68]	; (8001bb4 <HAL_GPIO_Init+0x330>)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3301      	adds	r3, #1
 8001b76:	61fb      	str	r3, [r7, #28]
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	2b0f      	cmp	r3, #15
 8001b7c:	f67f ae90 	bls.w	80018a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b80:	bf00      	nop
 8001b82:	3724      	adds	r7, #36	; 0x24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40013800 	.word	0x40013800
 8001b94:	40020000 	.word	0x40020000
 8001b98:	40020400 	.word	0x40020400
 8001b9c:	40020800 	.word	0x40020800
 8001ba0:	40020c00 	.word	0x40020c00
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40021400 	.word	0x40021400
 8001bac:	40021800 	.word	0x40021800
 8001bb0:	40021c00 	.word	0x40021c00
 8001bb4:	40013c00 	.word	0x40013c00

08001bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	807b      	strh	r3, [r7, #2]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bc8:	787b      	ldrb	r3, [r7, #1]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bce:	887a      	ldrh	r2, [r7, #2]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bd4:	e003      	b.n	8001bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bd6:	887b      	ldrh	r3, [r7, #2]
 8001bd8:	041a      	lsls	r2, r3, #16
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	619a      	str	r2, [r3, #24]
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b088      	sub	sp, #32
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e128      	b.n	8001e50 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d109      	bne.n	8001c1e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a90      	ldr	r2, [pc, #576]	; (8001e58 <HAL_I2S_Init+0x26c>)
 8001c16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f002 f95b 	bl	8003ed4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2202      	movs	r2, #2
 8001c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001c34:	f023 030f 	bic.w	r3, r3, #15
 8001c38:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d060      	beq.n	8001d0c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d102      	bne.n	8001c58 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001c52:	2310      	movs	r3, #16
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	e001      	b.n	8001c5c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001c58:	2320      	movs	r3, #32
 8001c5a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b20      	cmp	r3, #32
 8001c62:	d802      	bhi.n	8001c6a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001c6a:	2001      	movs	r0, #1
 8001c6c:	f001 fba6 	bl	80033bc <HAL_RCCEx_GetPeriphCLKFreq>
 8001c70:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c7a:	d125      	bne.n	8001cc8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d010      	beq.n	8001ca6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	461a      	mov	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca0:	3305      	adds	r3, #5
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	e01f      	b.n	8001ce6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	461a      	mov	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc2:	3305      	adds	r3, #5
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	e00e      	b.n	8001ce6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	461a      	mov	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce2:	3305      	adds	r3, #5
 8001ce4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4a5c      	ldr	r2, [pc, #368]	; (8001e5c <HAL_I2S_Init+0x270>)
 8001cea:	fba2 2303 	umull	r2, r3, r2, r3
 8001cee:	08db      	lsrs	r3, r3, #3
 8001cf0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	085b      	lsrs	r3, r3, #1
 8001d02:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	021b      	lsls	r3, r3, #8
 8001d08:	61bb      	str	r3, [r7, #24]
 8001d0a:	e003      	b.n	8001d14 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d902      	bls.n	8001d20 <HAL_I2S_Init+0x134>
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	2bff      	cmp	r3, #255	; 0xff
 8001d1e:	d907      	bls.n	8001d30 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d24:	f043 0210 	orr.w	r2, r3, #16
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e08f      	b.n	8001e50 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691a      	ldr	r2, [r3, #16]
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	ea42 0103 	orr.w	r1, r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	69fa      	ldr	r2, [r7, #28]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001d4e:	f023 030f 	bic.w	r3, r3, #15
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6851      	ldr	r1, [r2, #4]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6892      	ldr	r2, [r2, #8]
 8001d5a:	4311      	orrs	r1, r2
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	68d2      	ldr	r2, [r2, #12]
 8001d60:	4311      	orrs	r1, r2
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6992      	ldr	r2, [r2, #24]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d72:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d161      	bne.n	8001e40 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a38      	ldr	r2, [pc, #224]	; (8001e60 <HAL_I2S_Init+0x274>)
 8001d80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a37      	ldr	r2, [pc, #220]	; (8001e64 <HAL_I2S_Init+0x278>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d101      	bne.n	8001d90 <HAL_I2S_Init+0x1a4>
 8001d8c:	4b36      	ldr	r3, [pc, #216]	; (8001e68 <HAL_I2S_Init+0x27c>)
 8001d8e:	e001      	b.n	8001d94 <HAL_I2S_Init+0x1a8>
 8001d90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6812      	ldr	r2, [r2, #0]
 8001d9a:	4932      	ldr	r1, [pc, #200]	; (8001e64 <HAL_I2S_Init+0x278>)
 8001d9c:	428a      	cmp	r2, r1
 8001d9e:	d101      	bne.n	8001da4 <HAL_I2S_Init+0x1b8>
 8001da0:	4a31      	ldr	r2, [pc, #196]	; (8001e68 <HAL_I2S_Init+0x27c>)
 8001da2:	e001      	b.n	8001da8 <HAL_I2S_Init+0x1bc>
 8001da4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001da8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001dac:	f023 030f 	bic.w	r3, r3, #15
 8001db0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a2b      	ldr	r2, [pc, #172]	; (8001e64 <HAL_I2S_Init+0x278>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d101      	bne.n	8001dc0 <HAL_I2S_Init+0x1d4>
 8001dbc:	4b2a      	ldr	r3, [pc, #168]	; (8001e68 <HAL_I2S_Init+0x27c>)
 8001dbe:	e001      	b.n	8001dc4 <HAL_I2S_Init+0x1d8>
 8001dc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a25      	ldr	r2, [pc, #148]	; (8001e64 <HAL_I2S_Init+0x278>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d101      	bne.n	8001dd6 <HAL_I2S_Init+0x1ea>
 8001dd2:	4b25      	ldr	r3, [pc, #148]	; (8001e68 <HAL_I2S_Init+0x27c>)
 8001dd4:	e001      	b.n	8001dda <HAL_I2S_Init+0x1ee>
 8001dd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dda:	69db      	ldr	r3, [r3, #28]
 8001ddc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001de6:	d003      	beq.n	8001df0 <HAL_I2S_Init+0x204>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d103      	bne.n	8001df8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001df0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	e001      	b.n	8001dfc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	b299      	uxth	r1, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001e12:	4303      	orrs	r3, r0
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	430b      	orrs	r3, r1
 8001e18:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	897b      	ldrh	r3, [r7, #10]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e28:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a0d      	ldr	r2, [pc, #52]	; (8001e64 <HAL_I2S_Init+0x278>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d101      	bne.n	8001e38 <HAL_I2S_Init+0x24c>
 8001e34:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <HAL_I2S_Init+0x27c>)
 8001e36:	e001      	b.n	8001e3c <HAL_I2S_Init+0x250>
 8001e38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e3c:	897a      	ldrh	r2, [r7, #10]
 8001e3e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3720      	adds	r7, #32
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	08001f63 	.word	0x08001f63
 8001e5c:	cccccccd 	.word	0xcccccccd
 8001e60:	0800238d 	.word	0x0800238d
 8001e64:	40003800 	.word	0x40003800
 8001e68:	40003400 	.word	0x40003400

08001e6c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	881a      	ldrh	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	1c9a      	adds	r2, r3, #2
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10e      	bne.n	8001efc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001eec:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff ffb8 	bl	8001e6c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68da      	ldr	r2, [r3, #12]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f16:	b292      	uxth	r2, r2
 8001f18:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1e:	1c9a      	adds	r2, r3, #2
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10e      	bne.n	8001f5a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f4a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff ff93 	bl	8001e80 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b086      	sub	sp, #24
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d13a      	bne.n	8001ff4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d109      	bne.n	8001f9c <I2S_IRQHandler+0x3a>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f92:	2b40      	cmp	r3, #64	; 0x40
 8001f94:	d102      	bne.n	8001f9c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff ffb4 	bl	8001f04 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa2:	2b40      	cmp	r3, #64	; 0x40
 8001fa4:	d126      	bne.n	8001ff4 <I2S_IRQHandler+0x92>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 0320 	and.w	r3, r3, #32
 8001fb0:	2b20      	cmp	r3, #32
 8001fb2:	d11f      	bne.n	8001ff4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001fc2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	f043 0202 	orr.w	r2, r3, #2
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff ff50 	bl	8001e94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b03      	cmp	r3, #3
 8001ffe:	d136      	bne.n	800206e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b02      	cmp	r3, #2
 8002008:	d109      	bne.n	800201e <I2S_IRQHandler+0xbc>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002014:	2b80      	cmp	r3, #128	; 0x80
 8002016:	d102      	bne.n	800201e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff ff45 	bl	8001ea8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	2b08      	cmp	r3, #8
 8002026:	d122      	bne.n	800206e <I2S_IRQHandler+0x10c>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 0320 	and.w	r3, r3, #32
 8002032:	2b20      	cmp	r3, #32
 8002034:	d11b      	bne.n	800206e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002044:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002060:	f043 0204 	orr.w	r2, r3, #4
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff ff13 	bl	8001e94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800206e:	bf00      	nop
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b088      	sub	sp, #32
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
 8002084:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8002086:	2300      	movs	r3, #0
 8002088:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800208e:	2300      	movs	r3, #0
 8002090:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b01      	cmp	r3, #1
 800209c:	d002      	beq.n	80020a4 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 800209e:	2302      	movs	r3, #2
 80020a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80020a2:	e160      	b.n	8002366 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d005      	beq.n	80020b6 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d002      	beq.n	80020b6 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80020b0:	887b      	ldrh	r3, [r7, #2]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e15a      	b.n	8002370 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d101      	bne.n	80020ca <HAL_I2SEx_TransmitReceive_DMA+0x52>
 80020c6:	2302      	movs	r3, #2
 80020c8:	e152      	b.n	8002370 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	2b03      	cmp	r3, #3
 80020ee:	d002      	beq.n	80020f6 <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	2b05      	cmp	r3, #5
 80020f4:	d114      	bne.n	8002120 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 80020f6:	887b      	ldrh	r3, [r7, #2]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002100:	887b      	ldrh	r3, [r7, #2]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	b29a      	uxth	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 800210a:	887b      	ldrh	r3, [r7, #2]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	b29a      	uxth	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002114:	887b      	ldrh	r3, [r7, #2]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	b29a      	uxth	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	865a      	strh	r2, [r3, #50]	; 0x32
 800211e:	e00b      	b.n	8002138 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	887a      	ldrh	r2, [r7, #2]
 8002124:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	887a      	ldrh	r2, [r7, #2]
 800212a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	887a      	ldrh	r2, [r7, #2]
 8002130:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	887a      	ldrh	r2, [r7, #2]
 8002136:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2205      	movs	r2, #5
 8002142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214a:	4a8b      	ldr	r2, [pc, #556]	; (8002378 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 800214c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002152:	4a8a      	ldr	r2, [pc, #552]	; (800237c <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002154:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800215a:	4a89      	ldr	r2, [pc, #548]	; (8002380 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 800215c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback  = I2SEx_TxRxDMAHalfCplt;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002162:	4a85      	ldr	r2, [pc, #532]	; (8002378 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002164:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216a:	4a84      	ldr	r2, [pc, #528]	; (800237c <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 800216c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002172:	4a83      	ldr	r2, [pc, #524]	; (8002380 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002174:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002180:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002188:	d002      	beq.n	8002190 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d16b      	bne.n	8002268 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002190:	1d3b      	adds	r3, r7, #4
 8002192:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a79      	ldr	r2, [pc, #484]	; (8002384 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d101      	bne.n	80021a6 <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 80021a2:	4b79      	ldr	r3, [pc, #484]	; (8002388 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80021a4:	e001      	b.n	80021aa <HAL_I2SEx_TransmitReceive_DMA+0x132>
 80021a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021aa:	330c      	adds	r3, #12
 80021ac:	4619      	mov	r1, r3
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	f7ff f89c 	bl	80012f4 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a70      	ldr	r2, [pc, #448]	; (8002384 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d101      	bne.n	80021ca <HAL_I2SEx_TransmitReceive_DMA+0x152>
 80021c6:	4b70      	ldr	r3, [pc, #448]	; (8002388 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80021c8:	e001      	b.n	80021ce <HAL_I2SEx_TransmitReceive_DMA+0x156>
 80021ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	496b      	ldr	r1, [pc, #428]	; (8002384 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80021d6:	428b      	cmp	r3, r1
 80021d8:	d101      	bne.n	80021de <HAL_I2SEx_TransmitReceive_DMA+0x166>
 80021da:	4b6b      	ldr	r3, [pc, #428]	; (8002388 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80021dc:	e001      	b.n	80021e2 <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 80021de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021e2:	f042 0201 	orr.w	r2, r2, #1
 80021e6:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 80021e8:	f107 0308 	add.w	r3, r7, #8
 80021ec:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	6819      	ldr	r1, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	330c      	adds	r3, #12
 80021fc:	461a      	mov	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002202:	b29b      	uxth	r3, r3
 8002204:	f7ff f876 	bl	80012f4 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0202 	orr.w	r2, r2, #2
 8002216:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002226:	f000 809e 	beq.w	8002366 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a55      	ldr	r2, [pc, #340]	; (8002384 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d101      	bne.n	8002238 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8002234:	4b54      	ldr	r3, [pc, #336]	; (8002388 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002236:	e001      	b.n	800223c <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8002238:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800223c:	69da      	ldr	r2, [r3, #28]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4950      	ldr	r1, [pc, #320]	; (8002384 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002244:	428b      	cmp	r3, r1
 8002246:	d101      	bne.n	800224c <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8002248:	4b4f      	ldr	r3, [pc, #316]	; (8002388 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800224a:	e001      	b.n	8002250 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 800224c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002250:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002254:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	69da      	ldr	r2, [r3, #28]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002264:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002266:	e07e      	b.n	8002366 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002276:	d10a      	bne.n	800228e <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002278:	2300      	movs	r3, #0
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 800228e:	f107 0308 	add.w	r3, r7, #8
 8002292:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	6819      	ldr	r1, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a38      	ldr	r2, [pc, #224]	; (8002384 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d101      	bne.n	80022aa <HAL_I2SEx_TransmitReceive_DMA+0x232>
 80022a6:	4b38      	ldr	r3, [pc, #224]	; (8002388 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80022a8:	e001      	b.n	80022ae <HAL_I2SEx_TransmitReceive_DMA+0x236>
 80022aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022ae:	330c      	adds	r3, #12
 80022b0:	461a      	mov	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	f7ff f81c 	bl	80012f4 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a30      	ldr	r2, [pc, #192]	; (8002384 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d101      	bne.n	80022ca <HAL_I2SEx_TransmitReceive_DMA+0x252>
 80022c6:	4b30      	ldr	r3, [pc, #192]	; (8002388 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80022c8:	e001      	b.n	80022ce <HAL_I2SEx_TransmitReceive_DMA+0x256>
 80022ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	492b      	ldr	r1, [pc, #172]	; (8002384 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80022d6:	428b      	cmp	r3, r1
 80022d8:	d101      	bne.n	80022de <HAL_I2SEx_TransmitReceive_DMA+0x266>
 80022da:	4b2b      	ldr	r3, [pc, #172]	; (8002388 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80022dc:	e001      	b.n	80022e2 <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 80022de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022e2:	f042 0202 	orr.w	r2, r2, #2
 80022e6:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 80022e8:	1d3b      	adds	r3, r7, #4
 80022ea:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	330c      	adds	r3, #12
 80022f6:	4619      	mov	r1, r3
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002300:	b29b      	uxth	r3, r3
 8002302:	f7fe fff7 	bl	80012f4 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f042 0201 	orr.w	r2, r2, #1
 8002314:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002324:	d01e      	beq.n	8002364 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a16      	ldr	r2, [pc, #88]	; (8002384 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d101      	bne.n	8002334 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8002330:	4b15      	ldr	r3, [pc, #84]	; (8002388 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002332:	e001      	b.n	8002338 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8002334:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002338:	69da      	ldr	r2, [r3, #28]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4911      	ldr	r1, [pc, #68]	; (8002384 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002340:	428b      	cmp	r3, r1
 8002342:	d101      	bne.n	8002348 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8002344:	4b10      	ldr	r3, [pc, #64]	; (8002388 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002346:	e001      	b.n	800234c <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8002348:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800234c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002350:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	69da      	ldr	r2, [r3, #28]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002360:	61da      	str	r2, [r3, #28]
 8002362:	e000      	b.n	8002366 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8002364:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 800236e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3720      	adds	r7, #32
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	08002635 	.word	0x08002635
 800237c:	08002651 	.word	0x08002651
 8002380:	08002789 	.word	0x08002789
 8002384:	40003800 	.word	0x40003800
 8002388:	40003400 	.word	0x40003400

0800238c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4aa2      	ldr	r2, [pc, #648]	; (800262c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d101      	bne.n	80023aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80023a6:	4ba2      	ldr	r3, [pc, #648]	; (8002630 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80023a8:	e001      	b.n	80023ae <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80023aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a9b      	ldr	r2, [pc, #620]	; (800262c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d101      	bne.n	80023c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80023c4:	4b9a      	ldr	r3, [pc, #616]	; (8002630 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80023c6:	e001      	b.n	80023cc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80023c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023d8:	d004      	beq.n	80023e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f040 8099 	bne.w	8002516 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d107      	bne.n	80023fe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d002      	beq.n	80023fe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 fa05 	bl	8002808 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b01      	cmp	r3, #1
 8002406:	d107      	bne.n	8002418 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240e:	2b00      	cmp	r3, #0
 8002410:	d002      	beq.n	8002418 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 faa8 	bl	8002968 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800241e:	2b40      	cmp	r3, #64	; 0x40
 8002420:	d13a      	bne.n	8002498 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	f003 0320 	and.w	r3, r3, #32
 8002428:	2b00      	cmp	r3, #0
 800242a:	d035      	beq.n	8002498 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a7e      	ldr	r2, [pc, #504]	; (800262c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d101      	bne.n	800243a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002436:	4b7e      	ldr	r3, [pc, #504]	; (8002630 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002438:	e001      	b.n	800243e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800243a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4979      	ldr	r1, [pc, #484]	; (800262c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002446:	428b      	cmp	r3, r1
 8002448:	d101      	bne.n	800244e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800244a:	4b79      	ldr	r3, [pc, #484]	; (8002630 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800244c:	e001      	b.n	8002452 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800244e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002452:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002456:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002466:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	f043 0202 	orr.w	r2, r3, #2
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7ff fcfe 	bl	8001e94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b08      	cmp	r3, #8
 80024a0:	f040 80be 	bne.w	8002620 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	f003 0320 	and.w	r3, r3, #32
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 80b8 	beq.w	8002620 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80024be:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a59      	ldr	r2, [pc, #356]	; (800262c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d101      	bne.n	80024ce <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80024ca:	4b59      	ldr	r3, [pc, #356]	; (8002630 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80024cc:	e001      	b.n	80024d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80024ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4954      	ldr	r1, [pc, #336]	; (800262c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80024da:	428b      	cmp	r3, r1
 80024dc:	d101      	bne.n	80024e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80024de:	4b54      	ldr	r3, [pc, #336]	; (8002630 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80024e0:	e001      	b.n	80024e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80024e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80024ea:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80024ec:	2300      	movs	r3, #0
 80024ee:	60bb      	str	r3, [r7, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	60bb      	str	r3, [r7, #8]
 80024f8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	f043 0204 	orr.w	r2, r3, #4
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff fcc0 	bl	8001e94 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002514:	e084      	b.n	8002620 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b02      	cmp	r3, #2
 800251e:	d107      	bne.n	8002530 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002526:	2b00      	cmp	r3, #0
 8002528:	d002      	beq.n	8002530 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f99e 	bl	800286c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b01      	cmp	r3, #1
 8002538:	d107      	bne.n	800254a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002540:	2b00      	cmp	r3, #0
 8002542:	d002      	beq.n	800254a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f9dd 	bl	8002904 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002550:	2b40      	cmp	r3, #64	; 0x40
 8002552:	d12f      	bne.n	80025b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f003 0320 	and.w	r3, r3, #32
 800255a:	2b00      	cmp	r3, #0
 800255c:	d02a      	beq.n	80025b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800256c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a2e      	ldr	r2, [pc, #184]	; (800262c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d101      	bne.n	800257c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002578:	4b2d      	ldr	r3, [pc, #180]	; (8002630 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800257a:	e001      	b.n	8002580 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800257c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4929      	ldr	r1, [pc, #164]	; (800262c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002588:	428b      	cmp	r3, r1
 800258a:	d101      	bne.n	8002590 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800258c:	4b28      	ldr	r3, [pc, #160]	; (8002630 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800258e:	e001      	b.n	8002594 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002590:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002594:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002598:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	f043 0202 	orr.w	r2, r3, #2
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff fc70 	bl	8001e94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	d131      	bne.n	8002622 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	f003 0320 	and.w	r3, r3, #32
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d02c      	beq.n	8002622 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a17      	ldr	r2, [pc, #92]	; (800262c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d101      	bne.n	80025d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80025d2:	4b17      	ldr	r3, [pc, #92]	; (8002630 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80025d4:	e001      	b.n	80025da <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80025d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4912      	ldr	r1, [pc, #72]	; (800262c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80025e2:	428b      	cmp	r3, r1
 80025e4:	d101      	bne.n	80025ea <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80025e6:	4b12      	ldr	r3, [pc, #72]	; (8002630 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80025e8:	e001      	b.n	80025ee <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80025ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80025f2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002602:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002610:	f043 0204 	orr.w	r2, r3, #4
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f7ff fc3b 	bl	8001e94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800261e:	e000      	b.n	8002622 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002620:	bf00      	nop
}
 8002622:	bf00      	nop
 8002624:	3720      	adds	r7, #32
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40003800 	.word	0x40003800
 8002630:	40003400 	.word	0x40003400

08002634 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002640:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f001 f9d4 	bl	80039f0 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002648:	bf00      	nop
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	2b00      	cmp	r3, #0
 8002664:	f040 8084 	bne.w	8002770 <I2SEx_TxRxDMACplt+0x120>
  {
    if (hi2s->hdmarx == hdma)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	429a      	cmp	r2, r3
 8002670:	d13c      	bne.n	80026ec <I2SEx_TxRxDMACplt+0x9c>
    {
      /* Disable Rx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800267c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002680:	d006      	beq.n	8002690 <I2SEx_TxRxDMACplt+0x40>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 800268c:	2b00      	cmp	r3, #0
 800268e:	d116      	bne.n	80026be <I2SEx_TxRxDMACplt+0x6e>
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a3a      	ldr	r2, [pc, #232]	; (8002780 <I2SEx_TxRxDMACplt+0x130>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d101      	bne.n	800269e <I2SEx_TxRxDMACplt+0x4e>
 800269a:	4b3a      	ldr	r3, [pc, #232]	; (8002784 <I2SEx_TxRxDMACplt+0x134>)
 800269c:	e001      	b.n	80026a2 <I2SEx_TxRxDMACplt+0x52>
 800269e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4935      	ldr	r1, [pc, #212]	; (8002780 <I2SEx_TxRxDMACplt+0x130>)
 80026aa:	428b      	cmp	r3, r1
 80026ac:	d101      	bne.n	80026b2 <I2SEx_TxRxDMACplt+0x62>
 80026ae:	4b35      	ldr	r3, [pc, #212]	; (8002784 <I2SEx_TxRxDMACplt+0x134>)
 80026b0:	e001      	b.n	80026b6 <I2SEx_TxRxDMACplt+0x66>
 80026b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026b6:	f022 0201 	bic.w	r2, r2, #1
 80026ba:	605a      	str	r2, [r3, #4]
 80026bc:	e007      	b.n	80026ce <I2SEx_TxRxDMACplt+0x7e>
      }
      else
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0201 	bic.w	r2, r2, #1
 80026cc:	605a      	str	r2, [r3, #4]
      }

      hi2s->RxXferCount = 0U;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	865a      	strh	r2, [r3, #50]	; 0x32

      if (hi2s->TxXferCount == 0U)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d8:	b29b      	uxth	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d106      	bne.n	80026ec <I2SEx_TxRxDMACplt+0x9c>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f001 f992 	bl	8003a10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }

    if (hi2s->hdmatx == hdma)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d13c      	bne.n	8002770 <I2SEx_TxRxDMACplt+0x120>
    {
      /* Disable Tx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002704:	d006      	beq.n	8002714 <I2SEx_TxRxDMACplt+0xc4>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002710:	2b00      	cmp	r3, #0
 8002712:	d108      	bne.n	8002726 <I2SEx_TxRxDMACplt+0xd6>
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0202 	bic.w	r2, r2, #2
 8002722:	605a      	str	r2, [r3, #4]
 8002724:	e015      	b.n	8002752 <I2SEx_TxRxDMACplt+0x102>
      }
      else
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a15      	ldr	r2, [pc, #84]	; (8002780 <I2SEx_TxRxDMACplt+0x130>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d101      	bne.n	8002734 <I2SEx_TxRxDMACplt+0xe4>
 8002730:	4b14      	ldr	r3, [pc, #80]	; (8002784 <I2SEx_TxRxDMACplt+0x134>)
 8002732:	e001      	b.n	8002738 <I2SEx_TxRxDMACplt+0xe8>
 8002734:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4910      	ldr	r1, [pc, #64]	; (8002780 <I2SEx_TxRxDMACplt+0x130>)
 8002740:	428b      	cmp	r3, r1
 8002742:	d101      	bne.n	8002748 <I2SEx_TxRxDMACplt+0xf8>
 8002744:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <I2SEx_TxRxDMACplt+0x134>)
 8002746:	e001      	b.n	800274c <I2SEx_TxRxDMACplt+0xfc>
 8002748:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800274c:	f022 0202 	bic.w	r2, r2, #2
 8002750:	605a      	str	r2, [r3, #4]
      }

      hi2s->TxXferCount = 0U;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2s->RxXferCount == 0U)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800275c:	b29b      	uxth	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d106      	bne.n	8002770 <I2SEx_TxRxDMACplt+0x120>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f001 f950 	bl	8003a10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }
  }
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f001 f94d 	bl	8003a10 <HAL_I2SEx_TxRxCpltCallback>
}
 8002776:	bf00      	nop
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40003800 	.word	0x40003800
 8002784:	40003400 	.word	0x40003400

08002788 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002794:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0203 	bic.w	r2, r2, #3
 80027a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a15      	ldr	r2, [pc, #84]	; (8002800 <I2SEx_TxRxDMAError+0x78>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d101      	bne.n	80027b4 <I2SEx_TxRxDMAError+0x2c>
 80027b0:	4b14      	ldr	r3, [pc, #80]	; (8002804 <I2SEx_TxRxDMAError+0x7c>)
 80027b2:	e001      	b.n	80027b8 <I2SEx_TxRxDMAError+0x30>
 80027b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4910      	ldr	r1, [pc, #64]	; (8002800 <I2SEx_TxRxDMAError+0x78>)
 80027c0:	428b      	cmp	r3, r1
 80027c2:	d101      	bne.n	80027c8 <I2SEx_TxRxDMAError+0x40>
 80027c4:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <I2SEx_TxRxDMAError+0x7c>)
 80027c6:	e001      	b.n	80027cc <I2SEx_TxRxDMAError+0x44>
 80027c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027cc:	f022 0203 	bic.w	r2, r2, #3
 80027d0:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	f043 0208 	orr.w	r2, r3, #8
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f7ff fb4e 	bl	8001e94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80027f8:	bf00      	nop
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40003800 	.word	0x40003800
 8002804:	40003400 	.word	0x40003400

08002808 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	1c99      	adds	r1, r3, #2
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6251      	str	r1, [r2, #36]	; 0x24
 800281a:	881a      	ldrh	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002826:	b29b      	uxth	r3, r3
 8002828:	3b01      	subs	r3, #1
 800282a:	b29a      	uxth	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002834:	b29b      	uxth	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d113      	bne.n	8002862 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002848:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800284e:	b29b      	uxth	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d106      	bne.n	8002862 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f001 f8d7 	bl	8003a10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
	...

0800286c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	1c99      	adds	r1, r3, #2
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6251      	str	r1, [r2, #36]	; 0x24
 800287e:	8819      	ldrh	r1, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a1d      	ldr	r2, [pc, #116]	; (80028fc <I2SEx_TxISR_I2SExt+0x90>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d101      	bne.n	800288e <I2SEx_TxISR_I2SExt+0x22>
 800288a:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <I2SEx_TxISR_I2SExt+0x94>)
 800288c:	e001      	b.n	8002892 <I2SEx_TxISR_I2SExt+0x26>
 800288e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002892:	460a      	mov	r2, r1
 8002894:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289a:	b29b      	uxth	r3, r3
 800289c:	3b01      	subs	r3, #1
 800289e:	b29a      	uxth	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d121      	bne.n	80028f2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a12      	ldr	r2, [pc, #72]	; (80028fc <I2SEx_TxISR_I2SExt+0x90>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d101      	bne.n	80028bc <I2SEx_TxISR_I2SExt+0x50>
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <I2SEx_TxISR_I2SExt+0x94>)
 80028ba:	e001      	b.n	80028c0 <I2SEx_TxISR_I2SExt+0x54>
 80028bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	490d      	ldr	r1, [pc, #52]	; (80028fc <I2SEx_TxISR_I2SExt+0x90>)
 80028c8:	428b      	cmp	r3, r1
 80028ca:	d101      	bne.n	80028d0 <I2SEx_TxISR_I2SExt+0x64>
 80028cc:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <I2SEx_TxISR_I2SExt+0x94>)
 80028ce:	e001      	b.n	80028d4 <I2SEx_TxISR_I2SExt+0x68>
 80028d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80028d8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80028de:	b29b      	uxth	r3, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d106      	bne.n	80028f2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f001 f88f 	bl	8003a10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40003800 	.word	0x40003800
 8002900:	40003400 	.word	0x40003400

08002904 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68d8      	ldr	r0, [r3, #12]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002916:	1c99      	adds	r1, r3, #2
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800291c:	b282      	uxth	r2, r0
 800291e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002924:	b29b      	uxth	r3, r3
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002932:	b29b      	uxth	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d113      	bne.n	8002960 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002946:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294c:	b29b      	uxth	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d106      	bne.n	8002960 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f001 f858 	bl	8003a10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002960:	bf00      	nop
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a20      	ldr	r2, [pc, #128]	; (80029f8 <I2SEx_RxISR_I2SExt+0x90>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d101      	bne.n	800297e <I2SEx_RxISR_I2SExt+0x16>
 800297a:	4b20      	ldr	r3, [pc, #128]	; (80029fc <I2SEx_RxISR_I2SExt+0x94>)
 800297c:	e001      	b.n	8002982 <I2SEx_RxISR_I2SExt+0x1a>
 800297e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002982:	68d8      	ldr	r0, [r3, #12]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002988:	1c99      	adds	r1, r3, #2
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800298e:	b282      	uxth	r2, r0
 8002990:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002996:	b29b      	uxth	r3, r3
 8002998:	3b01      	subs	r3, #1
 800299a:	b29a      	uxth	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d121      	bne.n	80029ee <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a12      	ldr	r2, [pc, #72]	; (80029f8 <I2SEx_RxISR_I2SExt+0x90>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d101      	bne.n	80029b8 <I2SEx_RxISR_I2SExt+0x50>
 80029b4:	4b11      	ldr	r3, [pc, #68]	; (80029fc <I2SEx_RxISR_I2SExt+0x94>)
 80029b6:	e001      	b.n	80029bc <I2SEx_RxISR_I2SExt+0x54>
 80029b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	490d      	ldr	r1, [pc, #52]	; (80029f8 <I2SEx_RxISR_I2SExt+0x90>)
 80029c4:	428b      	cmp	r3, r1
 80029c6:	d101      	bne.n	80029cc <I2SEx_RxISR_I2SExt+0x64>
 80029c8:	4b0c      	ldr	r3, [pc, #48]	; (80029fc <I2SEx_RxISR_I2SExt+0x94>)
 80029ca:	e001      	b.n	80029d0 <I2SEx_RxISR_I2SExt+0x68>
 80029cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029d4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029da:	b29b      	uxth	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d106      	bne.n	80029ee <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f001 f811 	bl	8003a10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40003800 	.word	0x40003800
 80029fc:	40003400 	.word	0x40003400

08002a00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e22d      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d075      	beq.n	8002b0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a1e:	4ba3      	ldr	r3, [pc, #652]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d00c      	beq.n	8002a44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a2a:	4ba0      	ldr	r3, [pc, #640]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d112      	bne.n	8002a5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a36:	4b9d      	ldr	r3, [pc, #628]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a42:	d10b      	bne.n	8002a5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a44:	4b99      	ldr	r3, [pc, #612]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d05b      	beq.n	8002b08 <HAL_RCC_OscConfig+0x108>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d157      	bne.n	8002b08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e208      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a64:	d106      	bne.n	8002a74 <HAL_RCC_OscConfig+0x74>
 8002a66:	4b91      	ldr	r3, [pc, #580]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a90      	ldr	r2, [pc, #576]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	e01d      	b.n	8002ab0 <HAL_RCC_OscConfig+0xb0>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a7c:	d10c      	bne.n	8002a98 <HAL_RCC_OscConfig+0x98>
 8002a7e:	4b8b      	ldr	r3, [pc, #556]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a8a      	ldr	r2, [pc, #552]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	4b88      	ldr	r3, [pc, #544]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a87      	ldr	r2, [pc, #540]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	e00b      	b.n	8002ab0 <HAL_RCC_OscConfig+0xb0>
 8002a98:	4b84      	ldr	r3, [pc, #528]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a83      	ldr	r2, [pc, #524]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aa2:	6013      	str	r3, [r2, #0]
 8002aa4:	4b81      	ldr	r3, [pc, #516]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a80      	ldr	r2, [pc, #512]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002aaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d013      	beq.n	8002ae0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab8:	f7fe fa50 	bl	8000f5c <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ac0:	f7fe fa4c 	bl	8000f5c <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b64      	cmp	r3, #100	; 0x64
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e1cd      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad2:	4b76      	ldr	r3, [pc, #472]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0f0      	beq.n	8002ac0 <HAL_RCC_OscConfig+0xc0>
 8002ade:	e014      	b.n	8002b0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae0:	f7fe fa3c 	bl	8000f5c <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ae8:	f7fe fa38 	bl	8000f5c <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b64      	cmp	r3, #100	; 0x64
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e1b9      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002afa:	4b6c      	ldr	r3, [pc, #432]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f0      	bne.n	8002ae8 <HAL_RCC_OscConfig+0xe8>
 8002b06:	e000      	b.n	8002b0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d063      	beq.n	8002bde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b16:	4b65      	ldr	r3, [pc, #404]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00b      	beq.n	8002b3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b22:	4b62      	ldr	r3, [pc, #392]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d11c      	bne.n	8002b68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b2e:	4b5f      	ldr	r3, [pc, #380]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d116      	bne.n	8002b68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3a:	4b5c      	ldr	r3, [pc, #368]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d005      	beq.n	8002b52 <HAL_RCC_OscConfig+0x152>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d001      	beq.n	8002b52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e18d      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b52:	4b56      	ldr	r3, [pc, #344]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4952      	ldr	r1, [pc, #328]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b66:	e03a      	b.n	8002bde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d020      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b70:	4b4f      	ldr	r3, [pc, #316]	; (8002cb0 <HAL_RCC_OscConfig+0x2b0>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b76:	f7fe f9f1 	bl	8000f5c <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b7e:	f7fe f9ed 	bl	8000f5c <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e16e      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b90:	4b46      	ldr	r3, [pc, #280]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0f0      	beq.n	8002b7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9c:	4b43      	ldr	r3, [pc, #268]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	4940      	ldr	r1, [pc, #256]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	600b      	str	r3, [r1, #0]
 8002bb0:	e015      	b.n	8002bde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bb2:	4b3f      	ldr	r3, [pc, #252]	; (8002cb0 <HAL_RCC_OscConfig+0x2b0>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb8:	f7fe f9d0 	bl	8000f5c <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bc0:	f7fe f9cc 	bl	8000f5c <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e14d      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bd2:	4b36      	ldr	r3, [pc, #216]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d030      	beq.n	8002c4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d016      	beq.n	8002c20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bf2:	4b30      	ldr	r3, [pc, #192]	; (8002cb4 <HAL_RCC_OscConfig+0x2b4>)
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf8:	f7fe f9b0 	bl	8000f5c <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c00:	f7fe f9ac 	bl	8000f5c <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e12d      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c12:	4b26      	ldr	r3, [pc, #152]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0f0      	beq.n	8002c00 <HAL_RCC_OscConfig+0x200>
 8002c1e:	e015      	b.n	8002c4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c20:	4b24      	ldr	r3, [pc, #144]	; (8002cb4 <HAL_RCC_OscConfig+0x2b4>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c26:	f7fe f999 	bl	8000f5c <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c2e:	f7fe f995 	bl	8000f5c <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e116      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c40:	4b1a      	ldr	r3, [pc, #104]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1f0      	bne.n	8002c2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 80a0 	beq.w	8002d9a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c5e:	4b13      	ldr	r3, [pc, #76]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10f      	bne.n	8002c8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	4b0f      	ldr	r3, [pc, #60]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	4a0e      	ldr	r2, [pc, #56]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c78:	6413      	str	r3, [r2, #64]	; 0x40
 8002c7a:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c86:	2301      	movs	r3, #1
 8002c88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8a:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_RCC_OscConfig+0x2b8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d121      	bne.n	8002cda <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c96:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <HAL_RCC_OscConfig+0x2b8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a07      	ldr	r2, [pc, #28]	; (8002cb8 <HAL_RCC_OscConfig+0x2b8>)
 8002c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ca2:	f7fe f95b 	bl	8000f5c <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca8:	e011      	b.n	8002cce <HAL_RCC_OscConfig+0x2ce>
 8002caa:	bf00      	nop
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	42470000 	.word	0x42470000
 8002cb4:	42470e80 	.word	0x42470e80
 8002cb8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cbc:	f7fe f94e 	bl	8000f5c <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e0cf      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cce:	4b6a      	ldr	r3, [pc, #424]	; (8002e78 <HAL_RCC_OscConfig+0x478>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0f0      	beq.n	8002cbc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d106      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x2f0>
 8002ce2:	4b66      	ldr	r3, [pc, #408]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce6:	4a65      	ldr	r2, [pc, #404]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	6713      	str	r3, [r2, #112]	; 0x70
 8002cee:	e01c      	b.n	8002d2a <HAL_RCC_OscConfig+0x32a>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	2b05      	cmp	r3, #5
 8002cf6:	d10c      	bne.n	8002d12 <HAL_RCC_OscConfig+0x312>
 8002cf8:	4b60      	ldr	r3, [pc, #384]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfc:	4a5f      	ldr	r2, [pc, #380]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002cfe:	f043 0304 	orr.w	r3, r3, #4
 8002d02:	6713      	str	r3, [r2, #112]	; 0x70
 8002d04:	4b5d      	ldr	r3, [pc, #372]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d08:	4a5c      	ldr	r2, [pc, #368]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002d0a:	f043 0301 	orr.w	r3, r3, #1
 8002d0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d10:	e00b      	b.n	8002d2a <HAL_RCC_OscConfig+0x32a>
 8002d12:	4b5a      	ldr	r3, [pc, #360]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d16:	4a59      	ldr	r2, [pc, #356]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002d18:	f023 0301 	bic.w	r3, r3, #1
 8002d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d1e:	4b57      	ldr	r3, [pc, #348]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d22:	4a56      	ldr	r2, [pc, #344]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002d24:	f023 0304 	bic.w	r3, r3, #4
 8002d28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d015      	beq.n	8002d5e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d32:	f7fe f913 	bl	8000f5c <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d38:	e00a      	b.n	8002d50 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d3a:	f7fe f90f 	bl	8000f5c <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e08e      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d50:	4b4a      	ldr	r3, [pc, #296]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0ee      	beq.n	8002d3a <HAL_RCC_OscConfig+0x33a>
 8002d5c:	e014      	b.n	8002d88 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d5e:	f7fe f8fd 	bl	8000f5c <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d64:	e00a      	b.n	8002d7c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d66:	f7fe f8f9 	bl	8000f5c <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e078      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d7c:	4b3f      	ldr	r3, [pc, #252]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1ee      	bne.n	8002d66 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d88:	7dfb      	ldrb	r3, [r7, #23]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d105      	bne.n	8002d9a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d8e:	4b3b      	ldr	r3, [pc, #236]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	4a3a      	ldr	r2, [pc, #232]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002d94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d064      	beq.n	8002e6c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002da2:	4b36      	ldr	r3, [pc, #216]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d05c      	beq.n	8002e68 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d141      	bne.n	8002e3a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db6:	4b32      	ldr	r3, [pc, #200]	; (8002e80 <HAL_RCC_OscConfig+0x480>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7fe f8ce 	bl	8000f5c <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc4:	f7fe f8ca 	bl	8000f5c <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e04b      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd6:	4b29      	ldr	r3, [pc, #164]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69da      	ldr	r2, [r3, #28]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	019b      	lsls	r3, r3, #6
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df8:	085b      	lsrs	r3, r3, #1
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	041b      	lsls	r3, r3, #16
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	061b      	lsls	r3, r3, #24
 8002e06:	491d      	ldr	r1, [pc, #116]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e0c:	4b1c      	ldr	r3, [pc, #112]	; (8002e80 <HAL_RCC_OscConfig+0x480>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e12:	f7fe f8a3 	bl	8000f5c <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e1a:	f7fe f89f 	bl	8000f5c <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e020      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e2c:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x41a>
 8002e38:	e018      	b.n	8002e6c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3a:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <HAL_RCC_OscConfig+0x480>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e40:	f7fe f88c 	bl	8000f5c <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e48:	f7fe f888 	bl	8000f5c <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e009      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5a:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f0      	bne.n	8002e48 <HAL_RCC_OscConfig+0x448>
 8002e66:	e001      	b.n	8002e6c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e000      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40007000 	.word	0x40007000
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	42470060 	.word	0x42470060

08002e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e0ca      	b.n	800302e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e98:	4b67      	ldr	r3, [pc, #412]	; (8003038 <HAL_RCC_ClockConfig+0x1b4>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 030f 	and.w	r3, r3, #15
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d90c      	bls.n	8002ec0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea6:	4b64      	ldr	r3, [pc, #400]	; (8003038 <HAL_RCC_ClockConfig+0x1b4>)
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eae:	4b62      	ldr	r3, [pc, #392]	; (8003038 <HAL_RCC_ClockConfig+0x1b4>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d001      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0b6      	b.n	800302e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d020      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ed8:	4b58      	ldr	r3, [pc, #352]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	4a57      	ldr	r2, [pc, #348]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002ede:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ee2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ef0:	4b52      	ldr	r3, [pc, #328]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	4a51      	ldr	r2, [pc, #324]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002ef6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002efa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002efc:	4b4f      	ldr	r3, [pc, #316]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	494c      	ldr	r1, [pc, #304]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d044      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d107      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f22:	4b46      	ldr	r3, [pc, #280]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d119      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e07d      	b.n	800302e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d003      	beq.n	8002f42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f3e:	2b03      	cmp	r3, #3
 8002f40:	d107      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f42:	4b3e      	ldr	r3, [pc, #248]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d109      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e06d      	b.n	800302e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f52:	4b3a      	ldr	r3, [pc, #232]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e065      	b.n	800302e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f62:	4b36      	ldr	r3, [pc, #216]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f023 0203 	bic.w	r2, r3, #3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	4933      	ldr	r1, [pc, #204]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f74:	f7fd fff2 	bl	8000f5c <HAL_GetTick>
 8002f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7a:	e00a      	b.n	8002f92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f7c:	f7fd ffee 	bl	8000f5c <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e04d      	b.n	800302e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f92:	4b2a      	ldr	r3, [pc, #168]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 020c 	and.w	r2, r3, #12
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d1eb      	bne.n	8002f7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fa4:	4b24      	ldr	r3, [pc, #144]	; (8003038 <HAL_RCC_ClockConfig+0x1b4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 030f 	and.w	r3, r3, #15
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d20c      	bcs.n	8002fcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb2:	4b21      	ldr	r3, [pc, #132]	; (8003038 <HAL_RCC_ClockConfig+0x1b4>)
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fba:	4b1f      	ldr	r3, [pc, #124]	; (8003038 <HAL_RCC_ClockConfig+0x1b4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d001      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e030      	b.n	800302e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d008      	beq.n	8002fea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fd8:	4b18      	ldr	r3, [pc, #96]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	4915      	ldr	r1, [pc, #84]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d009      	beq.n	800300a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ff6:	4b11      	ldr	r3, [pc, #68]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	490d      	ldr	r1, [pc, #52]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8003006:	4313      	orrs	r3, r2
 8003008:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800300a:	f000 f81d 	bl	8003048 <HAL_RCC_GetSysClockFreq>
 800300e:	4601      	mov	r1, r0
 8003010:	4b0a      	ldr	r3, [pc, #40]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	091b      	lsrs	r3, r3, #4
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	4a09      	ldr	r2, [pc, #36]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 800301c:	5cd3      	ldrb	r3, [r2, r3]
 800301e:	fa21 f303 	lsr.w	r3, r1, r3
 8003022:	4a08      	ldr	r2, [pc, #32]	; (8003044 <HAL_RCC_ClockConfig+0x1c0>)
 8003024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003026:	2000      	movs	r0, #0
 8003028:	f7fd ff54 	bl	8000ed4 <HAL_InitTick>

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40023c00 	.word	0x40023c00
 800303c:	40023800 	.word	0x40023800
 8003040:	08006458 	.word	0x08006458
 8003044:	20000020 	.word	0x20000020

08003048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800304e:	2300      	movs	r3, #0
 8003050:	607b      	str	r3, [r7, #4]
 8003052:	2300      	movs	r3, #0
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	2300      	movs	r3, #0
 8003058:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800305a:	2300      	movs	r3, #0
 800305c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800305e:	4b63      	ldr	r3, [pc, #396]	; (80031ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 030c 	and.w	r3, r3, #12
 8003066:	2b04      	cmp	r3, #4
 8003068:	d007      	beq.n	800307a <HAL_RCC_GetSysClockFreq+0x32>
 800306a:	2b08      	cmp	r3, #8
 800306c:	d008      	beq.n	8003080 <HAL_RCC_GetSysClockFreq+0x38>
 800306e:	2b00      	cmp	r3, #0
 8003070:	f040 80b4 	bne.w	80031dc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003074:	4b5e      	ldr	r3, [pc, #376]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003076:	60bb      	str	r3, [r7, #8]
       break;
 8003078:	e0b3      	b.n	80031e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800307a:	4b5e      	ldr	r3, [pc, #376]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800307c:	60bb      	str	r3, [r7, #8]
      break;
 800307e:	e0b0      	b.n	80031e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003080:	4b5a      	ldr	r3, [pc, #360]	; (80031ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003088:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800308a:	4b58      	ldr	r3, [pc, #352]	; (80031ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d04a      	beq.n	800312c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003096:	4b55      	ldr	r3, [pc, #340]	; (80031ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	099b      	lsrs	r3, r3, #6
 800309c:	f04f 0400 	mov.w	r4, #0
 80030a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	ea03 0501 	and.w	r5, r3, r1
 80030ac:	ea04 0602 	and.w	r6, r4, r2
 80030b0:	4629      	mov	r1, r5
 80030b2:	4632      	mov	r2, r6
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	f04f 0400 	mov.w	r4, #0
 80030bc:	0154      	lsls	r4, r2, #5
 80030be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030c2:	014b      	lsls	r3, r1, #5
 80030c4:	4619      	mov	r1, r3
 80030c6:	4622      	mov	r2, r4
 80030c8:	1b49      	subs	r1, r1, r5
 80030ca:	eb62 0206 	sbc.w	r2, r2, r6
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	f04f 0400 	mov.w	r4, #0
 80030d6:	0194      	lsls	r4, r2, #6
 80030d8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80030dc:	018b      	lsls	r3, r1, #6
 80030de:	1a5b      	subs	r3, r3, r1
 80030e0:	eb64 0402 	sbc.w	r4, r4, r2
 80030e4:	f04f 0100 	mov.w	r1, #0
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	00e2      	lsls	r2, r4, #3
 80030ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030f2:	00d9      	lsls	r1, r3, #3
 80030f4:	460b      	mov	r3, r1
 80030f6:	4614      	mov	r4, r2
 80030f8:	195b      	adds	r3, r3, r5
 80030fa:	eb44 0406 	adc.w	r4, r4, r6
 80030fe:	f04f 0100 	mov.w	r1, #0
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	0262      	lsls	r2, r4, #9
 8003108:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800310c:	0259      	lsls	r1, r3, #9
 800310e:	460b      	mov	r3, r1
 8003110:	4614      	mov	r4, r2
 8003112:	4618      	mov	r0, r3
 8003114:	4621      	mov	r1, r4
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f04f 0400 	mov.w	r4, #0
 800311c:	461a      	mov	r2, r3
 800311e:	4623      	mov	r3, r4
 8003120:	f7fd fd36 	bl	8000b90 <__aeabi_uldivmod>
 8003124:	4603      	mov	r3, r0
 8003126:	460c      	mov	r4, r1
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	e049      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800312c:	4b2f      	ldr	r3, [pc, #188]	; (80031ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	099b      	lsrs	r3, r3, #6
 8003132:	f04f 0400 	mov.w	r4, #0
 8003136:	f240 11ff 	movw	r1, #511	; 0x1ff
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	ea03 0501 	and.w	r5, r3, r1
 8003142:	ea04 0602 	and.w	r6, r4, r2
 8003146:	4629      	mov	r1, r5
 8003148:	4632      	mov	r2, r6
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	f04f 0400 	mov.w	r4, #0
 8003152:	0154      	lsls	r4, r2, #5
 8003154:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003158:	014b      	lsls	r3, r1, #5
 800315a:	4619      	mov	r1, r3
 800315c:	4622      	mov	r2, r4
 800315e:	1b49      	subs	r1, r1, r5
 8003160:	eb62 0206 	sbc.w	r2, r2, r6
 8003164:	f04f 0300 	mov.w	r3, #0
 8003168:	f04f 0400 	mov.w	r4, #0
 800316c:	0194      	lsls	r4, r2, #6
 800316e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003172:	018b      	lsls	r3, r1, #6
 8003174:	1a5b      	subs	r3, r3, r1
 8003176:	eb64 0402 	sbc.w	r4, r4, r2
 800317a:	f04f 0100 	mov.w	r1, #0
 800317e:	f04f 0200 	mov.w	r2, #0
 8003182:	00e2      	lsls	r2, r4, #3
 8003184:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003188:	00d9      	lsls	r1, r3, #3
 800318a:	460b      	mov	r3, r1
 800318c:	4614      	mov	r4, r2
 800318e:	195b      	adds	r3, r3, r5
 8003190:	eb44 0406 	adc.w	r4, r4, r6
 8003194:	f04f 0100 	mov.w	r1, #0
 8003198:	f04f 0200 	mov.w	r2, #0
 800319c:	02a2      	lsls	r2, r4, #10
 800319e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80031a2:	0299      	lsls	r1, r3, #10
 80031a4:	460b      	mov	r3, r1
 80031a6:	4614      	mov	r4, r2
 80031a8:	4618      	mov	r0, r3
 80031aa:	4621      	mov	r1, r4
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f04f 0400 	mov.w	r4, #0
 80031b2:	461a      	mov	r2, r3
 80031b4:	4623      	mov	r3, r4
 80031b6:	f7fd fceb 	bl	8000b90 <__aeabi_uldivmod>
 80031ba:	4603      	mov	r3, r0
 80031bc:	460c      	mov	r4, r1
 80031be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031c0:	4b0a      	ldr	r3, [pc, #40]	; (80031ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	0c1b      	lsrs	r3, r3, #16
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	3301      	adds	r3, #1
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d8:	60bb      	str	r3, [r7, #8]
      break;
 80031da:	e002      	b.n	80031e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031dc:	4b04      	ldr	r3, [pc, #16]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80031de:	60bb      	str	r3, [r7, #8]
      break;
 80031e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031e2:	68bb      	ldr	r3, [r7, #8]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031ec:	40023800 	.word	0x40023800
 80031f0:	00f42400 	.word	0x00f42400
 80031f4:	007a1200 	.word	0x007a1200

080031f8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	d105      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800321c:	2b00      	cmp	r3, #0
 800321e:	d035      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003220:	4b62      	ldr	r3, [pc, #392]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003226:	f7fd fe99 	bl	8000f5c <HAL_GetTick>
 800322a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800322c:	e008      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800322e:	f7fd fe95 	bl	8000f5c <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e0b0      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003240:	4b5b      	ldr	r3, [pc, #364]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1f0      	bne.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	019a      	lsls	r2, r3, #6
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	071b      	lsls	r3, r3, #28
 8003258:	4955      	ldr	r1, [pc, #340]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003260:	4b52      	ldr	r3, [pc, #328]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003262:	2201      	movs	r2, #1
 8003264:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003266:	f7fd fe79 	bl	8000f5c <HAL_GetTick>
 800326a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800326c:	e008      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800326e:	f7fd fe75 	bl	8000f5c <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e090      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003280:	4b4b      	ldr	r3, [pc, #300]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0f0      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 8083 	beq.w	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800329a:	2300      	movs	r3, #0
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	4b44      	ldr	r3, [pc, #272]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	4a43      	ldr	r2, [pc, #268]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a8:	6413      	str	r3, [r2, #64]	; 0x40
 80032aa:	4b41      	ldr	r3, [pc, #260]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80032b6:	4b3f      	ldr	r3, [pc, #252]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a3e      	ldr	r2, [pc, #248]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032c2:	f7fd fe4b 	bl	8000f5c <HAL_GetTick>
 80032c6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80032c8:	e008      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80032ca:	f7fd fe47 	bl	8000f5c <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e062      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80032dc:	4b35      	ldr	r3, [pc, #212]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0f0      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032e8:	4b31      	ldr	r3, [pc, #196]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032f0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d02f      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	429a      	cmp	r2, r3
 8003304:	d028      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003306:	4b2a      	ldr	r3, [pc, #168]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800330e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003310:	4b29      	ldr	r3, [pc, #164]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003312:	2201      	movs	r2, #1
 8003314:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003316:	4b28      	ldr	r3, [pc, #160]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800331c:	4a24      	ldr	r2, [pc, #144]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003322:	4b23      	ldr	r3, [pc, #140]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b01      	cmp	r3, #1
 800332c:	d114      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800332e:	f7fd fe15 	bl	8000f5c <HAL_GetTick>
 8003332:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003334:	e00a      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003336:	f7fd fe11 	bl	8000f5c <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	f241 3288 	movw	r2, #5000	; 0x1388
 8003344:	4293      	cmp	r3, r2
 8003346:	d901      	bls.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e02a      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800334c:	4b18      	ldr	r3, [pc, #96]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800334e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0ee      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003360:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003364:	d10d      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003366:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800337a:	490d      	ldr	r1, [pc, #52]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800337c:	4313      	orrs	r3, r2
 800337e:	608b      	str	r3, [r1, #8]
 8003380:	e005      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003382:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	4a0a      	ldr	r2, [pc, #40]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003388:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800338c:	6093      	str	r3, [r2, #8]
 800338e:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003390:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800339a:	4905      	ldr	r1, [pc, #20]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800339c:	4313      	orrs	r3, r2
 800339e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	42470068 	.word	0x42470068
 80033b0:	40023800 	.word	0x40023800
 80033b4:	40007000 	.word	0x40007000
 80033b8:	42470e40 	.word	0x42470e40

080033bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80033bc:	b480      	push	{r7}
 80033be:	b087      	sub	sp, #28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d13d      	bne.n	8003456 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80033da:	4b22      	ldr	r3, [pc, #136]	; (8003464 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033e2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d004      	beq.n	80033f4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d12f      	bne.n	800344e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80033ee:	4b1e      	ldr	r3, [pc, #120]	; (8003468 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80033f0:	617b      	str	r3, [r7, #20]
          break;
 80033f2:	e02f      	b.n	8003454 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80033f4:	4b1b      	ldr	r3, [pc, #108]	; (8003464 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003400:	d108      	bne.n	8003414 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003402:	4b18      	ldr	r3, [pc, #96]	; (8003464 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800340a:	4a18      	ldr	r2, [pc, #96]	; (800346c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800340c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003410:	613b      	str	r3, [r7, #16]
 8003412:	e007      	b.n	8003424 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003414:	4b13      	ldr	r3, [pc, #76]	; (8003464 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800341c:	4a14      	ldr	r2, [pc, #80]	; (8003470 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800341e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003422:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003424:	4b0f      	ldr	r3, [pc, #60]	; (8003464 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800342a:	099b      	lsrs	r3, r3, #6
 800342c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	fb02 f303 	mul.w	r3, r2, r3
 8003436:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003438:	4b0a      	ldr	r3, [pc, #40]	; (8003464 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800343a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800343e:	0f1b      	lsrs	r3, r3, #28
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	fbb2 f3f3 	udiv	r3, r2, r3
 800344a:	617b      	str	r3, [r7, #20]
          break;
 800344c:	e002      	b.n	8003454 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	617b      	str	r3, [r7, #20]
          break;
 8003452:	bf00      	nop
        }
      }
      break;
 8003454:	bf00      	nop
    }
  }
  return frequency;
 8003456:	697b      	ldr	r3, [r7, #20]
}
 8003458:	4618      	mov	r0, r3
 800345a:	371c      	adds	r7, #28
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	40023800 	.word	0x40023800
 8003468:	00bb8000 	.word	0x00bb8000
 800346c:	007a1200 	.word	0x007a1200
 8003470:	00f42400 	.word	0x00f42400

08003474 <main>:

uint8_t callback_state = 0;


int main(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 HAL_Init();
 800347a:	f7fd fd09 	bl	8000e90 <HAL_Init>

  SystemClock_Config();
 800347e:	f000 fae5 	bl	8003a4c <SystemClock_Config>

  MX_GPIO_Init();
 8003482:	f000 fbbb 	bl	8003bfc <MX_GPIO_Init>
  MX_DMA_Init();
 8003486:	f000 fb91 	bl	8003bac <MX_DMA_Init>
  MX_I2S2_Init();
 800348a:	f000 fb61 	bl	8003b50 <MX_I2S2_Init>

  //init IIR structure
  arm_biquad_cascade_df1_init_f32 ( &iirsettings_l, 1, &iir_coeffs[0], &iir_l_state[0]);
 800348e:	4b6c      	ldr	r3, [pc, #432]	; (8003640 <main+0x1cc>)
 8003490:	4a6c      	ldr	r2, [pc, #432]	; (8003644 <main+0x1d0>)
 8003492:	2101      	movs	r1, #1
 8003494:	486c      	ldr	r0, [pc, #432]	; (8003648 <main+0x1d4>)
 8003496:	f000 fea3 	bl	80041e0 <arm_biquad_cascade_df1_init_f32>
  arm_biquad_cascade_df1_init_f32 ( &iirsettings_r, 1, &iir_coeffs[0], &iir_r_state[0]);
 800349a:	4b6c      	ldr	r3, [pc, #432]	; (800364c <main+0x1d8>)
 800349c:	4a69      	ldr	r2, [pc, #420]	; (8003644 <main+0x1d0>)
 800349e:	2101      	movs	r1, #1
 80034a0:	486b      	ldr	r0, [pc, #428]	; (8003650 <main+0x1dc>)
 80034a2:	f000 fe9d 	bl	80041e0 <arm_biquad_cascade_df1_init_f32>



  //start i2s with 2048 samples transmission => 4096*u16 words
  HAL_I2SEx_TransmitReceive_DMA (&hi2s2, txBuf, rxBuf, BLOCK_SIZE_U16);
 80034a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034aa:	4a6a      	ldr	r2, [pc, #424]	; (8003654 <main+0x1e0>)
 80034ac:	496a      	ldr	r1, [pc, #424]	; (8003658 <main+0x1e4>)
 80034ae:	486b      	ldr	r0, [pc, #428]	; (800365c <main+0x1e8>)
 80034b0:	f7fe fde2 	bl	8002078 <HAL_I2SEx_TransmitReceive_DMA>
  int offset_r_ptr;
  int offset_w_ptr, w_ptr;

  while (1)
  {
	  if (callback_state != 0) {
 80034b4:	4b6a      	ldr	r3, [pc, #424]	; (8003660 <main+0x1ec>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0fb      	beq.n	80034b4 <main+0x40>

		  //decide if it was half or cplt callback
		  if (callback_state == 1)   {
 80034bc:	4b68      	ldr	r3, [pc, #416]	; (8003660 <main+0x1ec>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d106      	bne.n	80034d2 <main+0x5e>
			  	  offset_r_ptr = 0;
 80034c4:	2300      	movs	r3, #0
 80034c6:	617b      	str	r3, [r7, #20]
			  	  offset_w_ptr = 0;
 80034c8:	2300      	movs	r3, #0
 80034ca:	613b      	str	r3, [r7, #16]
			  	  w_ptr = 0;
 80034cc:	2300      	movs	r3, #0
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	e00c      	b.n	80034ec <main+0x78>
			  }

		  else if (callback_state == 2) {
 80034d2:	4b63      	ldr	r3, [pc, #396]	; (8003660 <main+0x1ec>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d108      	bne.n	80034ec <main+0x78>
			  offset_r_ptr = BLOCK_SIZE_U16;
 80034da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034de:	617b      	str	r3, [r7, #20]
			  offset_w_ptr = BLOCK_SIZE_FLOAT;
 80034e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034e4:	613b      	str	r3, [r7, #16]
			  w_ptr = BLOCK_SIZE_FLOAT;
 80034e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034ea:	60fb      	str	r3, [r7, #12]
		  }


		  //restore input sample buffer to float array
		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	60bb      	str	r3, [r7, #8]
 80034f0:	e030      	b.n	8003554 <main+0xe0>
			  l_buf_in[w_ptr] = (float) ((int) (rxBuf[i]<<16)|rxBuf[i+1]);
 80034f2:	4a58      	ldr	r2, [pc, #352]	; (8003654 <main+0x1e0>)
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034fa:	041b      	lsls	r3, r3, #16
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	3201      	adds	r2, #1
 8003500:	4954      	ldr	r1, [pc, #336]	; (8003654 <main+0x1e0>)
 8003502:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003506:	4313      	orrs	r3, r2
 8003508:	ee07 3a90 	vmov	s15, r3
 800350c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003510:	4a54      	ldr	r2, [pc, #336]	; (8003664 <main+0x1f0>)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	edc3 7a00 	vstr	s15, [r3]
			  r_buf_in[w_ptr] = (float) ((int) (rxBuf[i+2]<<16)|rxBuf[i+3]);
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	3302      	adds	r3, #2
 8003520:	4a4c      	ldr	r2, [pc, #304]	; (8003654 <main+0x1e0>)
 8003522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003526:	041b      	lsls	r3, r3, #16
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	3203      	adds	r2, #3
 800352c:	4949      	ldr	r1, [pc, #292]	; (8003654 <main+0x1e0>)
 800352e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003532:	4313      	orrs	r3, r2
 8003534:	ee07 3a90 	vmov	s15, r3
 8003538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800353c:	4a4a      	ldr	r2, [pc, #296]	; (8003668 <main+0x1f4>)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4413      	add	r3, r2
 8003544:	edc3 7a00 	vstr	s15, [r3]
			  w_ptr++;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	3301      	adds	r3, #1
 800354c:	60fb      	str	r3, [r7, #12]
		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	3304      	adds	r3, #4
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	429a      	cmp	r2, r3
 800355e:	dbc8      	blt.n	80034f2 <main+0x7e>
		  }


		  //process IIR
		  arm_biquad_cascade_df1_f32 (&iirsettings_l, &l_buf_in[offset_w_ptr], &l_buf_out[offset_w_ptr],BLOCK_SIZE_FLOAT);
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4a3f      	ldr	r2, [pc, #252]	; (8003664 <main+0x1f0>)
 8003566:	1899      	adds	r1, r3, r2
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4a3f      	ldr	r2, [pc, #252]	; (800366c <main+0x1f8>)
 800356e:	441a      	add	r2, r3
 8003570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003574:	4834      	ldr	r0, [pc, #208]	; (8003648 <main+0x1d4>)
 8003576:	f000 fe3f 	bl	80041f8 <arm_biquad_cascade_df1_f32>
		  arm_biquad_cascade_df1_f32 (&iirsettings_r, &r_buf_in[offset_w_ptr], &r_buf_out[offset_w_ptr],BLOCK_SIZE_FLOAT);
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4a3a      	ldr	r2, [pc, #232]	; (8003668 <main+0x1f4>)
 8003580:	1899      	adds	r1, r3, r2
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4a3a      	ldr	r2, [pc, #232]	; (8003670 <main+0x1fc>)
 8003588:	441a      	add	r2, r3
 800358a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800358e:	4830      	ldr	r0, [pc, #192]	; (8003650 <main+0x1dc>)
 8003590:	f000 fe32 	bl	80041f8 <arm_biquad_cascade_df1_f32>


		  //restore processed float-array to output sample-buffer
		  w_ptr = offset_w_ptr;
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	60fb      	str	r3, [r7, #12]

		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	607b      	str	r3, [r7, #4]
 800359c:	e046      	b.n	800362c <main+0x1b8>
				txBuf[i] =  (((int)l_buf_out[w_ptr])>>16)&0xFFFF;
 800359e:	4a33      	ldr	r2, [pc, #204]	; (800366c <main+0x1f8>)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	edd3 7a00 	vldr	s15, [r3]
 80035aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035ae:	ee17 3a90 	vmov	r3, s15
 80035b2:	0c1b      	lsrs	r3, r3, #16
 80035b4:	b299      	uxth	r1, r3
 80035b6:	4a28      	ldr	r2, [pc, #160]	; (8003658 <main+0x1e4>)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				txBuf[i+1] = ((int)l_buf_out[w_ptr])&0xFFFF;
 80035be:	4a2b      	ldr	r2, [pc, #172]	; (800366c <main+0x1f8>)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	edd3 7a00 	vldr	s15, [r3]
 80035ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	3301      	adds	r3, #1
 80035d2:	ee17 2a90 	vmov	r2, s15
 80035d6:	b291      	uxth	r1, r2
 80035d8:	4a1f      	ldr	r2, [pc, #124]	; (8003658 <main+0x1e4>)
 80035da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				txBuf[i+2] = (((int)r_buf_out[w_ptr])>>16)&0xFFFF;
 80035de:	4a24      	ldr	r2, [pc, #144]	; (8003670 <main+0x1fc>)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	edd3 7a00 	vldr	s15, [r3]
 80035ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035ee:	ee17 3a90 	vmov	r3, s15
 80035f2:	0c1a      	lsrs	r2, r3, #16
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3302      	adds	r3, #2
 80035f8:	b291      	uxth	r1, r2
 80035fa:	4a17      	ldr	r2, [pc, #92]	; (8003658 <main+0x1e4>)
 80035fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				txBuf[i+3] = ((int)r_buf_out[w_ptr])&0xFFFF;
 8003600:	4a1b      	ldr	r2, [pc, #108]	; (8003670 <main+0x1fc>)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	edd3 7a00 	vldr	s15, [r3]
 800360c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3303      	adds	r3, #3
 8003614:	ee17 2a90 	vmov	r2, s15
 8003618:	b291      	uxth	r1, r2
 800361a:	4a0f      	ldr	r2, [pc, #60]	; (8003658 <main+0x1e4>)
 800361c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				w_ptr++;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	3301      	adds	r3, #1
 8003624:	60fb      	str	r3, [r7, #12]
		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3304      	adds	r3, #4
 800362a:	607b      	str	r3, [r7, #4]
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	429a      	cmp	r2, r3
 8003636:	dbb2      	blt.n	800359e <main+0x12a>
		  }

		  callback_state = 0;
 8003638:	4b09      	ldr	r3, [pc, #36]	; (8003660 <main+0x1ec>)
 800363a:	2200      	movs	r2, #0
 800363c:	701a      	strb	r2, [r3, #0]
	  if (callback_state != 0) {
 800363e:	e739      	b.n	80034b4 <main+0x40>
 8003640:	200040bc 	.word	0x200040bc
 8003644:	20000008 	.word	0x20000008
 8003648:	200000b0 	.word	0x200000b0
 800364c:	200070cc 	.word	0x200070cc
 8003650:	200081e4 	.word	0x200081e4
 8003654:	200050cc 	.word	0x200050cc
 8003658:	200010bc 	.word	0x200010bc
 800365c:	2000719c 	.word	0x2000719c
 8003660:	200000a9 	.word	0x200000a9
 8003664:	200030bc 	.word	0x200030bc
 8003668:	200071e4 	.word	0x200071e4
 800366c:	200040cc 	.word	0x200040cc
 8003670:	200000bc 	.word	0x200000bc

08003674 <CalcFilters>:

}



void CalcFilters() {
 8003674:	b590      	push	{r4, r7, lr}
 8003676:	b089      	sub	sp, #36	; 0x24
 8003678:	af00      	add	r7, sp, #0
	float cf_PI = 3.14159265359f;
 800367a:	4bd5      	ldr	r3, [pc, #852]	; (80039d0 <CalcFilters+0x35c>)
 800367c:	61fb      	str	r3, [r7, #28]
	float Frequency = 1000.0f;
 800367e:	4bd5      	ldr	r3, [pc, #852]	; (80039d4 <CalcFilters+0x360>)
 8003680:	61bb      	str	r3, [r7, #24]
	float cf_Q = 0.7f;
 8003682:	4bd5      	ldr	r3, [pc, #852]	; (80039d8 <CalcFilters+0x364>)
 8003684:	617b      	str	r3, [r7, #20]
	float EQ_Gain = -15.0f;
 8003686:	4bd5      	ldr	r3, [pc, #852]	; (80039dc <CalcFilters+0x368>)
 8003688:	613b      	str	r3, [r7, #16]
	float f_Sample = 48000.0f;
 800368a:	4bd5      	ldr	r3, [pc, #852]	; (80039e0 <CalcFilters+0x36c>)
 800368c:	60fb      	str	r3, [r7, #12]

	float cf_a0, cf_a1, cf_a2, cf_b1, cf_b2, norm;
	float cf_V = pow10(fabs(EQ_Gain)/20.0);
 800368e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003692:	eef0 7ae7 	vabs.f32	s15, s15
 8003696:	ee17 0a90 	vmov	r0, s15
 800369a:	f7fc fef9 	bl	8000490 <__aeabi_f2d>
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	4bd0      	ldr	r3, [pc, #832]	; (80039e4 <CalcFilters+0x370>)
 80036a4:	f7fd f876 	bl	8000794 <__aeabi_ddiv>
 80036a8:	4603      	mov	r3, r0
 80036aa:	460c      	mov	r4, r1
 80036ac:	ec44 3b17 	vmov	d7, r3, r4
 80036b0:	eeb0 0a47 	vmov.f32	s0, s14
 80036b4:	eef0 0a67 	vmov.f32	s1, s15
 80036b8:	f000 fea2 	bl	8004400 <pow10>
 80036bc:	ec54 3b10 	vmov	r3, r4, d0
 80036c0:	4618      	mov	r0, r3
 80036c2:	4621      	mov	r1, r4
 80036c4:	f7fd fa14 	bl	8000af0 <__aeabi_d2f>
 80036c8:	4603      	mov	r3, r0
 80036ca:	60bb      	str	r3, [r7, #8]
	float cf_K = tan(cf_PI*Frequency/f_Sample);
 80036cc:	ed97 7a07 	vldr	s14, [r7, #28]
 80036d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80036d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80036dc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80036e0:	ee16 0a90 	vmov	r0, s13
 80036e4:	f7fc fed4 	bl	8000490 <__aeabi_f2d>
 80036e8:	4603      	mov	r3, r0
 80036ea:	460c      	mov	r4, r1
 80036ec:	ec44 3b10 	vmov	d0, r3, r4
 80036f0:	f000 fe92 	bl	8004418 <tan>
 80036f4:	ec54 3b10 	vmov	r3, r4, d0
 80036f8:	4618      	mov	r0, r3
 80036fa:	4621      	mov	r1, r4
 80036fc:	f7fd f9f8 	bl	8000af0 <__aeabi_d2f>
 8003700:	4603      	mov	r3, r0
 8003702:	607b      	str	r3, [r7, #4]

	if (filterstate==0) {
 8003704:	4bb8      	ldr	r3, [pc, #736]	; (80039e8 <CalcFilters+0x374>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d15c      	bne.n	80037c6 <CalcFilters+0x152>
		filterstate=1;
 800370c:	4bb6      	ldr	r3, [pc, #728]	; (80039e8 <CalcFilters+0x374>)
 800370e:	2201      	movs	r2, #1
 8003710:	701a      	strb	r2, [r3, #0]
		//calc highpass 1kHz, q=0.7
		norm = 1.0f / (1.0f + cf_K / cf_Q + cf_K*cf_K);
 8003712:	edd7 6a01 	vldr	s13, [r7, #4]
 8003716:	ed97 7a05 	vldr	s14, [r7, #20]
 800371a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800371e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003722:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003726:	edd7 6a01 	vldr	s13, [r7, #4]
 800372a:	edd7 7a01 	vldr	s15, [r7, #4]
 800372e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003732:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003736:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800373a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800373e:	edc7 7a00 	vstr	s15, [r7]
		iir_coeffs[0] = 1.0f*norm;
 8003742:	4aaa      	ldr	r2, [pc, #680]	; (80039ec <CalcFilters+0x378>)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	6013      	str	r3, [r2, #0]
		iir_coeffs[1] = -2.0f * iir_coeffs[0];
 8003748:	4ba8      	ldr	r3, [pc, #672]	; (80039ec <CalcFilters+0x378>)
 800374a:	edd3 7a00 	vldr	s15, [r3]
 800374e:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8003752:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003756:	4ba5      	ldr	r3, [pc, #660]	; (80039ec <CalcFilters+0x378>)
 8003758:	edc3 7a01 	vstr	s15, [r3, #4]
		iir_coeffs[2] = iir_coeffs[0];
 800375c:	4ba3      	ldr	r3, [pc, #652]	; (80039ec <CalcFilters+0x378>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4aa2      	ldr	r2, [pc, #648]	; (80039ec <CalcFilters+0x378>)
 8003762:	6093      	str	r3, [r2, #8]
		iir_coeffs[3] = -(2.0f * (cf_K*cf_K - 1.0f)*norm);
 8003764:	ed97 7a01 	vldr	s14, [r7, #4]
 8003768:	edd7 7a01 	vldr	s15, [r7, #4]
 800376c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003770:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003774:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003778:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800377c:	edd7 7a00 	vldr	s15, [r7]
 8003780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003784:	eef1 7a67 	vneg.f32	s15, s15
 8003788:	4b98      	ldr	r3, [pc, #608]	; (80039ec <CalcFilters+0x378>)
 800378a:	edc3 7a03 	vstr	s15, [r3, #12]
		iir_coeffs[4] = -(1.0f - cf_K / cf_Q + cf_K*cf_K) * norm;
 800378e:	edd7 6a01 	vldr	s13, [r7, #4]
 8003792:	ed97 7a05 	vldr	s14, [r7, #20]
 8003796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800379a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800379e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80037a2:	edd7 6a01 	vldr	s13, [r7, #4]
 80037a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80037aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037b2:	eeb1 7a67 	vneg.f32	s14, s15
 80037b6:	edd7 7a00 	vldr	s15, [r7]
 80037ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037be:	4b8b      	ldr	r3, [pc, #556]	; (80039ec <CalcFilters+0x378>)
 80037c0:	edc3 7a04 	vstr	s15, [r3, #16]
		iir_coeffs[1] = 2.0f * iir_coeffs[0];
		iir_coeffs[2] = iir_coeffs[0];
		iir_coeffs[3] = -2.0f * (cf_K * cf_K - 1.0f) * norm;
		iir_coeffs[4] = -(1.0f - cf_K / cf_Q + cf_K * cf_K) * norm;
	}
}
 80037c4:	e100      	b.n	80039c8 <CalcFilters+0x354>
	else if (filterstate == 1) {
 80037c6:	4b88      	ldr	r3, [pc, #544]	; (80039e8 <CalcFilters+0x374>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	f040 8094 	bne.w	80038f8 <CalcFilters+0x284>
		filterstate = 2;
 80037d0:	4b85      	ldr	r3, [pc, #532]	; (80039e8 <CalcFilters+0x374>)
 80037d2:	2202      	movs	r2, #2
 80037d4:	701a      	strb	r2, [r3, #0]
		norm = 1.0f / (1.0f + cf_V/cf_Q * cf_K + cf_K*cf_K);
 80037d6:	edd7 6a02 	vldr	s13, [r7, #8]
 80037da:	edd7 7a05 	vldr	s15, [r7, #20]
 80037de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80037e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037f2:	edd7 6a01 	vldr	s13, [r7, #4]
 80037f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80037fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800380a:	edc7 7a00 	vstr	s15, [r7]
		iir_coeffs[0] = (1.0f + 1.0f/cf_Q * cf_K + cf_K * cf_K) * norm;
 800380e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003812:	edd7 7a05 	vldr	s15, [r7, #20]
 8003816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800381a:	edd7 7a01 	vldr	s15, [r7, #4]
 800381e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003822:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003826:	ee37 7a87 	vadd.f32	s14, s15, s14
 800382a:	edd7 6a01 	vldr	s13, [r7, #4]
 800382e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003832:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003836:	ee37 7a27 	vadd.f32	s14, s14, s15
 800383a:	edd7 7a00 	vldr	s15, [r7]
 800383e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003842:	4b6a      	ldr	r3, [pc, #424]	; (80039ec <CalcFilters+0x378>)
 8003844:	edc3 7a00 	vstr	s15, [r3]
		iir_coeffs[1] = 2.0f * (cf_K * cf_K - 1.0f) * norm;
 8003848:	ed97 7a01 	vldr	s14, [r7, #4]
 800384c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003850:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003854:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003858:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800385c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003860:	edd7 7a00 	vldr	s15, [r7]
 8003864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003868:	4b60      	ldr	r3, [pc, #384]	; (80039ec <CalcFilters+0x378>)
 800386a:	edc3 7a01 	vstr	s15, [r3, #4]
		iir_coeffs[2] = (1.0f - 1.0f/cf_Q * cf_K + cf_K * cf_K) * norm;
 800386e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003872:	edd7 7a05 	vldr	s15, [r7, #20]
 8003876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800387a:	edd7 7a01 	vldr	s15, [r7, #4]
 800387e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003882:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003886:	ee37 7a67 	vsub.f32	s14, s14, s15
 800388a:	edd7 6a01 	vldr	s13, [r7, #4]
 800388e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003892:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003896:	ee37 7a27 	vadd.f32	s14, s14, s15
 800389a:	edd7 7a00 	vldr	s15, [r7]
 800389e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a2:	4b52      	ldr	r3, [pc, #328]	; (80039ec <CalcFilters+0x378>)
 80038a4:	edc3 7a02 	vstr	s15, [r3, #8]
		iir_coeffs[3] = - iir_coeffs[1];
 80038a8:	4b50      	ldr	r3, [pc, #320]	; (80039ec <CalcFilters+0x378>)
 80038aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80038ae:	eef1 7a67 	vneg.f32	s15, s15
 80038b2:	4b4e      	ldr	r3, [pc, #312]	; (80039ec <CalcFilters+0x378>)
 80038b4:	edc3 7a03 	vstr	s15, [r3, #12]
		iir_coeffs[4] = -(1.0f - cf_V/cf_Q * cf_K + cf_K * cf_K) * norm;
 80038b8:	edd7 6a02 	vldr	s13, [r7, #8]
 80038bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80038c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80038c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80038d4:	edd7 6a01 	vldr	s13, [r7, #4]
 80038d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80038dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038e4:	eeb1 7a67 	vneg.f32	s14, s15
 80038e8:	edd7 7a00 	vldr	s15, [r7]
 80038ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038f0:	4b3e      	ldr	r3, [pc, #248]	; (80039ec <CalcFilters+0x378>)
 80038f2:	edc3 7a04 	vstr	s15, [r3, #16]
}
 80038f6:	e067      	b.n	80039c8 <CalcFilters+0x354>
	else if (filterstate == 2) {
 80038f8:	4b3b      	ldr	r3, [pc, #236]	; (80039e8 <CalcFilters+0x374>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d163      	bne.n	80039c8 <CalcFilters+0x354>
		filterstate = 0;
 8003900:	4b39      	ldr	r3, [pc, #228]	; (80039e8 <CalcFilters+0x374>)
 8003902:	2200      	movs	r2, #0
 8003904:	701a      	strb	r2, [r3, #0]
		norm = 1.0f / (1.0f + cf_K / cf_Q + cf_K * cf_K);
 8003906:	edd7 6a01 	vldr	s13, [r7, #4]
 800390a:	ed97 7a05 	vldr	s14, [r7, #20]
 800390e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003912:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003916:	ee37 7a87 	vadd.f32	s14, s15, s14
 800391a:	edd7 6a01 	vldr	s13, [r7, #4]
 800391e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003922:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003926:	ee37 7a27 	vadd.f32	s14, s14, s15
 800392a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800392e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003932:	edc7 7a00 	vstr	s15, [r7]
		iir_coeffs[0] = cf_K * cf_K * norm;
 8003936:	ed97 7a01 	vldr	s14, [r7, #4]
 800393a:	edd7 7a01 	vldr	s15, [r7, #4]
 800393e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003942:	edd7 7a00 	vldr	s15, [r7]
 8003946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800394a:	4b28      	ldr	r3, [pc, #160]	; (80039ec <CalcFilters+0x378>)
 800394c:	edc3 7a00 	vstr	s15, [r3]
		iir_coeffs[1] = 2.0f * iir_coeffs[0];
 8003950:	4b26      	ldr	r3, [pc, #152]	; (80039ec <CalcFilters+0x378>)
 8003952:	edd3 7a00 	vldr	s15, [r3]
 8003956:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800395a:	4b24      	ldr	r3, [pc, #144]	; (80039ec <CalcFilters+0x378>)
 800395c:	edc3 7a01 	vstr	s15, [r3, #4]
		iir_coeffs[2] = iir_coeffs[0];
 8003960:	4b22      	ldr	r3, [pc, #136]	; (80039ec <CalcFilters+0x378>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a21      	ldr	r2, [pc, #132]	; (80039ec <CalcFilters+0x378>)
 8003966:	6093      	str	r3, [r2, #8]
		iir_coeffs[3] = -2.0f * (cf_K * cf_K - 1.0f) * norm;
 8003968:	ed97 7a01 	vldr	s14, [r7, #4]
 800396c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003970:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003974:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003978:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800397c:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8003980:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003984:	edd7 7a00 	vldr	s15, [r7]
 8003988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800398c:	4b17      	ldr	r3, [pc, #92]	; (80039ec <CalcFilters+0x378>)
 800398e:	edc3 7a03 	vstr	s15, [r3, #12]
		iir_coeffs[4] = -(1.0f - cf_K / cf_Q + cf_K * cf_K) * norm;
 8003992:	edd7 6a01 	vldr	s13, [r7, #4]
 8003996:	ed97 7a05 	vldr	s14, [r7, #20]
 800399a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800399e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80039a6:	edd7 6a01 	vldr	s13, [r7, #4]
 80039aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80039ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039b6:	eeb1 7a67 	vneg.f32	s14, s15
 80039ba:	edd7 7a00 	vldr	s15, [r7]
 80039be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039c2:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <CalcFilters+0x378>)
 80039c4:	edc3 7a04 	vstr	s15, [r3, #16]
}
 80039c8:	bf00      	nop
 80039ca:	3724      	adds	r7, #36	; 0x24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd90      	pop	{r4, r7, pc}
 80039d0:	40490fdb 	.word	0x40490fdb
 80039d4:	447a0000 	.word	0x447a0000
 80039d8:	3f333333 	.word	0x3f333333
 80039dc:	c1700000 	.word	0xc1700000
 80039e0:	473b8000 	.word	0x473b8000
 80039e4:	40340000 	.word	0x40340000
 80039e8:	200000a8 	.word	0x200000a8
 80039ec:	20000008 	.word	0x20000008

080039f0 <HAL_I2SEx_TxRxHalfCpltCallback>:

void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]

	callback_state = 1;
 80039f8:	4b04      	ldr	r3, [pc, #16]	; (8003a0c <HAL_I2SEx_TxRxHalfCpltCallback+0x1c>)
 80039fa:	2201      	movs	r2, #1
 80039fc:	701a      	strb	r2, [r3, #0]

}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	200000a9 	.word	0x200000a9

08003a10 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]

	callback_state = 2;
 8003a18:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <HAL_I2SEx_TxRxCpltCallback+0x34>)
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	701a      	strb	r2, [r3, #0]
	filtertimer--;
 8003a1e:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <HAL_I2SEx_TxRxCpltCallback+0x38>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	3b01      	subs	r3, #1
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	4b08      	ldr	r3, [pc, #32]	; (8003a48 <HAL_I2SEx_TxRxCpltCallback+0x38>)
 8003a28:	701a      	strb	r2, [r3, #0]
	if (filtertimer == 0) {
 8003a2a:	4b07      	ldr	r3, [pc, #28]	; (8003a48 <HAL_I2SEx_TxRxCpltCallback+0x38>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d104      	bne.n	8003a3c <HAL_I2SEx_TxRxCpltCallback+0x2c>
		filtertimer = FilterChangeTimer;
 8003a32:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <HAL_I2SEx_TxRxCpltCallback+0x38>)
 8003a34:	22c8      	movs	r2, #200	; 0xc8
 8003a36:	701a      	strb	r2, [r3, #0]
		CalcFilters();
 8003a38:	f7ff fe1c 	bl	8003674 <CalcFilters>
	}

}
 8003a3c:	bf00      	nop
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	200000a9 	.word	0x200000a9
 8003a48:	2000001c 	.word	0x2000001c

08003a4c <SystemClock_Config>:


void SystemClock_Config(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b098      	sub	sp, #96	; 0x60
 8003a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a56:	2230      	movs	r2, #48	; 0x30
 8003a58:	2100      	movs	r1, #0
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fcc6 	bl	80043ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a60:	f107 031c 	add.w	r3, r7, #28
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	605a      	str	r2, [r3, #4]
 8003a6a:	609a      	str	r2, [r3, #8]
 8003a6c:	60da      	str	r2, [r3, #12]
 8003a6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a70:	f107 030c 	add.w	r3, r7, #12
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	605a      	str	r2, [r3, #4]
 8003a7a:	609a      	str	r2, [r3, #8]
 8003a7c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60bb      	str	r3, [r7, #8]
 8003a82:	4b31      	ldr	r3, [pc, #196]	; (8003b48 <SystemClock_Config+0xfc>)
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	4a30      	ldr	r2, [pc, #192]	; (8003b48 <SystemClock_Config+0xfc>)
 8003a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a8e:	4b2e      	ldr	r3, [pc, #184]	; (8003b48 <SystemClock_Config+0xfc>)
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a96:	60bb      	str	r3, [r7, #8]
 8003a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	607b      	str	r3, [r7, #4]
 8003a9e:	4b2b      	ldr	r3, [pc, #172]	; (8003b4c <SystemClock_Config+0x100>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a2a      	ldr	r2, [pc, #168]	; (8003b4c <SystemClock_Config+0x100>)
 8003aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	4b28      	ldr	r3, [pc, #160]	; (8003b4c <SystemClock_Config+0x100>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ab2:	607b      	str	r3, [r7, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003aba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003abe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ac4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003aca:	2308      	movs	r3, #8
 8003acc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003ace:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003ad2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003ad8:	2307      	movs	r3, #7
 8003ada:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003adc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fe ff8d 	bl	8002a00 <HAL_RCC_OscConfig>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8003aec:	f000 f9c2 	bl	8003e74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003af0:	230f      	movs	r3, #15
 8003af2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003af4:	2302      	movs	r3, #2
 8003af6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003af8:	2300      	movs	r3, #0
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003afc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003b00:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003b02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b06:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003b08:	f107 031c 	add.w	r3, r7, #28
 8003b0c:	2105      	movs	r1, #5
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7ff f9b8 	bl	8002e84 <HAL_RCC_ClockConfig>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8003b1a:	f000 f9ab 	bl	8003e74 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8003b22:	23c0      	movs	r3, #192	; 0xc0
 8003b24:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8003b26:	2302      	movs	r3, #2
 8003b28:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b2a:	f107 030c 	add.w	r3, r7, #12
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff fb62 	bl	80031f8 <HAL_RCCEx_PeriphCLKConfig>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8003b3a:	f000 f99b 	bl	8003e74 <Error_Handler>
  }
}
 8003b3e:	bf00      	nop
 8003b40:	3760      	adds	r7, #96	; 0x60
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	40007000 	.word	0x40007000

08003b50 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8003b54:	4b13      	ldr	r3, [pc, #76]	; (8003ba4 <MX_I2S2_Init+0x54>)
 8003b56:	4a14      	ldr	r2, [pc, #80]	; (8003ba8 <MX_I2S2_Init+0x58>)
 8003b58:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8003b5a:	4b12      	ldr	r3, [pc, #72]	; (8003ba4 <MX_I2S2_Init+0x54>)
 8003b5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b60:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8003b62:	4b10      	ldr	r3, [pc, #64]	; (8003ba4 <MX_I2S2_Init+0x54>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8003b68:	4b0e      	ldr	r3, [pc, #56]	; (8003ba4 <MX_I2S2_Init+0x54>)
 8003b6a:	2203      	movs	r2, #3
 8003b6c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8003b6e:	4b0d      	ldr	r3, [pc, #52]	; (8003ba4 <MX_I2S2_Init+0x54>)
 8003b70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b74:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8003b76:	4b0b      	ldr	r3, [pc, #44]	; (8003ba4 <MX_I2S2_Init+0x54>)
 8003b78:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8003b7c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8003b7e:	4b09      	ldr	r3, [pc, #36]	; (8003ba4 <MX_I2S2_Init+0x54>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8003b84:	4b07      	ldr	r3, [pc, #28]	; (8003ba4 <MX_I2S2_Init+0x54>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8003b8a:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <MX_I2S2_Init+0x54>)
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8003b90:	4804      	ldr	r0, [pc, #16]	; (8003ba4 <MX_I2S2_Init+0x54>)
 8003b92:	f7fe f82b 	bl	8001bec <HAL_I2S_Init>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8003b9c:	f000 f96a 	bl	8003e74 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8003ba0:	bf00      	nop
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	2000719c 	.word	0x2000719c
 8003ba8:	40003800 	.word	0x40003800

08003bac <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	607b      	str	r3, [r7, #4]
 8003bb6:	4b10      	ldr	r3, [pc, #64]	; (8003bf8 <MX_DMA_Init+0x4c>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	4a0f      	ldr	r2, [pc, #60]	; (8003bf8 <MX_DMA_Init+0x4c>)
 8003bbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bc2:	4b0d      	ldr	r3, [pc, #52]	; (8003bf8 <MX_DMA_Init+0x4c>)
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bca:	607b      	str	r3, [r7, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8003bce:	2200      	movs	r2, #0
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	200e      	movs	r0, #14
 8003bd4:	f7fd faa9 	bl	800112a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003bd8:	200e      	movs	r0, #14
 8003bda:	f7fd fac2 	bl	8001162 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003bde:	2200      	movs	r2, #0
 8003be0:	2100      	movs	r1, #0
 8003be2:	200f      	movs	r0, #15
 8003be4:	f7fd faa1 	bl	800112a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003be8:	200f      	movs	r0, #15
 8003bea:	f7fd faba 	bl	8001162 <HAL_NVIC_EnableIRQ>

}
 8003bee:	bf00      	nop
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40023800 	.word	0x40023800

08003bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08c      	sub	sp, #48	; 0x30
 8003c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c02:	f107 031c 	add.w	r3, r7, #28
 8003c06:	2200      	movs	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	605a      	str	r2, [r3, #4]
 8003c0c:	609a      	str	r2, [r3, #8]
 8003c0e:	60da      	str	r2, [r3, #12]
 8003c10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c12:	2300      	movs	r3, #0
 8003c14:	61bb      	str	r3, [r7, #24]
 8003c16:	4b90      	ldr	r3, [pc, #576]	; (8003e58 <MX_GPIO_Init+0x25c>)
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	4a8f      	ldr	r2, [pc, #572]	; (8003e58 <MX_GPIO_Init+0x25c>)
 8003c1c:	f043 0310 	orr.w	r3, r3, #16
 8003c20:	6313      	str	r3, [r2, #48]	; 0x30
 8003c22:	4b8d      	ldr	r3, [pc, #564]	; (8003e58 <MX_GPIO_Init+0x25c>)
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	f003 0310 	and.w	r3, r3, #16
 8003c2a:	61bb      	str	r3, [r7, #24]
 8003c2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c2e:	2300      	movs	r3, #0
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	4b89      	ldr	r3, [pc, #548]	; (8003e58 <MX_GPIO_Init+0x25c>)
 8003c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c36:	4a88      	ldr	r2, [pc, #544]	; (8003e58 <MX_GPIO_Init+0x25c>)
 8003c38:	f043 0304 	orr.w	r3, r3, #4
 8003c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c3e:	4b86      	ldr	r3, [pc, #536]	; (8003e58 <MX_GPIO_Init+0x25c>)
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	f003 0304 	and.w	r3, r3, #4
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	613b      	str	r3, [r7, #16]
 8003c4e:	4b82      	ldr	r3, [pc, #520]	; (8003e58 <MX_GPIO_Init+0x25c>)
 8003c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c52:	4a81      	ldr	r2, [pc, #516]	; (8003e58 <MX_GPIO_Init+0x25c>)
 8003c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c58:	6313      	str	r3, [r2, #48]	; 0x30
 8003c5a:	4b7f      	ldr	r3, [pc, #508]	; (8003e58 <MX_GPIO_Init+0x25c>)
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c62:	613b      	str	r3, [r7, #16]
 8003c64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c66:	2300      	movs	r3, #0
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	4b7b      	ldr	r3, [pc, #492]	; (8003e58 <MX_GPIO_Init+0x25c>)
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	4a7a      	ldr	r2, [pc, #488]	; (8003e58 <MX_GPIO_Init+0x25c>)
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	6313      	str	r3, [r2, #48]	; 0x30
 8003c76:	4b78      	ldr	r3, [pc, #480]	; (8003e58 <MX_GPIO_Init+0x25c>)
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	60fb      	str	r3, [r7, #12]
 8003c80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c82:	2300      	movs	r3, #0
 8003c84:	60bb      	str	r3, [r7, #8]
 8003c86:	4b74      	ldr	r3, [pc, #464]	; (8003e58 <MX_GPIO_Init+0x25c>)
 8003c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8a:	4a73      	ldr	r2, [pc, #460]	; (8003e58 <MX_GPIO_Init+0x25c>)
 8003c8c:	f043 0302 	orr.w	r3, r3, #2
 8003c90:	6313      	str	r3, [r2, #48]	; 0x30
 8003c92:	4b71      	ldr	r3, [pc, #452]	; (8003e58 <MX_GPIO_Init+0x25c>)
 8003c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	60bb      	str	r3, [r7, #8]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	607b      	str	r3, [r7, #4]
 8003ca2:	4b6d      	ldr	r3, [pc, #436]	; (8003e58 <MX_GPIO_Init+0x25c>)
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca6:	4a6c      	ldr	r2, [pc, #432]	; (8003e58 <MX_GPIO_Init+0x25c>)
 8003ca8:	f043 0308 	orr.w	r3, r3, #8
 8003cac:	6313      	str	r3, [r2, #48]	; 0x30
 8003cae:	4b6a      	ldr	r3, [pc, #424]	; (8003e58 <MX_GPIO_Init+0x25c>)
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	607b      	str	r3, [r7, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8003cba:	2200      	movs	r2, #0
 8003cbc:	2108      	movs	r1, #8
 8003cbe:	4867      	ldr	r0, [pc, #412]	; (8003e5c <MX_GPIO_Init+0x260>)
 8003cc0:	f7fd ff7a 	bl	8001bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	4865      	ldr	r0, [pc, #404]	; (8003e60 <MX_GPIO_Init+0x264>)
 8003cca:	f7fd ff75 	bl	8001bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f24f 0110 	movw	r1, #61456	; 0xf010
 8003cd4:	4863      	ldr	r0, [pc, #396]	; (8003e64 <MX_GPIO_Init+0x268>)
 8003cd6:	f7fd ff6f 	bl	8001bb8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003cda:	2308      	movs	r3, #8
 8003cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003cea:	f107 031c 	add.w	r3, r7, #28
 8003cee:	4619      	mov	r1, r3
 8003cf0:	485a      	ldr	r0, [pc, #360]	; (8003e5c <MX_GPIO_Init+0x260>)
 8003cf2:	f7fd fdc7 	bl	8001884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d02:	2300      	movs	r3, #0
 8003d04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d06:	f107 031c 	add.w	r3, r7, #28
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	4854      	ldr	r0, [pc, #336]	; (8003e60 <MX_GPIO_Init+0x264>)
 8003d0e:	f7fd fdb9 	bl	8001884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003d12:	2301      	movs	r3, #1
 8003d14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003d16:	4b54      	ldr	r3, [pc, #336]	; (8003e68 <MX_GPIO_Init+0x26c>)
 8003d18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d1e:	f107 031c 	add.w	r3, r7, #28
 8003d22:	4619      	mov	r1, r3
 8003d24:	4851      	ldr	r0, [pc, #324]	; (8003e6c <MX_GPIO_Init+0x270>)
 8003d26:	f7fd fdad 	bl	8001884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003d2a:	2310      	movs	r3, #16
 8003d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d2e:	2302      	movs	r3, #2
 8003d30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d32:	2300      	movs	r3, #0
 8003d34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d36:	2300      	movs	r3, #0
 8003d38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003d3a:	2306      	movs	r3, #6
 8003d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d3e:	f107 031c 	add.w	r3, r7, #28
 8003d42:	4619      	mov	r1, r3
 8003d44:	4849      	ldr	r0, [pc, #292]	; (8003e6c <MX_GPIO_Init+0x270>)
 8003d46:	f7fd fd9d 	bl	8001884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003d4a:	23e0      	movs	r3, #224	; 0xe0
 8003d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d4e:	2302      	movs	r3, #2
 8003d50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d52:	2300      	movs	r3, #0
 8003d54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d56:	2303      	movs	r3, #3
 8003d58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d5a:	2305      	movs	r3, #5
 8003d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d5e:	f107 031c 	add.w	r3, r7, #28
 8003d62:	4619      	mov	r1, r3
 8003d64:	4841      	ldr	r0, [pc, #260]	; (8003e6c <MX_GPIO_Init+0x270>)
 8003d66:	f7fd fd8d 	bl	8001884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d6a:	2304      	movs	r3, #4
 8003d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d76:	f107 031c 	add.w	r3, r7, #28
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	483c      	ldr	r0, [pc, #240]	; (8003e70 <MX_GPIO_Init+0x274>)
 8003d7e:	f7fd fd81 	bl	8001884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8003d82:	f24f 0310 	movw	r3, #61456	; 0xf010
 8003d86:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d90:	2300      	movs	r3, #0
 8003d92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d94:	f107 031c 	add.w	r3, r7, #28
 8003d98:	4619      	mov	r1, r3
 8003d9a:	4832      	ldr	r0, [pc, #200]	; (8003e64 <MX_GPIO_Init+0x268>)
 8003d9c:	f7fd fd72 	bl	8001884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8003da0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003da4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003da6:	2302      	movs	r3, #2
 8003da8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003daa:	2300      	movs	r3, #0
 8003dac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dae:	2300      	movs	r3, #0
 8003db0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003db2:	2306      	movs	r3, #6
 8003db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003db6:	f107 031c 	add.w	r3, r7, #28
 8003dba:	4619      	mov	r1, r3
 8003dbc:	4828      	ldr	r0, [pc, #160]	; (8003e60 <MX_GPIO_Init+0x264>)
 8003dbe:	f7fd fd61 	bl	8001884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003dc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003dc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dd0:	f107 031c 	add.w	r3, r7, #28
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4825      	ldr	r0, [pc, #148]	; (8003e6c <MX_GPIO_Init+0x270>)
 8003dd8:	f7fd fd54 	bl	8001884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003ddc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de2:	2302      	movs	r3, #2
 8003de4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de6:	2300      	movs	r3, #0
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dea:	2303      	movs	r3, #3
 8003dec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003dee:	230a      	movs	r3, #10
 8003df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003df2:	f107 031c 	add.w	r3, r7, #28
 8003df6:	4619      	mov	r1, r3
 8003df8:	481c      	ldr	r0, [pc, #112]	; (8003e6c <MX_GPIO_Init+0x270>)
 8003dfa:	f7fd fd43 	bl	8001884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003dfe:	2320      	movs	r3, #32
 8003e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e02:	2300      	movs	r3, #0
 8003e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e0a:	f107 031c 	add.w	r3, r7, #28
 8003e0e:	4619      	mov	r1, r3
 8003e10:	4814      	ldr	r0, [pc, #80]	; (8003e64 <MX_GPIO_Init+0x268>)
 8003e12:	f7fd fd37 	bl	8001884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8003e16:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003e1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e1c:	2312      	movs	r3, #18
 8003e1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e20:	2301      	movs	r3, #1
 8003e22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e24:	2303      	movs	r3, #3
 8003e26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003e28:	2304      	movs	r3, #4
 8003e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e2c:	f107 031c 	add.w	r3, r7, #28
 8003e30:	4619      	mov	r1, r3
 8003e32:	480f      	ldr	r0, [pc, #60]	; (8003e70 <MX_GPIO_Init+0x274>)
 8003e34:	f7fd fd26 	bl	8001884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003e38:	2302      	movs	r3, #2
 8003e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e3c:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <MX_GPIO_Init+0x26c>)
 8003e3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e40:	2300      	movs	r3, #0
 8003e42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e44:	f107 031c 	add.w	r3, r7, #28
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4804      	ldr	r0, [pc, #16]	; (8003e5c <MX_GPIO_Init+0x260>)
 8003e4c:	f7fd fd1a 	bl	8001884 <HAL_GPIO_Init>

}
 8003e50:	bf00      	nop
 8003e52:	3730      	adds	r7, #48	; 0x30
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	40020800 	.word	0x40020800
 8003e64:	40020c00 	.word	0x40020c00
 8003e68:	10110000 	.word	0x10110000
 8003e6c:	40020000 	.word	0x40020000
 8003e70:	40020400 	.word	0x40020400

08003e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003e78:	bf00      	nop
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
	...

08003e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	607b      	str	r3, [r7, #4]
 8003e8e:	4b10      	ldr	r3, [pc, #64]	; (8003ed0 <HAL_MspInit+0x4c>)
 8003e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e92:	4a0f      	ldr	r2, [pc, #60]	; (8003ed0 <HAL_MspInit+0x4c>)
 8003e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e98:	6453      	str	r3, [r2, #68]	; 0x44
 8003e9a:	4b0d      	ldr	r3, [pc, #52]	; (8003ed0 <HAL_MspInit+0x4c>)
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ea2:	607b      	str	r3, [r7, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	603b      	str	r3, [r7, #0]
 8003eaa:	4b09      	ldr	r3, [pc, #36]	; (8003ed0 <HAL_MspInit+0x4c>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	4a08      	ldr	r2, [pc, #32]	; (8003ed0 <HAL_MspInit+0x4c>)
 8003eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8003eb6:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <HAL_MspInit+0x4c>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ebe:	603b      	str	r3, [r7, #0]
 8003ec0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003ec2:	2007      	movs	r0, #7
 8003ec4:	f7fd f926 	bl	8001114 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ec8:	bf00      	nop
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40023800 	.word	0x40023800

08003ed4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b08a      	sub	sp, #40	; 0x28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003edc:	f107 0314 	add.w	r3, r7, #20
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	605a      	str	r2, [r3, #4]
 8003ee6:	609a      	str	r2, [r3, #8]
 8003ee8:	60da      	str	r2, [r3, #12]
 8003eea:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a62      	ldr	r2, [pc, #392]	; (800407c <HAL_I2S_MspInit+0x1a8>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	f040 80be 	bne.w	8004074 <HAL_I2S_MspInit+0x1a0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003ef8:	2300      	movs	r3, #0
 8003efa:	613b      	str	r3, [r7, #16]
 8003efc:	4b60      	ldr	r3, [pc, #384]	; (8004080 <HAL_I2S_MspInit+0x1ac>)
 8003efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f00:	4a5f      	ldr	r2, [pc, #380]	; (8004080 <HAL_I2S_MspInit+0x1ac>)
 8003f02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f06:	6413      	str	r3, [r2, #64]	; 0x40
 8003f08:	4b5d      	ldr	r3, [pc, #372]	; (8004080 <HAL_I2S_MspInit+0x1ac>)
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f14:	2300      	movs	r3, #0
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	4b59      	ldr	r3, [pc, #356]	; (8004080 <HAL_I2S_MspInit+0x1ac>)
 8003f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1c:	4a58      	ldr	r2, [pc, #352]	; (8004080 <HAL_I2S_MspInit+0x1ac>)
 8003f1e:	f043 0304 	orr.w	r3, r3, #4
 8003f22:	6313      	str	r3, [r2, #48]	; 0x30
 8003f24:	4b56      	ldr	r3, [pc, #344]	; (8004080 <HAL_I2S_MspInit+0x1ac>)
 8003f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f30:	2300      	movs	r3, #0
 8003f32:	60bb      	str	r3, [r7, #8]
 8003f34:	4b52      	ldr	r3, [pc, #328]	; (8004080 <HAL_I2S_MspInit+0x1ac>)
 8003f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f38:	4a51      	ldr	r2, [pc, #324]	; (8004080 <HAL_I2S_MspInit+0x1ac>)
 8003f3a:	f043 0302 	orr.w	r3, r3, #2
 8003f3e:	6313      	str	r3, [r2, #48]	; 0x30
 8003f40:	4b4f      	ldr	r3, [pc, #316]	; (8004080 <HAL_I2S_MspInit+0x1ac>)
 8003f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	60bb      	str	r3, [r7, #8]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003f4c:	2304      	movs	r3, #4
 8003f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f50:	2302      	movs	r3, #2
 8003f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f54:	2300      	movs	r3, #0
 8003f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8003f5c:	2306      	movs	r3, #6
 8003f5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f60:	f107 0314 	add.w	r3, r7, #20
 8003f64:	4619      	mov	r1, r3
 8003f66:	4847      	ldr	r0, [pc, #284]	; (8004084 <HAL_I2S_MspInit+0x1b0>)
 8003f68:	f7fd fc8c 	bl	8001884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8003f6c:	2348      	movs	r3, #72	; 0x48
 8003f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f70:	2302      	movs	r3, #2
 8003f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f74:	2300      	movs	r3, #0
 8003f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003f7c:	2305      	movs	r3, #5
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f80:	f107 0314 	add.w	r3, r7, #20
 8003f84:	4619      	mov	r1, r3
 8003f86:	483f      	ldr	r0, [pc, #252]	; (8004084 <HAL_I2S_MspInit+0x1b0>)
 8003f88:	f7fd fc7c 	bl	8001884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8003f8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f92:	2302      	movs	r3, #2
 8003f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f96:	2300      	movs	r3, #0
 8003f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003f9e:	2305      	movs	r3, #5
 8003fa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fa2:	f107 0314 	add.w	r3, r7, #20
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	4837      	ldr	r0, [pc, #220]	; (8004088 <HAL_I2S_MspInit+0x1b4>)
 8003faa:	f7fd fc6b 	bl	8001884 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8003fae:	4b37      	ldr	r3, [pc, #220]	; (800408c <HAL_I2S_MspInit+0x1b8>)
 8003fb0:	4a37      	ldr	r2, [pc, #220]	; (8004090 <HAL_I2S_MspInit+0x1bc>)
 8003fb2:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8003fb4:	4b35      	ldr	r3, [pc, #212]	; (800408c <HAL_I2S_MspInit+0x1b8>)
 8003fb6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003fba:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fbc:	4b33      	ldr	r3, [pc, #204]	; (800408c <HAL_I2S_MspInit+0x1b8>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fc2:	4b32      	ldr	r3, [pc, #200]	; (800408c <HAL_I2S_MspInit+0x1b8>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003fc8:	4b30      	ldr	r3, [pc, #192]	; (800408c <HAL_I2S_MspInit+0x1b8>)
 8003fca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fce:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003fd0:	4b2e      	ldr	r3, [pc, #184]	; (800408c <HAL_I2S_MspInit+0x1b8>)
 8003fd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fd6:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003fd8:	4b2c      	ldr	r3, [pc, #176]	; (800408c <HAL_I2S_MspInit+0x1b8>)
 8003fda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003fde:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8003fe0:	4b2a      	ldr	r3, [pc, #168]	; (800408c <HAL_I2S_MspInit+0x1b8>)
 8003fe2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fe6:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003fe8:	4b28      	ldr	r3, [pc, #160]	; (800408c <HAL_I2S_MspInit+0x1b8>)
 8003fea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003fee:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ff0:	4b26      	ldr	r3, [pc, #152]	; (800408c <HAL_I2S_MspInit+0x1b8>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8003ff6:	4825      	ldr	r0, [pc, #148]	; (800408c <HAL_I2S_MspInit+0x1b8>)
 8003ff8:	f7fd f8ce 	bl	8001198 <HAL_DMA_Init>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <HAL_I2S_MspInit+0x132>
    {
      Error_Handler();
 8004002:	f7ff ff37 	bl	8003e74 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a20      	ldr	r2, [pc, #128]	; (800408c <HAL_I2S_MspInit+0x1b8>)
 800400a:	63da      	str	r2, [r3, #60]	; 0x3c
 800400c:	4a1f      	ldr	r2, [pc, #124]	; (800408c <HAL_I2S_MspInit+0x1b8>)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8004012:	4b20      	ldr	r3, [pc, #128]	; (8004094 <HAL_I2S_MspInit+0x1c0>)
 8004014:	4a20      	ldr	r2, [pc, #128]	; (8004098 <HAL_I2S_MspInit+0x1c4>)
 8004016:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8004018:	4b1e      	ldr	r3, [pc, #120]	; (8004094 <HAL_I2S_MspInit+0x1c0>)
 800401a:	2200      	movs	r2, #0
 800401c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800401e:	4b1d      	ldr	r3, [pc, #116]	; (8004094 <HAL_I2S_MspInit+0x1c0>)
 8004020:	2240      	movs	r2, #64	; 0x40
 8004022:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004024:	4b1b      	ldr	r3, [pc, #108]	; (8004094 <HAL_I2S_MspInit+0x1c0>)
 8004026:	2200      	movs	r2, #0
 8004028:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800402a:	4b1a      	ldr	r3, [pc, #104]	; (8004094 <HAL_I2S_MspInit+0x1c0>)
 800402c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004030:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004032:	4b18      	ldr	r3, [pc, #96]	; (8004094 <HAL_I2S_MspInit+0x1c0>)
 8004034:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004038:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800403a:	4b16      	ldr	r3, [pc, #88]	; (8004094 <HAL_I2S_MspInit+0x1c0>)
 800403c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004040:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8004042:	4b14      	ldr	r3, [pc, #80]	; (8004094 <HAL_I2S_MspInit+0x1c0>)
 8004044:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004048:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800404a:	4b12      	ldr	r3, [pc, #72]	; (8004094 <HAL_I2S_MspInit+0x1c0>)
 800404c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004050:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004052:	4b10      	ldr	r3, [pc, #64]	; (8004094 <HAL_I2S_MspInit+0x1c0>)
 8004054:	2200      	movs	r2, #0
 8004056:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004058:	480e      	ldr	r0, [pc, #56]	; (8004094 <HAL_I2S_MspInit+0x1c0>)
 800405a:	f7fd f89d 	bl	8001198 <HAL_DMA_Init>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <HAL_I2S_MspInit+0x194>
    {
      Error_Handler();
 8004064:	f7ff ff06 	bl	8003e74 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a0a      	ldr	r2, [pc, #40]	; (8004094 <HAL_I2S_MspInit+0x1c0>)
 800406c:	639a      	str	r2, [r3, #56]	; 0x38
 800406e:	4a09      	ldr	r2, [pc, #36]	; (8004094 <HAL_I2S_MspInit+0x1c0>)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004074:	bf00      	nop
 8004076:	3728      	adds	r7, #40	; 0x28
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40003800 	.word	0x40003800
 8004080:	40023800 	.word	0x40023800
 8004084:	40020800 	.word	0x40020800
 8004088:	40020400 	.word	0x40020400
 800408c:	200070dc 	.word	0x200070dc
 8004090:	40026058 	.word	0x40026058
 8004094:	2000713c 	.word	0x2000713c
 8004098:	40026070 	.word	0x40026070

0800409c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80040a0:	bf00      	nop
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040aa:	b480      	push	{r7}
 80040ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040ae:	e7fe      	b.n	80040ae <HardFault_Handler+0x4>

080040b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040b4:	e7fe      	b.n	80040b4 <MemManage_Handler+0x4>

080040b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040b6:	b480      	push	{r7}
 80040b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040ba:	e7fe      	b.n	80040ba <BusFault_Handler+0x4>

080040bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040c0:	e7fe      	b.n	80040c0 <UsageFault_Handler+0x4>

080040c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040c2:	b480      	push	{r7}
 80040c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040c6:	bf00      	nop
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040d4:	bf00      	nop
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040de:	b480      	push	{r7}
 80040e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040e2:	bf00      	nop
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040f0:	f7fc ff20 	bl	8000f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040f4:	bf00      	nop
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 80040fc:	4802      	ldr	r0, [pc, #8]	; (8004108 <DMA1_Stream3_IRQHandler+0x10>)
 80040fe:	f7fd f959 	bl	80013b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004102:	bf00      	nop
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	200070dc 	.word	0x200070dc

0800410c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004110:	4802      	ldr	r0, [pc, #8]	; (800411c <DMA1_Stream4_IRQHandler+0x10>)
 8004112:	f7fd f94f 	bl	80013b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004116:	bf00      	nop
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	2000713c 	.word	0x2000713c

08004120 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004124:	4b16      	ldr	r3, [pc, #88]	; (8004180 <SystemInit+0x60>)
 8004126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412a:	4a15      	ldr	r2, [pc, #84]	; (8004180 <SystemInit+0x60>)
 800412c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004130:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004134:	4b13      	ldr	r3, [pc, #76]	; (8004184 <SystemInit+0x64>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a12      	ldr	r2, [pc, #72]	; (8004184 <SystemInit+0x64>)
 800413a:	f043 0301 	orr.w	r3, r3, #1
 800413e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004140:	4b10      	ldr	r3, [pc, #64]	; (8004184 <SystemInit+0x64>)
 8004142:	2200      	movs	r2, #0
 8004144:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004146:	4b0f      	ldr	r3, [pc, #60]	; (8004184 <SystemInit+0x64>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a0e      	ldr	r2, [pc, #56]	; (8004184 <SystemInit+0x64>)
 800414c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004154:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004156:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <SystemInit+0x64>)
 8004158:	4a0b      	ldr	r2, [pc, #44]	; (8004188 <SystemInit+0x68>)
 800415a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800415c:	4b09      	ldr	r3, [pc, #36]	; (8004184 <SystemInit+0x64>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a08      	ldr	r2, [pc, #32]	; (8004184 <SystemInit+0x64>)
 8004162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004166:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004168:	4b06      	ldr	r3, [pc, #24]	; (8004184 <SystemInit+0x64>)
 800416a:	2200      	movs	r2, #0
 800416c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800416e:	4b04      	ldr	r3, [pc, #16]	; (8004180 <SystemInit+0x60>)
 8004170:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004174:	609a      	str	r2, [r3, #8]
#endif
}
 8004176:	bf00      	nop
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	e000ed00 	.word	0xe000ed00
 8004184:	40023800 	.word	0x40023800
 8004188:	24003010 	.word	0x24003010

0800418c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800418c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004190:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004192:	e003      	b.n	800419c <LoopCopyDataInit>

08004194 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004194:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004196:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004198:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800419a:	3104      	adds	r1, #4

0800419c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800419c:	480b      	ldr	r0, [pc, #44]	; (80041cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800419e:	4b0c      	ldr	r3, [pc, #48]	; (80041d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80041a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80041a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80041a4:	d3f6      	bcc.n	8004194 <CopyDataInit>
  ldr  r2, =_sbss
 80041a6:	4a0b      	ldr	r2, [pc, #44]	; (80041d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80041a8:	e002      	b.n	80041b0 <LoopFillZerobss>

080041aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80041aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80041ac:	f842 3b04 	str.w	r3, [r2], #4

080041b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80041b0:	4b09      	ldr	r3, [pc, #36]	; (80041d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80041b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80041b4:	d3f9      	bcc.n	80041aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80041b6:	f7ff ffb3 	bl	8004120 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041ba:	f000 f8f3 	bl	80043a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041be:	f7ff f959 	bl	8003474 <main>
  bx  lr    
 80041c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80041c4:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 80041c8:	08006698 	.word	0x08006698
  ldr  r0, =_sdata
 80041cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80041d0:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 80041d4:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 80041d8:	200081f0 	.word	0x200081f0

080041dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041dc:	e7fe      	b.n	80041dc <ADC_IRQHandler>
	...

080041e0 <arm_biquad_cascade_df1_init_f32>:
 80041e0:	b538      	push	{r3, r4, r5, lr}
 80041e2:	4604      	mov	r4, r0
 80041e4:	6082      	str	r2, [r0, #8]
 80041e6:	6001      	str	r1, [r0, #0]
 80041e8:	461d      	mov	r5, r3
 80041ea:	010a      	lsls	r2, r1, #4
 80041ec:	4618      	mov	r0, r3
 80041ee:	2100      	movs	r1, #0
 80041f0:	f000 f8fc 	bl	80043ec <memset>
 80041f4:	6065      	str	r5, [r4, #4]
 80041f6:	bd38      	pop	{r3, r4, r5, pc}

080041f8 <arm_biquad_cascade_df1_f32>:
 80041f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80041fc:	ed2d 8b02 	vpush	{d8}
 8004200:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8004204:	6886      	ldr	r6, [r0, #8]
 8004206:	6845      	ldr	r5, [r0, #4]
 8004208:	6807      	ldr	r7, [r0, #0]
 800420a:	4696      	mov	lr, r2
 800420c:	ea4f 180c 	mov.w	r8, ip, lsl #4
 8004210:	f003 0203 	and.w	r2, r3, #3
 8004214:	eb0e 0908 	add.w	r9, lr, r8
 8004218:	3614      	adds	r6, #20
 800421a:	3510      	adds	r5, #16
 800421c:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 8004220:	ed56 1a04 	vldr	s3, [r6, #-16]
 8004224:	ed16 1a03 	vldr	s2, [r6, #-12]
 8004228:	ed56 0a02 	vldr	s1, [r6, #-8]
 800422c:	ed16 0a01 	vldr	s0, [r6, #-4]
 8004230:	ed15 8a04 	vldr	s16, [r5, #-16]
 8004234:	ed55 8a03 	vldr	s17, [r5, #-12]
 8004238:	ed15 7a02 	vldr	s14, [r5, #-8]
 800423c:	ed55 7a01 	vldr	s15, [r5, #-4]
 8004240:	f1bc 0f00 	cmp.w	ip, #0
 8004244:	f000 80a5 	beq.w	8004392 <arm_biquad_cascade_df1_f32+0x19a>
 8004248:	f101 0010 	add.w	r0, r1, #16
 800424c:	f10e 0310 	add.w	r3, lr, #16
 8004250:	4664      	mov	r4, ip
 8004252:	ed50 3a04 	vldr	s7, [r0, #-16]
 8004256:	ee21 6a88 	vmul.f32	s12, s3, s16
 800425a:	ee22 5a23 	vmul.f32	s10, s4, s7
 800425e:	ee61 8a28 	vmul.f32	s17, s2, s17
 8004262:	ee35 6a06 	vadd.f32	s12, s10, s12
 8004266:	ee60 6a87 	vmul.f32	s13, s1, s14
 800426a:	ee36 6a28 	vadd.f32	s12, s12, s17
 800426e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004272:	ee76 5a26 	vadd.f32	s11, s12, s13
 8004276:	ee61 6aa3 	vmul.f32	s13, s3, s7
 800427a:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800427e:	ee21 8a08 	vmul.f32	s16, s2, s16
 8004282:	ed43 7a04 	vstr	s15, [r3, #-16]
 8004286:	ed50 2a03 	vldr	s5, [r0, #-12]
 800428a:	ee22 6a22 	vmul.f32	s12, s4, s5
 800428e:	ee60 5aa7 	vmul.f32	s11, s1, s15
 8004292:	ee36 6a26 	vadd.f32	s12, s12, s13
 8004296:	ee20 7a07 	vmul.f32	s14, s0, s14
 800429a:	ee76 6a08 	vadd.f32	s13, s12, s16
 800429e:	ee21 3aa2 	vmul.f32	s6, s3, s5
 80042a2:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80042a6:	ee21 8a23 	vmul.f32	s16, s2, s7
 80042aa:	ee36 7a87 	vadd.f32	s14, s13, s14
 80042ae:	ee60 7a27 	vmul.f32	s15, s0, s15
 80042b2:	ed03 7a03 	vstr	s14, [r3, #-12]
 80042b6:	ed50 8a02 	vldr	s17, [r0, #-8]
 80042ba:	ee62 3a28 	vmul.f32	s7, s4, s17
 80042be:	ee20 6a87 	vmul.f32	s12, s1, s14
 80042c2:	ee33 3a83 	vadd.f32	s6, s7, s6
 80042c6:	ee21 4aa8 	vmul.f32	s8, s3, s17
 80042ca:	ee73 6a08 	vadd.f32	s13, s6, s16
 80042ce:	ee61 2a22 	vmul.f32	s5, s2, s5
 80042d2:	ee76 6a86 	vadd.f32	s13, s13, s12
 80042d6:	ee20 7a07 	vmul.f32	s14, s0, s14
 80042da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042de:	3c01      	subs	r4, #1
 80042e0:	ed43 7a02 	vstr	s15, [r3, #-8]
 80042e4:	ed10 8a01 	vldr	s16, [r0, #-4]
 80042e8:	ee62 3a08 	vmul.f32	s7, s4, s16
 80042ec:	ee60 6aa7 	vmul.f32	s13, s1, s15
 80042f0:	ee73 3a84 	vadd.f32	s7, s7, s8
 80042f4:	f100 0010 	add.w	r0, r0, #16
 80042f8:	ee33 4aa2 	vadd.f32	s8, s7, s5
 80042fc:	f103 0310 	add.w	r3, r3, #16
 8004300:	ee34 4a26 	vadd.f32	s8, s8, s13
 8004304:	ee34 7a07 	vadd.f32	s14, s8, s14
 8004308:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 800430c:	d1a1      	bne.n	8004252 <arm_biquad_cascade_df1_f32+0x5a>
 800430e:	4441      	add	r1, r8
 8004310:	4648      	mov	r0, r9
 8004312:	b3aa      	cbz	r2, 8004380 <arm_biquad_cascade_df1_f32+0x188>
 8004314:	4613      	mov	r3, r2
 8004316:	e003      	b.n	8004320 <arm_biquad_cascade_df1_f32+0x128>
 8004318:	eeb0 7a45 	vmov.f32	s14, s10
 800431c:	eeb0 8a43 	vmov.f32	s16, s6
 8004320:	ecb1 3a01 	vldmia	r1!, {s6}
 8004324:	ee21 6a88 	vmul.f32	s12, s3, s16
 8004328:	ee62 3a03 	vmul.f32	s7, s4, s6
 800432c:	ee61 8a28 	vmul.f32	s17, s2, s17
 8004330:	ee33 4a86 	vadd.f32	s8, s7, s12
 8004334:	ee60 4a87 	vmul.f32	s9, s1, s14
 8004338:	ee34 6a28 	vadd.f32	s12, s8, s17
 800433c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004340:	ee76 4a24 	vadd.f32	s9, s12, s9
 8004344:	3b01      	subs	r3, #1
 8004346:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800434a:	eef0 8a48 	vmov.f32	s17, s16
 800434e:	eef0 7a47 	vmov.f32	s15, s14
 8004352:	eca0 5a01 	vstmia	r0!, {s10}
 8004356:	d1df      	bne.n	8004318 <arm_biquad_cascade_df1_f32+0x120>
 8004358:	3f01      	subs	r7, #1
 800435a:	ed05 3a04 	vstr	s6, [r5, #-16]
 800435e:	ed05 8a03 	vstr	s16, [r5, #-12]
 8004362:	ed05 5a02 	vstr	s10, [r5, #-8]
 8004366:	ed05 7a01 	vstr	s14, [r5, #-4]
 800436a:	f106 0614 	add.w	r6, r6, #20
 800436e:	f105 0510 	add.w	r5, r5, #16
 8004372:	4671      	mov	r1, lr
 8004374:	f47f af52 	bne.w	800421c <arm_biquad_cascade_df1_f32+0x24>
 8004378:	ecbd 8b02 	vpop	{d8}
 800437c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004380:	eeb0 5a47 	vmov.f32	s10, s14
 8004384:	eeb0 3a48 	vmov.f32	s6, s16
 8004388:	eeb0 7a67 	vmov.f32	s14, s15
 800438c:	eeb0 8a68 	vmov.f32	s16, s17
 8004390:	e7e2      	b.n	8004358 <arm_biquad_cascade_df1_f32+0x160>
 8004392:	4670      	mov	r0, lr
 8004394:	e7bd      	b.n	8004312 <arm_biquad_cascade_df1_f32+0x11a>
 8004396:	bf00      	nop

08004398 <__errno>:
 8004398:	4b01      	ldr	r3, [pc, #4]	; (80043a0 <__errno+0x8>)
 800439a:	6818      	ldr	r0, [r3, #0]
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	20000024 	.word	0x20000024

080043a4 <__libc_init_array>:
 80043a4:	b570      	push	{r4, r5, r6, lr}
 80043a6:	4e0d      	ldr	r6, [pc, #52]	; (80043dc <__libc_init_array+0x38>)
 80043a8:	4c0d      	ldr	r4, [pc, #52]	; (80043e0 <__libc_init_array+0x3c>)
 80043aa:	1ba4      	subs	r4, r4, r6
 80043ac:	10a4      	asrs	r4, r4, #2
 80043ae:	2500      	movs	r5, #0
 80043b0:	42a5      	cmp	r5, r4
 80043b2:	d109      	bne.n	80043c8 <__libc_init_array+0x24>
 80043b4:	4e0b      	ldr	r6, [pc, #44]	; (80043e4 <__libc_init_array+0x40>)
 80043b6:	4c0c      	ldr	r4, [pc, #48]	; (80043e8 <__libc_init_array+0x44>)
 80043b8:	f002 f83c 	bl	8006434 <_init>
 80043bc:	1ba4      	subs	r4, r4, r6
 80043be:	10a4      	asrs	r4, r4, #2
 80043c0:	2500      	movs	r5, #0
 80043c2:	42a5      	cmp	r5, r4
 80043c4:	d105      	bne.n	80043d2 <__libc_init_array+0x2e>
 80043c6:	bd70      	pop	{r4, r5, r6, pc}
 80043c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043cc:	4798      	blx	r3
 80043ce:	3501      	adds	r5, #1
 80043d0:	e7ee      	b.n	80043b0 <__libc_init_array+0xc>
 80043d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043d6:	4798      	blx	r3
 80043d8:	3501      	adds	r5, #1
 80043da:	e7f2      	b.n	80043c2 <__libc_init_array+0x1e>
 80043dc:	08006690 	.word	0x08006690
 80043e0:	08006690 	.word	0x08006690
 80043e4:	08006690 	.word	0x08006690
 80043e8:	08006694 	.word	0x08006694

080043ec <memset>:
 80043ec:	4402      	add	r2, r0
 80043ee:	4603      	mov	r3, r0
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d100      	bne.n	80043f6 <memset+0xa>
 80043f4:	4770      	bx	lr
 80043f6:	f803 1b01 	strb.w	r1, [r3], #1
 80043fa:	e7f9      	b.n	80043f0 <memset+0x4>
 80043fc:	0000      	movs	r0, r0
	...

08004400 <pow10>:
 8004400:	eeb0 1a40 	vmov.f32	s2, s0
 8004404:	eef0 1a60 	vmov.f32	s3, s1
 8004408:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8004410 <pow10+0x10>
 800440c:	f000 b834 	b.w	8004478 <pow>
 8004410:	00000000 	.word	0x00000000
 8004414:	40240000 	.word	0x40240000

08004418 <tan>:
 8004418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800441a:	ec51 0b10 	vmov	r0, r1, d0
 800441e:	4a14      	ldr	r2, [pc, #80]	; (8004470 <tan+0x58>)
 8004420:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004424:	4293      	cmp	r3, r2
 8004426:	dc05      	bgt.n	8004434 <tan+0x1c>
 8004428:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8004468 <tan+0x50>
 800442c:	2001      	movs	r0, #1
 800442e:	f001 fc87 	bl	8005d40 <__kernel_tan>
 8004432:	e009      	b.n	8004448 <tan+0x30>
 8004434:	4a0f      	ldr	r2, [pc, #60]	; (8004474 <tan+0x5c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	dd09      	ble.n	800444e <tan+0x36>
 800443a:	ee10 2a10 	vmov	r2, s0
 800443e:	460b      	mov	r3, r1
 8004440:	f7fb fec6 	bl	80001d0 <__aeabi_dsub>
 8004444:	ec41 0b10 	vmov	d0, r0, r1
 8004448:	b005      	add	sp, #20
 800444a:	f85d fb04 	ldr.w	pc, [sp], #4
 800444e:	4668      	mov	r0, sp
 8004450:	f000 fe92 	bl	8005178 <__ieee754_rem_pio2>
 8004454:	0040      	lsls	r0, r0, #1
 8004456:	f000 0002 	and.w	r0, r0, #2
 800445a:	f1c0 0001 	rsb	r0, r0, #1
 800445e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004462:	ed9d 0b00 	vldr	d0, [sp]
 8004466:	e7e2      	b.n	800442e <tan+0x16>
	...
 8004470:	3fe921fb 	.word	0x3fe921fb
 8004474:	7fefffff 	.word	0x7fefffff

08004478 <pow>:
 8004478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800447c:	ed2d 8b04 	vpush	{d8-d9}
 8004480:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8004754 <pow+0x2dc>
 8004484:	b08d      	sub	sp, #52	; 0x34
 8004486:	ec57 6b10 	vmov	r6, r7, d0
 800448a:	ec55 4b11 	vmov	r4, r5, d1
 800448e:	f000 f963 	bl	8004758 <__ieee754_pow>
 8004492:	f999 3000 	ldrsb.w	r3, [r9]
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	3301      	adds	r3, #1
 800449a:	eeb0 8a40 	vmov.f32	s16, s0
 800449e:	eef0 8a60 	vmov.f32	s17, s1
 80044a2:	46c8      	mov	r8, r9
 80044a4:	d05f      	beq.n	8004566 <pow+0xee>
 80044a6:	4622      	mov	r2, r4
 80044a8:	462b      	mov	r3, r5
 80044aa:	4620      	mov	r0, r4
 80044ac:	4629      	mov	r1, r5
 80044ae:	f7fc fae1 	bl	8000a74 <__aeabi_dcmpun>
 80044b2:	4683      	mov	fp, r0
 80044b4:	2800      	cmp	r0, #0
 80044b6:	d156      	bne.n	8004566 <pow+0xee>
 80044b8:	4632      	mov	r2, r6
 80044ba:	463b      	mov	r3, r7
 80044bc:	4630      	mov	r0, r6
 80044be:	4639      	mov	r1, r7
 80044c0:	f7fc fad8 	bl	8000a74 <__aeabi_dcmpun>
 80044c4:	9001      	str	r0, [sp, #4]
 80044c6:	b1e8      	cbz	r0, 8004504 <pow+0x8c>
 80044c8:	2200      	movs	r2, #0
 80044ca:	2300      	movs	r3, #0
 80044cc:	4620      	mov	r0, r4
 80044ce:	4629      	mov	r1, r5
 80044d0:	f7fc fa9e 	bl	8000a10 <__aeabi_dcmpeq>
 80044d4:	2800      	cmp	r0, #0
 80044d6:	d046      	beq.n	8004566 <pow+0xee>
 80044d8:	2301      	movs	r3, #1
 80044da:	9302      	str	r3, [sp, #8]
 80044dc:	4b96      	ldr	r3, [pc, #600]	; (8004738 <pow+0x2c0>)
 80044de:	9303      	str	r3, [sp, #12]
 80044e0:	4b96      	ldr	r3, [pc, #600]	; (800473c <pow+0x2c4>)
 80044e2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80044e6:	2200      	movs	r2, #0
 80044e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80044ec:	9b00      	ldr	r3, [sp, #0]
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80044f4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80044f8:	d033      	beq.n	8004562 <pow+0xea>
 80044fa:	a802      	add	r0, sp, #8
 80044fc:	f001 fe84 	bl	8006208 <matherr>
 8004500:	bb48      	cbnz	r0, 8004556 <pow+0xde>
 8004502:	e05d      	b.n	80045c0 <pow+0x148>
 8004504:	f04f 0a00 	mov.w	sl, #0
 8004508:	f04f 0b00 	mov.w	fp, #0
 800450c:	4652      	mov	r2, sl
 800450e:	465b      	mov	r3, fp
 8004510:	4630      	mov	r0, r6
 8004512:	4639      	mov	r1, r7
 8004514:	f7fc fa7c 	bl	8000a10 <__aeabi_dcmpeq>
 8004518:	ec4b ab19 	vmov	d9, sl, fp
 800451c:	2800      	cmp	r0, #0
 800451e:	d054      	beq.n	80045ca <pow+0x152>
 8004520:	4652      	mov	r2, sl
 8004522:	465b      	mov	r3, fp
 8004524:	4620      	mov	r0, r4
 8004526:	4629      	mov	r1, r5
 8004528:	f7fc fa72 	bl	8000a10 <__aeabi_dcmpeq>
 800452c:	4680      	mov	r8, r0
 800452e:	b318      	cbz	r0, 8004578 <pow+0x100>
 8004530:	2301      	movs	r3, #1
 8004532:	9302      	str	r3, [sp, #8]
 8004534:	4b80      	ldr	r3, [pc, #512]	; (8004738 <pow+0x2c0>)
 8004536:	9303      	str	r3, [sp, #12]
 8004538:	9b01      	ldr	r3, [sp, #4]
 800453a:	930a      	str	r3, [sp, #40]	; 0x28
 800453c:	9b00      	ldr	r3, [sp, #0]
 800453e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004542:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004546:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0d5      	beq.n	80044fa <pow+0x82>
 800454e:	4b7b      	ldr	r3, [pc, #492]	; (800473c <pow+0x2c4>)
 8004550:	2200      	movs	r2, #0
 8004552:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004558:	b11b      	cbz	r3, 8004562 <pow+0xea>
 800455a:	f7ff ff1d 	bl	8004398 <__errno>
 800455e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004560:	6003      	str	r3, [r0, #0]
 8004562:	ed9d 8b08 	vldr	d8, [sp, #32]
 8004566:	eeb0 0a48 	vmov.f32	s0, s16
 800456a:	eef0 0a68 	vmov.f32	s1, s17
 800456e:	b00d      	add	sp, #52	; 0x34
 8004570:	ecbd 8b04 	vpop	{d8-d9}
 8004574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004578:	ec45 4b10 	vmov	d0, r4, r5
 800457c:	f001 fdb5 	bl	80060ea <finite>
 8004580:	2800      	cmp	r0, #0
 8004582:	d0f0      	beq.n	8004566 <pow+0xee>
 8004584:	4652      	mov	r2, sl
 8004586:	465b      	mov	r3, fp
 8004588:	4620      	mov	r0, r4
 800458a:	4629      	mov	r1, r5
 800458c:	f7fc fa4a 	bl	8000a24 <__aeabi_dcmplt>
 8004590:	2800      	cmp	r0, #0
 8004592:	d0e8      	beq.n	8004566 <pow+0xee>
 8004594:	2301      	movs	r3, #1
 8004596:	9302      	str	r3, [sp, #8]
 8004598:	4b67      	ldr	r3, [pc, #412]	; (8004738 <pow+0x2c0>)
 800459a:	9303      	str	r3, [sp, #12]
 800459c:	f999 3000 	ldrsb.w	r3, [r9]
 80045a0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80045a4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80045a8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80045ac:	b913      	cbnz	r3, 80045b4 <pow+0x13c>
 80045ae:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80045b2:	e7a2      	b.n	80044fa <pow+0x82>
 80045b4:	4962      	ldr	r1, [pc, #392]	; (8004740 <pow+0x2c8>)
 80045b6:	2000      	movs	r0, #0
 80045b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d19c      	bne.n	80044fa <pow+0x82>
 80045c0:	f7ff feea 	bl	8004398 <__errno>
 80045c4:	2321      	movs	r3, #33	; 0x21
 80045c6:	6003      	str	r3, [r0, #0]
 80045c8:	e7c5      	b.n	8004556 <pow+0xde>
 80045ca:	eeb0 0a48 	vmov.f32	s0, s16
 80045ce:	eef0 0a68 	vmov.f32	s1, s17
 80045d2:	f001 fd8a 	bl	80060ea <finite>
 80045d6:	9000      	str	r0, [sp, #0]
 80045d8:	2800      	cmp	r0, #0
 80045da:	f040 8081 	bne.w	80046e0 <pow+0x268>
 80045de:	ec47 6b10 	vmov	d0, r6, r7
 80045e2:	f001 fd82 	bl	80060ea <finite>
 80045e6:	2800      	cmp	r0, #0
 80045e8:	d07a      	beq.n	80046e0 <pow+0x268>
 80045ea:	ec45 4b10 	vmov	d0, r4, r5
 80045ee:	f001 fd7c 	bl	80060ea <finite>
 80045f2:	2800      	cmp	r0, #0
 80045f4:	d074      	beq.n	80046e0 <pow+0x268>
 80045f6:	ec53 2b18 	vmov	r2, r3, d8
 80045fa:	ee18 0a10 	vmov	r0, s16
 80045fe:	4619      	mov	r1, r3
 8004600:	f7fc fa38 	bl	8000a74 <__aeabi_dcmpun>
 8004604:	f999 9000 	ldrsb.w	r9, [r9]
 8004608:	4b4b      	ldr	r3, [pc, #300]	; (8004738 <pow+0x2c0>)
 800460a:	b1b0      	cbz	r0, 800463a <pow+0x1c2>
 800460c:	2201      	movs	r2, #1
 800460e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004612:	9b00      	ldr	r3, [sp, #0]
 8004614:	930a      	str	r3, [sp, #40]	; 0x28
 8004616:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800461a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800461e:	f1b9 0f00 	cmp.w	r9, #0
 8004622:	d0c4      	beq.n	80045ae <pow+0x136>
 8004624:	4652      	mov	r2, sl
 8004626:	465b      	mov	r3, fp
 8004628:	4650      	mov	r0, sl
 800462a:	4659      	mov	r1, fp
 800462c:	f7fc f8b2 	bl	8000794 <__aeabi_ddiv>
 8004630:	f1b9 0f02 	cmp.w	r9, #2
 8004634:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004638:	e7c1      	b.n	80045be <pow+0x146>
 800463a:	2203      	movs	r2, #3
 800463c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004640:	900a      	str	r0, [sp, #40]	; 0x28
 8004642:	4629      	mov	r1, r5
 8004644:	4620      	mov	r0, r4
 8004646:	2200      	movs	r2, #0
 8004648:	4b3e      	ldr	r3, [pc, #248]	; (8004744 <pow+0x2cc>)
 800464a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800464e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004652:	f7fb ff75 	bl	8000540 <__aeabi_dmul>
 8004656:	4604      	mov	r4, r0
 8004658:	460d      	mov	r5, r1
 800465a:	f1b9 0f00 	cmp.w	r9, #0
 800465e:	d124      	bne.n	80046aa <pow+0x232>
 8004660:	4b39      	ldr	r3, [pc, #228]	; (8004748 <pow+0x2d0>)
 8004662:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004666:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800466a:	4630      	mov	r0, r6
 800466c:	4652      	mov	r2, sl
 800466e:	465b      	mov	r3, fp
 8004670:	4639      	mov	r1, r7
 8004672:	f7fc f9d7 	bl	8000a24 <__aeabi_dcmplt>
 8004676:	2800      	cmp	r0, #0
 8004678:	d056      	beq.n	8004728 <pow+0x2b0>
 800467a:	ec45 4b10 	vmov	d0, r4, r5
 800467e:	f001 fdcf 	bl	8006220 <rint>
 8004682:	4622      	mov	r2, r4
 8004684:	462b      	mov	r3, r5
 8004686:	ec51 0b10 	vmov	r0, r1, d0
 800468a:	f7fc f9c1 	bl	8000a10 <__aeabi_dcmpeq>
 800468e:	b920      	cbnz	r0, 800469a <pow+0x222>
 8004690:	4b2e      	ldr	r3, [pc, #184]	; (800474c <pow+0x2d4>)
 8004692:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004696:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800469a:	f998 3000 	ldrsb.w	r3, [r8]
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d142      	bne.n	8004728 <pow+0x2b0>
 80046a2:	f7ff fe79 	bl	8004398 <__errno>
 80046a6:	2322      	movs	r3, #34	; 0x22
 80046a8:	e78d      	b.n	80045c6 <pow+0x14e>
 80046aa:	4b29      	ldr	r3, [pc, #164]	; (8004750 <pow+0x2d8>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80046b2:	4630      	mov	r0, r6
 80046b4:	4652      	mov	r2, sl
 80046b6:	465b      	mov	r3, fp
 80046b8:	4639      	mov	r1, r7
 80046ba:	f7fc f9b3 	bl	8000a24 <__aeabi_dcmplt>
 80046be:	2800      	cmp	r0, #0
 80046c0:	d0eb      	beq.n	800469a <pow+0x222>
 80046c2:	ec45 4b10 	vmov	d0, r4, r5
 80046c6:	f001 fdab 	bl	8006220 <rint>
 80046ca:	4622      	mov	r2, r4
 80046cc:	462b      	mov	r3, r5
 80046ce:	ec51 0b10 	vmov	r0, r1, d0
 80046d2:	f7fc f99d 	bl	8000a10 <__aeabi_dcmpeq>
 80046d6:	2800      	cmp	r0, #0
 80046d8:	d1df      	bne.n	800469a <pow+0x222>
 80046da:	2200      	movs	r2, #0
 80046dc:	4b18      	ldr	r3, [pc, #96]	; (8004740 <pow+0x2c8>)
 80046de:	e7da      	b.n	8004696 <pow+0x21e>
 80046e0:	2200      	movs	r2, #0
 80046e2:	2300      	movs	r3, #0
 80046e4:	ec51 0b18 	vmov	r0, r1, d8
 80046e8:	f7fc f992 	bl	8000a10 <__aeabi_dcmpeq>
 80046ec:	2800      	cmp	r0, #0
 80046ee:	f43f af3a 	beq.w	8004566 <pow+0xee>
 80046f2:	ec47 6b10 	vmov	d0, r6, r7
 80046f6:	f001 fcf8 	bl	80060ea <finite>
 80046fa:	2800      	cmp	r0, #0
 80046fc:	f43f af33 	beq.w	8004566 <pow+0xee>
 8004700:	ec45 4b10 	vmov	d0, r4, r5
 8004704:	f001 fcf1 	bl	80060ea <finite>
 8004708:	2800      	cmp	r0, #0
 800470a:	f43f af2c 	beq.w	8004566 <pow+0xee>
 800470e:	2304      	movs	r3, #4
 8004710:	9302      	str	r3, [sp, #8]
 8004712:	4b09      	ldr	r3, [pc, #36]	; (8004738 <pow+0x2c0>)
 8004714:	9303      	str	r3, [sp, #12]
 8004716:	2300      	movs	r3, #0
 8004718:	930a      	str	r3, [sp, #40]	; 0x28
 800471a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800471e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004722:	ed8d 9b08 	vstr	d9, [sp, #32]
 8004726:	e7b8      	b.n	800469a <pow+0x222>
 8004728:	a802      	add	r0, sp, #8
 800472a:	f001 fd6d 	bl	8006208 <matherr>
 800472e:	2800      	cmp	r0, #0
 8004730:	f47f af11 	bne.w	8004556 <pow+0xde>
 8004734:	e7b5      	b.n	80046a2 <pow+0x22a>
 8004736:	bf00      	nop
 8004738:	08006468 	.word	0x08006468
 800473c:	3ff00000 	.word	0x3ff00000
 8004740:	fff00000 	.word	0xfff00000
 8004744:	3fe00000 	.word	0x3fe00000
 8004748:	47efffff 	.word	0x47efffff
 800474c:	c7efffff 	.word	0xc7efffff
 8004750:	7ff00000 	.word	0x7ff00000
 8004754:	20000088 	.word	0x20000088

08004758 <__ieee754_pow>:
 8004758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800475c:	b091      	sub	sp, #68	; 0x44
 800475e:	ed8d 1b00 	vstr	d1, [sp]
 8004762:	e9dd 2900 	ldrd	r2, r9, [sp]
 8004766:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800476a:	ea58 0302 	orrs.w	r3, r8, r2
 800476e:	ec57 6b10 	vmov	r6, r7, d0
 8004772:	f000 84be 	beq.w	80050f2 <__ieee754_pow+0x99a>
 8004776:	4b7a      	ldr	r3, [pc, #488]	; (8004960 <__ieee754_pow+0x208>)
 8004778:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800477c:	429c      	cmp	r4, r3
 800477e:	463d      	mov	r5, r7
 8004780:	ee10 aa10 	vmov	sl, s0
 8004784:	dc09      	bgt.n	800479a <__ieee754_pow+0x42>
 8004786:	d103      	bne.n	8004790 <__ieee754_pow+0x38>
 8004788:	b93e      	cbnz	r6, 800479a <__ieee754_pow+0x42>
 800478a:	45a0      	cmp	r8, r4
 800478c:	dc0d      	bgt.n	80047aa <__ieee754_pow+0x52>
 800478e:	e001      	b.n	8004794 <__ieee754_pow+0x3c>
 8004790:	4598      	cmp	r8, r3
 8004792:	dc02      	bgt.n	800479a <__ieee754_pow+0x42>
 8004794:	4598      	cmp	r8, r3
 8004796:	d10e      	bne.n	80047b6 <__ieee754_pow+0x5e>
 8004798:	b16a      	cbz	r2, 80047b6 <__ieee754_pow+0x5e>
 800479a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800479e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80047a2:	ea54 030a 	orrs.w	r3, r4, sl
 80047a6:	f000 84a4 	beq.w	80050f2 <__ieee754_pow+0x99a>
 80047aa:	486e      	ldr	r0, [pc, #440]	; (8004964 <__ieee754_pow+0x20c>)
 80047ac:	b011      	add	sp, #68	; 0x44
 80047ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047b2:	f001 bd2d 	b.w	8006210 <nan>
 80047b6:	2d00      	cmp	r5, #0
 80047b8:	da53      	bge.n	8004862 <__ieee754_pow+0x10a>
 80047ba:	4b6b      	ldr	r3, [pc, #428]	; (8004968 <__ieee754_pow+0x210>)
 80047bc:	4598      	cmp	r8, r3
 80047be:	dc4d      	bgt.n	800485c <__ieee754_pow+0x104>
 80047c0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80047c4:	4598      	cmp	r8, r3
 80047c6:	dd4c      	ble.n	8004862 <__ieee754_pow+0x10a>
 80047c8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80047cc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80047d0:	2b14      	cmp	r3, #20
 80047d2:	dd26      	ble.n	8004822 <__ieee754_pow+0xca>
 80047d4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80047d8:	fa22 f103 	lsr.w	r1, r2, r3
 80047dc:	fa01 f303 	lsl.w	r3, r1, r3
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d13e      	bne.n	8004862 <__ieee754_pow+0x10a>
 80047e4:	f001 0101 	and.w	r1, r1, #1
 80047e8:	f1c1 0b02 	rsb	fp, r1, #2
 80047ec:	2a00      	cmp	r2, #0
 80047ee:	d15b      	bne.n	80048a8 <__ieee754_pow+0x150>
 80047f0:	4b5b      	ldr	r3, [pc, #364]	; (8004960 <__ieee754_pow+0x208>)
 80047f2:	4598      	cmp	r8, r3
 80047f4:	d124      	bne.n	8004840 <__ieee754_pow+0xe8>
 80047f6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80047fa:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80047fe:	ea53 030a 	orrs.w	r3, r3, sl
 8004802:	f000 8476 	beq.w	80050f2 <__ieee754_pow+0x99a>
 8004806:	4b59      	ldr	r3, [pc, #356]	; (800496c <__ieee754_pow+0x214>)
 8004808:	429c      	cmp	r4, r3
 800480a:	dd2d      	ble.n	8004868 <__ieee754_pow+0x110>
 800480c:	f1b9 0f00 	cmp.w	r9, #0
 8004810:	f280 8473 	bge.w	80050fa <__ieee754_pow+0x9a2>
 8004814:	2000      	movs	r0, #0
 8004816:	2100      	movs	r1, #0
 8004818:	ec41 0b10 	vmov	d0, r0, r1
 800481c:	b011      	add	sp, #68	; 0x44
 800481e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004822:	2a00      	cmp	r2, #0
 8004824:	d13e      	bne.n	80048a4 <__ieee754_pow+0x14c>
 8004826:	f1c3 0314 	rsb	r3, r3, #20
 800482a:	fa48 f103 	asr.w	r1, r8, r3
 800482e:	fa01 f303 	lsl.w	r3, r1, r3
 8004832:	4543      	cmp	r3, r8
 8004834:	f040 8469 	bne.w	800510a <__ieee754_pow+0x9b2>
 8004838:	f001 0101 	and.w	r1, r1, #1
 800483c:	f1c1 0b02 	rsb	fp, r1, #2
 8004840:	4b4b      	ldr	r3, [pc, #300]	; (8004970 <__ieee754_pow+0x218>)
 8004842:	4598      	cmp	r8, r3
 8004844:	d118      	bne.n	8004878 <__ieee754_pow+0x120>
 8004846:	f1b9 0f00 	cmp.w	r9, #0
 800484a:	f280 845a 	bge.w	8005102 <__ieee754_pow+0x9aa>
 800484e:	4948      	ldr	r1, [pc, #288]	; (8004970 <__ieee754_pow+0x218>)
 8004850:	4632      	mov	r2, r6
 8004852:	463b      	mov	r3, r7
 8004854:	2000      	movs	r0, #0
 8004856:	f7fb ff9d 	bl	8000794 <__aeabi_ddiv>
 800485a:	e7dd      	b.n	8004818 <__ieee754_pow+0xc0>
 800485c:	f04f 0b02 	mov.w	fp, #2
 8004860:	e7c4      	b.n	80047ec <__ieee754_pow+0x94>
 8004862:	f04f 0b00 	mov.w	fp, #0
 8004866:	e7c1      	b.n	80047ec <__ieee754_pow+0x94>
 8004868:	f1b9 0f00 	cmp.w	r9, #0
 800486c:	dad2      	bge.n	8004814 <__ieee754_pow+0xbc>
 800486e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004872:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004876:	e7cf      	b.n	8004818 <__ieee754_pow+0xc0>
 8004878:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800487c:	d106      	bne.n	800488c <__ieee754_pow+0x134>
 800487e:	4632      	mov	r2, r6
 8004880:	463b      	mov	r3, r7
 8004882:	4610      	mov	r0, r2
 8004884:	4619      	mov	r1, r3
 8004886:	f7fb fe5b 	bl	8000540 <__aeabi_dmul>
 800488a:	e7c5      	b.n	8004818 <__ieee754_pow+0xc0>
 800488c:	4b39      	ldr	r3, [pc, #228]	; (8004974 <__ieee754_pow+0x21c>)
 800488e:	4599      	cmp	r9, r3
 8004890:	d10a      	bne.n	80048a8 <__ieee754_pow+0x150>
 8004892:	2d00      	cmp	r5, #0
 8004894:	db08      	blt.n	80048a8 <__ieee754_pow+0x150>
 8004896:	ec47 6b10 	vmov	d0, r6, r7
 800489a:	b011      	add	sp, #68	; 0x44
 800489c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a0:	f000 be5c 	b.w	800555c <__ieee754_sqrt>
 80048a4:	f04f 0b00 	mov.w	fp, #0
 80048a8:	ec47 6b10 	vmov	d0, r6, r7
 80048ac:	f001 fc14 	bl	80060d8 <fabs>
 80048b0:	ec51 0b10 	vmov	r0, r1, d0
 80048b4:	f1ba 0f00 	cmp.w	sl, #0
 80048b8:	d127      	bne.n	800490a <__ieee754_pow+0x1b2>
 80048ba:	b124      	cbz	r4, 80048c6 <__ieee754_pow+0x16e>
 80048bc:	4b2c      	ldr	r3, [pc, #176]	; (8004970 <__ieee754_pow+0x218>)
 80048be:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d121      	bne.n	800490a <__ieee754_pow+0x1b2>
 80048c6:	f1b9 0f00 	cmp.w	r9, #0
 80048ca:	da05      	bge.n	80048d8 <__ieee754_pow+0x180>
 80048cc:	4602      	mov	r2, r0
 80048ce:	460b      	mov	r3, r1
 80048d0:	2000      	movs	r0, #0
 80048d2:	4927      	ldr	r1, [pc, #156]	; (8004970 <__ieee754_pow+0x218>)
 80048d4:	f7fb ff5e 	bl	8000794 <__aeabi_ddiv>
 80048d8:	2d00      	cmp	r5, #0
 80048da:	da9d      	bge.n	8004818 <__ieee754_pow+0xc0>
 80048dc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80048e0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80048e4:	ea54 030b 	orrs.w	r3, r4, fp
 80048e8:	d108      	bne.n	80048fc <__ieee754_pow+0x1a4>
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
 80048ee:	4610      	mov	r0, r2
 80048f0:	4619      	mov	r1, r3
 80048f2:	f7fb fc6d 	bl	80001d0 <__aeabi_dsub>
 80048f6:	4602      	mov	r2, r0
 80048f8:	460b      	mov	r3, r1
 80048fa:	e7ac      	b.n	8004856 <__ieee754_pow+0xfe>
 80048fc:	f1bb 0f01 	cmp.w	fp, #1
 8004900:	d18a      	bne.n	8004818 <__ieee754_pow+0xc0>
 8004902:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004906:	4619      	mov	r1, r3
 8004908:	e786      	b.n	8004818 <__ieee754_pow+0xc0>
 800490a:	0fed      	lsrs	r5, r5, #31
 800490c:	1e6b      	subs	r3, r5, #1
 800490e:	930d      	str	r3, [sp, #52]	; 0x34
 8004910:	ea5b 0303 	orrs.w	r3, fp, r3
 8004914:	d102      	bne.n	800491c <__ieee754_pow+0x1c4>
 8004916:	4632      	mov	r2, r6
 8004918:	463b      	mov	r3, r7
 800491a:	e7e8      	b.n	80048ee <__ieee754_pow+0x196>
 800491c:	4b16      	ldr	r3, [pc, #88]	; (8004978 <__ieee754_pow+0x220>)
 800491e:	4598      	cmp	r8, r3
 8004920:	f340 80fe 	ble.w	8004b20 <__ieee754_pow+0x3c8>
 8004924:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004928:	4598      	cmp	r8, r3
 800492a:	dd0a      	ble.n	8004942 <__ieee754_pow+0x1ea>
 800492c:	4b0f      	ldr	r3, [pc, #60]	; (800496c <__ieee754_pow+0x214>)
 800492e:	429c      	cmp	r4, r3
 8004930:	dc0d      	bgt.n	800494e <__ieee754_pow+0x1f6>
 8004932:	f1b9 0f00 	cmp.w	r9, #0
 8004936:	f6bf af6d 	bge.w	8004814 <__ieee754_pow+0xbc>
 800493a:	a307      	add	r3, pc, #28	; (adr r3, 8004958 <__ieee754_pow+0x200>)
 800493c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004940:	e79f      	b.n	8004882 <__ieee754_pow+0x12a>
 8004942:	4b0e      	ldr	r3, [pc, #56]	; (800497c <__ieee754_pow+0x224>)
 8004944:	429c      	cmp	r4, r3
 8004946:	ddf4      	ble.n	8004932 <__ieee754_pow+0x1da>
 8004948:	4b09      	ldr	r3, [pc, #36]	; (8004970 <__ieee754_pow+0x218>)
 800494a:	429c      	cmp	r4, r3
 800494c:	dd18      	ble.n	8004980 <__ieee754_pow+0x228>
 800494e:	f1b9 0f00 	cmp.w	r9, #0
 8004952:	dcf2      	bgt.n	800493a <__ieee754_pow+0x1e2>
 8004954:	e75e      	b.n	8004814 <__ieee754_pow+0xbc>
 8004956:	bf00      	nop
 8004958:	8800759c 	.word	0x8800759c
 800495c:	7e37e43c 	.word	0x7e37e43c
 8004960:	7ff00000 	.word	0x7ff00000
 8004964:	0800646b 	.word	0x0800646b
 8004968:	433fffff 	.word	0x433fffff
 800496c:	3fefffff 	.word	0x3fefffff
 8004970:	3ff00000 	.word	0x3ff00000
 8004974:	3fe00000 	.word	0x3fe00000
 8004978:	41e00000 	.word	0x41e00000
 800497c:	3feffffe 	.word	0x3feffffe
 8004980:	2200      	movs	r2, #0
 8004982:	4b63      	ldr	r3, [pc, #396]	; (8004b10 <__ieee754_pow+0x3b8>)
 8004984:	f7fb fc24 	bl	80001d0 <__aeabi_dsub>
 8004988:	a355      	add	r3, pc, #340	; (adr r3, 8004ae0 <__ieee754_pow+0x388>)
 800498a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498e:	4604      	mov	r4, r0
 8004990:	460d      	mov	r5, r1
 8004992:	f7fb fdd5 	bl	8000540 <__aeabi_dmul>
 8004996:	a354      	add	r3, pc, #336	; (adr r3, 8004ae8 <__ieee754_pow+0x390>)
 8004998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499c:	4606      	mov	r6, r0
 800499e:	460f      	mov	r7, r1
 80049a0:	4620      	mov	r0, r4
 80049a2:	4629      	mov	r1, r5
 80049a4:	f7fb fdcc 	bl	8000540 <__aeabi_dmul>
 80049a8:	2200      	movs	r2, #0
 80049aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049ae:	4b59      	ldr	r3, [pc, #356]	; (8004b14 <__ieee754_pow+0x3bc>)
 80049b0:	4620      	mov	r0, r4
 80049b2:	4629      	mov	r1, r5
 80049b4:	f7fb fdc4 	bl	8000540 <__aeabi_dmul>
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	a14c      	add	r1, pc, #304	; (adr r1, 8004af0 <__ieee754_pow+0x398>)
 80049be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049c2:	f7fb fc05 	bl	80001d0 <__aeabi_dsub>
 80049c6:	4622      	mov	r2, r4
 80049c8:	462b      	mov	r3, r5
 80049ca:	f7fb fdb9 	bl	8000540 <__aeabi_dmul>
 80049ce:	4602      	mov	r2, r0
 80049d0:	460b      	mov	r3, r1
 80049d2:	2000      	movs	r0, #0
 80049d4:	4950      	ldr	r1, [pc, #320]	; (8004b18 <__ieee754_pow+0x3c0>)
 80049d6:	f7fb fbfb 	bl	80001d0 <__aeabi_dsub>
 80049da:	4622      	mov	r2, r4
 80049dc:	462b      	mov	r3, r5
 80049de:	4680      	mov	r8, r0
 80049e0:	4689      	mov	r9, r1
 80049e2:	4620      	mov	r0, r4
 80049e4:	4629      	mov	r1, r5
 80049e6:	f7fb fdab 	bl	8000540 <__aeabi_dmul>
 80049ea:	4602      	mov	r2, r0
 80049ec:	460b      	mov	r3, r1
 80049ee:	4640      	mov	r0, r8
 80049f0:	4649      	mov	r1, r9
 80049f2:	f7fb fda5 	bl	8000540 <__aeabi_dmul>
 80049f6:	a340      	add	r3, pc, #256	; (adr r3, 8004af8 <__ieee754_pow+0x3a0>)
 80049f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fc:	f7fb fda0 	bl	8000540 <__aeabi_dmul>
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
 8004a04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a08:	f7fb fbe2 	bl	80001d0 <__aeabi_dsub>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	460b      	mov	r3, r1
 8004a10:	4604      	mov	r4, r0
 8004a12:	460d      	mov	r5, r1
 8004a14:	4630      	mov	r0, r6
 8004a16:	4639      	mov	r1, r7
 8004a18:	f7fb fbdc 	bl	80001d4 <__adddf3>
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a22:	4632      	mov	r2, r6
 8004a24:	463b      	mov	r3, r7
 8004a26:	f7fb fbd3 	bl	80001d0 <__aeabi_dsub>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	4620      	mov	r0, r4
 8004a30:	4629      	mov	r1, r5
 8004a32:	f7fb fbcd 	bl	80001d0 <__aeabi_dsub>
 8004a36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004a38:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	4606      	mov	r6, r0
 8004a40:	460f      	mov	r7, r1
 8004a42:	f040 81eb 	bne.w	8004e1c <__ieee754_pow+0x6c4>
 8004a46:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8004b00 <__ieee754_pow+0x3a8>
 8004a4a:	e9dd 4500 	ldrd	r4, r5, [sp]
 8004a4e:	2400      	movs	r4, #0
 8004a50:	4622      	mov	r2, r4
 8004a52:	462b      	mov	r3, r5
 8004a54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a58:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004a5c:	f7fb fbb8 	bl	80001d0 <__aeabi_dsub>
 8004a60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a64:	f7fb fd6c 	bl	8000540 <__aeabi_dmul>
 8004a68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a6c:	4680      	mov	r8, r0
 8004a6e:	4689      	mov	r9, r1
 8004a70:	4630      	mov	r0, r6
 8004a72:	4639      	mov	r1, r7
 8004a74:	f7fb fd64 	bl	8000540 <__aeabi_dmul>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	4640      	mov	r0, r8
 8004a7e:	4649      	mov	r1, r9
 8004a80:	f7fb fba8 	bl	80001d4 <__adddf3>
 8004a84:	4622      	mov	r2, r4
 8004a86:	462b      	mov	r3, r5
 8004a88:	4680      	mov	r8, r0
 8004a8a:	4689      	mov	r9, r1
 8004a8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a90:	f7fb fd56 	bl	8000540 <__aeabi_dmul>
 8004a94:	460b      	mov	r3, r1
 8004a96:	4604      	mov	r4, r0
 8004a98:	460d      	mov	r5, r1
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	4649      	mov	r1, r9
 8004a9e:	4640      	mov	r0, r8
 8004aa0:	e9cd 4500 	strd	r4, r5, [sp]
 8004aa4:	f7fb fb96 	bl	80001d4 <__adddf3>
 8004aa8:	4b1c      	ldr	r3, [pc, #112]	; (8004b1c <__ieee754_pow+0x3c4>)
 8004aaa:	4299      	cmp	r1, r3
 8004aac:	4606      	mov	r6, r0
 8004aae:	460f      	mov	r7, r1
 8004ab0:	468b      	mov	fp, r1
 8004ab2:	f340 82f7 	ble.w	80050a4 <__ieee754_pow+0x94c>
 8004ab6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004aba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004abe:	4303      	orrs	r3, r0
 8004ac0:	f000 81ea 	beq.w	8004e98 <__ieee754_pow+0x740>
 8004ac4:	a310      	add	r3, pc, #64	; (adr r3, 8004b08 <__ieee754_pow+0x3b0>)
 8004ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ace:	f7fb fd37 	bl	8000540 <__aeabi_dmul>
 8004ad2:	a30d      	add	r3, pc, #52	; (adr r3, 8004b08 <__ieee754_pow+0x3b0>)
 8004ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad8:	e6d5      	b.n	8004886 <__ieee754_pow+0x12e>
 8004ada:	bf00      	nop
 8004adc:	f3af 8000 	nop.w
 8004ae0:	60000000 	.word	0x60000000
 8004ae4:	3ff71547 	.word	0x3ff71547
 8004ae8:	f85ddf44 	.word	0xf85ddf44
 8004aec:	3e54ae0b 	.word	0x3e54ae0b
 8004af0:	55555555 	.word	0x55555555
 8004af4:	3fd55555 	.word	0x3fd55555
 8004af8:	652b82fe 	.word	0x652b82fe
 8004afc:	3ff71547 	.word	0x3ff71547
 8004b00:	00000000 	.word	0x00000000
 8004b04:	bff00000 	.word	0xbff00000
 8004b08:	8800759c 	.word	0x8800759c
 8004b0c:	7e37e43c 	.word	0x7e37e43c
 8004b10:	3ff00000 	.word	0x3ff00000
 8004b14:	3fd00000 	.word	0x3fd00000
 8004b18:	3fe00000 	.word	0x3fe00000
 8004b1c:	408fffff 	.word	0x408fffff
 8004b20:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	da05      	bge.n	8004b36 <__ieee754_pow+0x3de>
 8004b2a:	4bd3      	ldr	r3, [pc, #844]	; (8004e78 <__ieee754_pow+0x720>)
 8004b2c:	f7fb fd08 	bl	8000540 <__aeabi_dmul>
 8004b30:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004b34:	460c      	mov	r4, r1
 8004b36:	1523      	asrs	r3, r4, #20
 8004b38:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004b3c:	4413      	add	r3, r2
 8004b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b40:	4bce      	ldr	r3, [pc, #824]	; (8004e7c <__ieee754_pow+0x724>)
 8004b42:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004b46:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004b4a:	429c      	cmp	r4, r3
 8004b4c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004b50:	dd08      	ble.n	8004b64 <__ieee754_pow+0x40c>
 8004b52:	4bcb      	ldr	r3, [pc, #812]	; (8004e80 <__ieee754_pow+0x728>)
 8004b54:	429c      	cmp	r4, r3
 8004b56:	f340 815e 	ble.w	8004e16 <__ieee754_pow+0x6be>
 8004b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b60:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004b64:	f04f 0a00 	mov.w	sl, #0
 8004b68:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8004b6c:	930c      	str	r3, [sp, #48]	; 0x30
 8004b6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b70:	4bc4      	ldr	r3, [pc, #784]	; (8004e84 <__ieee754_pow+0x72c>)
 8004b72:	4413      	add	r3, r2
 8004b74:	ed93 7b00 	vldr	d7, [r3]
 8004b78:	4629      	mov	r1, r5
 8004b7a:	ec53 2b17 	vmov	r2, r3, d7
 8004b7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004b82:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004b86:	f7fb fb23 	bl	80001d0 <__aeabi_dsub>
 8004b8a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004b8e:	4606      	mov	r6, r0
 8004b90:	460f      	mov	r7, r1
 8004b92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b96:	f7fb fb1d 	bl	80001d4 <__adddf3>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	2000      	movs	r0, #0
 8004ba0:	49b9      	ldr	r1, [pc, #740]	; (8004e88 <__ieee754_pow+0x730>)
 8004ba2:	f7fb fdf7 	bl	8000794 <__aeabi_ddiv>
 8004ba6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	4630      	mov	r0, r6
 8004bb0:	4639      	mov	r1, r7
 8004bb2:	f7fb fcc5 	bl	8000540 <__aeabi_dmul>
 8004bb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004bba:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004bbe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	9302      	str	r3, [sp, #8]
 8004bc6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004bca:	106d      	asrs	r5, r5, #1
 8004bcc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004bd0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8004bda:	4640      	mov	r0, r8
 8004bdc:	4649      	mov	r1, r9
 8004bde:	4614      	mov	r4, r2
 8004be0:	461d      	mov	r5, r3
 8004be2:	f7fb fcad 	bl	8000540 <__aeabi_dmul>
 8004be6:	4602      	mov	r2, r0
 8004be8:	460b      	mov	r3, r1
 8004bea:	4630      	mov	r0, r6
 8004bec:	4639      	mov	r1, r7
 8004bee:	f7fb faef 	bl	80001d0 <__aeabi_dsub>
 8004bf2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004bf6:	4606      	mov	r6, r0
 8004bf8:	460f      	mov	r7, r1
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	4629      	mov	r1, r5
 8004bfe:	f7fb fae7 	bl	80001d0 <__aeabi_dsub>
 8004c02:	4602      	mov	r2, r0
 8004c04:	460b      	mov	r3, r1
 8004c06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004c0a:	f7fb fae1 	bl	80001d0 <__aeabi_dsub>
 8004c0e:	4642      	mov	r2, r8
 8004c10:	464b      	mov	r3, r9
 8004c12:	f7fb fc95 	bl	8000540 <__aeabi_dmul>
 8004c16:	4602      	mov	r2, r0
 8004c18:	460b      	mov	r3, r1
 8004c1a:	4630      	mov	r0, r6
 8004c1c:	4639      	mov	r1, r7
 8004c1e:	f7fb fad7 	bl	80001d0 <__aeabi_dsub>
 8004c22:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004c26:	f7fb fc8b 	bl	8000540 <__aeabi_dmul>
 8004c2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004c32:	4610      	mov	r0, r2
 8004c34:	4619      	mov	r1, r3
 8004c36:	f7fb fc83 	bl	8000540 <__aeabi_dmul>
 8004c3a:	a37b      	add	r3, pc, #492	; (adr r3, 8004e28 <__ieee754_pow+0x6d0>)
 8004c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c40:	4604      	mov	r4, r0
 8004c42:	460d      	mov	r5, r1
 8004c44:	f7fb fc7c 	bl	8000540 <__aeabi_dmul>
 8004c48:	a379      	add	r3, pc, #484	; (adr r3, 8004e30 <__ieee754_pow+0x6d8>)
 8004c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4e:	f7fb fac1 	bl	80001d4 <__adddf3>
 8004c52:	4622      	mov	r2, r4
 8004c54:	462b      	mov	r3, r5
 8004c56:	f7fb fc73 	bl	8000540 <__aeabi_dmul>
 8004c5a:	a377      	add	r3, pc, #476	; (adr r3, 8004e38 <__ieee754_pow+0x6e0>)
 8004c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c60:	f7fb fab8 	bl	80001d4 <__adddf3>
 8004c64:	4622      	mov	r2, r4
 8004c66:	462b      	mov	r3, r5
 8004c68:	f7fb fc6a 	bl	8000540 <__aeabi_dmul>
 8004c6c:	a374      	add	r3, pc, #464	; (adr r3, 8004e40 <__ieee754_pow+0x6e8>)
 8004c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c72:	f7fb faaf 	bl	80001d4 <__adddf3>
 8004c76:	4622      	mov	r2, r4
 8004c78:	462b      	mov	r3, r5
 8004c7a:	f7fb fc61 	bl	8000540 <__aeabi_dmul>
 8004c7e:	a372      	add	r3, pc, #456	; (adr r3, 8004e48 <__ieee754_pow+0x6f0>)
 8004c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c84:	f7fb faa6 	bl	80001d4 <__adddf3>
 8004c88:	4622      	mov	r2, r4
 8004c8a:	462b      	mov	r3, r5
 8004c8c:	f7fb fc58 	bl	8000540 <__aeabi_dmul>
 8004c90:	a36f      	add	r3, pc, #444	; (adr r3, 8004e50 <__ieee754_pow+0x6f8>)
 8004c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c96:	f7fb fa9d 	bl	80001d4 <__adddf3>
 8004c9a:	4622      	mov	r2, r4
 8004c9c:	4606      	mov	r6, r0
 8004c9e:	460f      	mov	r7, r1
 8004ca0:	462b      	mov	r3, r5
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	4629      	mov	r1, r5
 8004ca6:	f7fb fc4b 	bl	8000540 <__aeabi_dmul>
 8004caa:	4602      	mov	r2, r0
 8004cac:	460b      	mov	r3, r1
 8004cae:	4630      	mov	r0, r6
 8004cb0:	4639      	mov	r1, r7
 8004cb2:	f7fb fc45 	bl	8000540 <__aeabi_dmul>
 8004cb6:	4642      	mov	r2, r8
 8004cb8:	4604      	mov	r4, r0
 8004cba:	460d      	mov	r5, r1
 8004cbc:	464b      	mov	r3, r9
 8004cbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cc2:	f7fb fa87 	bl	80001d4 <__adddf3>
 8004cc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004cca:	f7fb fc39 	bl	8000540 <__aeabi_dmul>
 8004cce:	4622      	mov	r2, r4
 8004cd0:	462b      	mov	r3, r5
 8004cd2:	f7fb fa7f 	bl	80001d4 <__adddf3>
 8004cd6:	4642      	mov	r2, r8
 8004cd8:	4606      	mov	r6, r0
 8004cda:	460f      	mov	r7, r1
 8004cdc:	464b      	mov	r3, r9
 8004cde:	4640      	mov	r0, r8
 8004ce0:	4649      	mov	r1, r9
 8004ce2:	f7fb fc2d 	bl	8000540 <__aeabi_dmul>
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	4b68      	ldr	r3, [pc, #416]	; (8004e8c <__ieee754_pow+0x734>)
 8004cea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004cee:	f7fb fa71 	bl	80001d4 <__adddf3>
 8004cf2:	4632      	mov	r2, r6
 8004cf4:	463b      	mov	r3, r7
 8004cf6:	f7fb fa6d 	bl	80001d4 <__adddf3>
 8004cfa:	9802      	ldr	r0, [sp, #8]
 8004cfc:	460d      	mov	r5, r1
 8004cfe:	4604      	mov	r4, r0
 8004d00:	4602      	mov	r2, r0
 8004d02:	460b      	mov	r3, r1
 8004d04:	4640      	mov	r0, r8
 8004d06:	4649      	mov	r1, r9
 8004d08:	f7fb fc1a 	bl	8000540 <__aeabi_dmul>
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	4680      	mov	r8, r0
 8004d10:	4689      	mov	r9, r1
 8004d12:	4b5e      	ldr	r3, [pc, #376]	; (8004e8c <__ieee754_pow+0x734>)
 8004d14:	4620      	mov	r0, r4
 8004d16:	4629      	mov	r1, r5
 8004d18:	f7fb fa5a 	bl	80001d0 <__aeabi_dsub>
 8004d1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004d20:	f7fb fa56 	bl	80001d0 <__aeabi_dsub>
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	4630      	mov	r0, r6
 8004d2a:	4639      	mov	r1, r7
 8004d2c:	f7fb fa50 	bl	80001d0 <__aeabi_dsub>
 8004d30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d34:	f7fb fc04 	bl	8000540 <__aeabi_dmul>
 8004d38:	4622      	mov	r2, r4
 8004d3a:	4606      	mov	r6, r0
 8004d3c:	460f      	mov	r7, r1
 8004d3e:	462b      	mov	r3, r5
 8004d40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d44:	f7fb fbfc 	bl	8000540 <__aeabi_dmul>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	4630      	mov	r0, r6
 8004d4e:	4639      	mov	r1, r7
 8004d50:	f7fb fa40 	bl	80001d4 <__adddf3>
 8004d54:	4606      	mov	r6, r0
 8004d56:	460f      	mov	r7, r1
 8004d58:	4602      	mov	r2, r0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4640      	mov	r0, r8
 8004d5e:	4649      	mov	r1, r9
 8004d60:	f7fb fa38 	bl	80001d4 <__adddf3>
 8004d64:	9802      	ldr	r0, [sp, #8]
 8004d66:	a33c      	add	r3, pc, #240	; (adr r3, 8004e58 <__ieee754_pow+0x700>)
 8004d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6c:	4604      	mov	r4, r0
 8004d6e:	460d      	mov	r5, r1
 8004d70:	f7fb fbe6 	bl	8000540 <__aeabi_dmul>
 8004d74:	4642      	mov	r2, r8
 8004d76:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004d7a:	464b      	mov	r3, r9
 8004d7c:	4620      	mov	r0, r4
 8004d7e:	4629      	mov	r1, r5
 8004d80:	f7fb fa26 	bl	80001d0 <__aeabi_dsub>
 8004d84:	4602      	mov	r2, r0
 8004d86:	460b      	mov	r3, r1
 8004d88:	4630      	mov	r0, r6
 8004d8a:	4639      	mov	r1, r7
 8004d8c:	f7fb fa20 	bl	80001d0 <__aeabi_dsub>
 8004d90:	a333      	add	r3, pc, #204	; (adr r3, 8004e60 <__ieee754_pow+0x708>)
 8004d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d96:	f7fb fbd3 	bl	8000540 <__aeabi_dmul>
 8004d9a:	a333      	add	r3, pc, #204	; (adr r3, 8004e68 <__ieee754_pow+0x710>)
 8004d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da0:	4606      	mov	r6, r0
 8004da2:	460f      	mov	r7, r1
 8004da4:	4620      	mov	r0, r4
 8004da6:	4629      	mov	r1, r5
 8004da8:	f7fb fbca 	bl	8000540 <__aeabi_dmul>
 8004dac:	4602      	mov	r2, r0
 8004dae:	460b      	mov	r3, r1
 8004db0:	4630      	mov	r0, r6
 8004db2:	4639      	mov	r1, r7
 8004db4:	f7fb fa0e 	bl	80001d4 <__adddf3>
 8004db8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004dba:	4b35      	ldr	r3, [pc, #212]	; (8004e90 <__ieee754_pow+0x738>)
 8004dbc:	4413      	add	r3, r2
 8004dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc2:	f7fb fa07 	bl	80001d4 <__adddf3>
 8004dc6:	4604      	mov	r4, r0
 8004dc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004dca:	460d      	mov	r5, r1
 8004dcc:	f7fb fb4e 	bl	800046c <__aeabi_i2d>
 8004dd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004dd2:	4b30      	ldr	r3, [pc, #192]	; (8004e94 <__ieee754_pow+0x73c>)
 8004dd4:	4413      	add	r3, r2
 8004dd6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004dda:	4606      	mov	r6, r0
 8004ddc:	460f      	mov	r7, r1
 8004dde:	4622      	mov	r2, r4
 8004de0:	462b      	mov	r3, r5
 8004de2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004de6:	f7fb f9f5 	bl	80001d4 <__adddf3>
 8004dea:	4642      	mov	r2, r8
 8004dec:	464b      	mov	r3, r9
 8004dee:	f7fb f9f1 	bl	80001d4 <__adddf3>
 8004df2:	4632      	mov	r2, r6
 8004df4:	463b      	mov	r3, r7
 8004df6:	f7fb f9ed 	bl	80001d4 <__adddf3>
 8004dfa:	9802      	ldr	r0, [sp, #8]
 8004dfc:	4632      	mov	r2, r6
 8004dfe:	463b      	mov	r3, r7
 8004e00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e04:	f7fb f9e4 	bl	80001d0 <__aeabi_dsub>
 8004e08:	4642      	mov	r2, r8
 8004e0a:	464b      	mov	r3, r9
 8004e0c:	f7fb f9e0 	bl	80001d0 <__aeabi_dsub>
 8004e10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e14:	e607      	b.n	8004a26 <__ieee754_pow+0x2ce>
 8004e16:	f04f 0a01 	mov.w	sl, #1
 8004e1a:	e6a5      	b.n	8004b68 <__ieee754_pow+0x410>
 8004e1c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8004e70 <__ieee754_pow+0x718>
 8004e20:	e613      	b.n	8004a4a <__ieee754_pow+0x2f2>
 8004e22:	bf00      	nop
 8004e24:	f3af 8000 	nop.w
 8004e28:	4a454eef 	.word	0x4a454eef
 8004e2c:	3fca7e28 	.word	0x3fca7e28
 8004e30:	93c9db65 	.word	0x93c9db65
 8004e34:	3fcd864a 	.word	0x3fcd864a
 8004e38:	a91d4101 	.word	0xa91d4101
 8004e3c:	3fd17460 	.word	0x3fd17460
 8004e40:	518f264d 	.word	0x518f264d
 8004e44:	3fd55555 	.word	0x3fd55555
 8004e48:	db6fabff 	.word	0xdb6fabff
 8004e4c:	3fdb6db6 	.word	0x3fdb6db6
 8004e50:	33333303 	.word	0x33333303
 8004e54:	3fe33333 	.word	0x3fe33333
 8004e58:	e0000000 	.word	0xe0000000
 8004e5c:	3feec709 	.word	0x3feec709
 8004e60:	dc3a03fd 	.word	0xdc3a03fd
 8004e64:	3feec709 	.word	0x3feec709
 8004e68:	145b01f5 	.word	0x145b01f5
 8004e6c:	be3e2fe0 	.word	0xbe3e2fe0
 8004e70:	00000000 	.word	0x00000000
 8004e74:	3ff00000 	.word	0x3ff00000
 8004e78:	43400000 	.word	0x43400000
 8004e7c:	0003988e 	.word	0x0003988e
 8004e80:	000bb679 	.word	0x000bb679
 8004e84:	08006470 	.word	0x08006470
 8004e88:	3ff00000 	.word	0x3ff00000
 8004e8c:	40080000 	.word	0x40080000
 8004e90:	08006490 	.word	0x08006490
 8004e94:	08006480 	.word	0x08006480
 8004e98:	a3b4      	add	r3, pc, #720	; (adr r3, 800516c <__ieee754_pow+0xa14>)
 8004e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9e:	4640      	mov	r0, r8
 8004ea0:	4649      	mov	r1, r9
 8004ea2:	f7fb f997 	bl	80001d4 <__adddf3>
 8004ea6:	4622      	mov	r2, r4
 8004ea8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004eac:	462b      	mov	r3, r5
 8004eae:	4630      	mov	r0, r6
 8004eb0:	4639      	mov	r1, r7
 8004eb2:	f7fb f98d 	bl	80001d0 <__aeabi_dsub>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	460b      	mov	r3, r1
 8004eba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ebe:	f7fb fdcf 	bl	8000a60 <__aeabi_dcmpgt>
 8004ec2:	2800      	cmp	r0, #0
 8004ec4:	f47f adfe 	bne.w	8004ac4 <__ieee754_pow+0x36c>
 8004ec8:	4aa3      	ldr	r2, [pc, #652]	; (8005158 <__ieee754_pow+0xa00>)
 8004eca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	f340 810a 	ble.w	80050e8 <__ieee754_pow+0x990>
 8004ed4:	151b      	asrs	r3, r3, #20
 8004ed6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004eda:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004ede:	fa4a f303 	asr.w	r3, sl, r3
 8004ee2:	445b      	add	r3, fp
 8004ee4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004ee8:	4e9c      	ldr	r6, [pc, #624]	; (800515c <__ieee754_pow+0xa04>)
 8004eea:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004eee:	4116      	asrs	r6, r2
 8004ef0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004ef4:	2000      	movs	r0, #0
 8004ef6:	ea23 0106 	bic.w	r1, r3, r6
 8004efa:	f1c2 0214 	rsb	r2, r2, #20
 8004efe:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004f02:	fa4a fa02 	asr.w	sl, sl, r2
 8004f06:	f1bb 0f00 	cmp.w	fp, #0
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	4620      	mov	r0, r4
 8004f10:	4629      	mov	r1, r5
 8004f12:	bfb8      	it	lt
 8004f14:	f1ca 0a00 	rsblt	sl, sl, #0
 8004f18:	f7fb f95a 	bl	80001d0 <__aeabi_dsub>
 8004f1c:	e9cd 0100 	strd	r0, r1, [sp]
 8004f20:	4642      	mov	r2, r8
 8004f22:	464b      	mov	r3, r9
 8004f24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f28:	f7fb f954 	bl	80001d4 <__adddf3>
 8004f2c:	2000      	movs	r0, #0
 8004f2e:	a378      	add	r3, pc, #480	; (adr r3, 8005110 <__ieee754_pow+0x9b8>)
 8004f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f34:	4604      	mov	r4, r0
 8004f36:	460d      	mov	r5, r1
 8004f38:	f7fb fb02 	bl	8000540 <__aeabi_dmul>
 8004f3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f40:	4606      	mov	r6, r0
 8004f42:	460f      	mov	r7, r1
 8004f44:	4620      	mov	r0, r4
 8004f46:	4629      	mov	r1, r5
 8004f48:	f7fb f942 	bl	80001d0 <__aeabi_dsub>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	4640      	mov	r0, r8
 8004f52:	4649      	mov	r1, r9
 8004f54:	f7fb f93c 	bl	80001d0 <__aeabi_dsub>
 8004f58:	a36f      	add	r3, pc, #444	; (adr r3, 8005118 <__ieee754_pow+0x9c0>)
 8004f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5e:	f7fb faef 	bl	8000540 <__aeabi_dmul>
 8004f62:	a36f      	add	r3, pc, #444	; (adr r3, 8005120 <__ieee754_pow+0x9c8>)
 8004f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f68:	4680      	mov	r8, r0
 8004f6a:	4689      	mov	r9, r1
 8004f6c:	4620      	mov	r0, r4
 8004f6e:	4629      	mov	r1, r5
 8004f70:	f7fb fae6 	bl	8000540 <__aeabi_dmul>
 8004f74:	4602      	mov	r2, r0
 8004f76:	460b      	mov	r3, r1
 8004f78:	4640      	mov	r0, r8
 8004f7a:	4649      	mov	r1, r9
 8004f7c:	f7fb f92a 	bl	80001d4 <__adddf3>
 8004f80:	4604      	mov	r4, r0
 8004f82:	460d      	mov	r5, r1
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	4630      	mov	r0, r6
 8004f8a:	4639      	mov	r1, r7
 8004f8c:	f7fb f922 	bl	80001d4 <__adddf3>
 8004f90:	4632      	mov	r2, r6
 8004f92:	463b      	mov	r3, r7
 8004f94:	4680      	mov	r8, r0
 8004f96:	4689      	mov	r9, r1
 8004f98:	f7fb f91a 	bl	80001d0 <__aeabi_dsub>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	4629      	mov	r1, r5
 8004fa4:	f7fb f914 	bl	80001d0 <__aeabi_dsub>
 8004fa8:	4642      	mov	r2, r8
 8004faa:	4606      	mov	r6, r0
 8004fac:	460f      	mov	r7, r1
 8004fae:	464b      	mov	r3, r9
 8004fb0:	4640      	mov	r0, r8
 8004fb2:	4649      	mov	r1, r9
 8004fb4:	f7fb fac4 	bl	8000540 <__aeabi_dmul>
 8004fb8:	a35b      	add	r3, pc, #364	; (adr r3, 8005128 <__ieee754_pow+0x9d0>)
 8004fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbe:	4604      	mov	r4, r0
 8004fc0:	460d      	mov	r5, r1
 8004fc2:	f7fb fabd 	bl	8000540 <__aeabi_dmul>
 8004fc6:	a35a      	add	r3, pc, #360	; (adr r3, 8005130 <__ieee754_pow+0x9d8>)
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	f7fb f900 	bl	80001d0 <__aeabi_dsub>
 8004fd0:	4622      	mov	r2, r4
 8004fd2:	462b      	mov	r3, r5
 8004fd4:	f7fb fab4 	bl	8000540 <__aeabi_dmul>
 8004fd8:	a357      	add	r3, pc, #348	; (adr r3, 8005138 <__ieee754_pow+0x9e0>)
 8004fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fde:	f7fb f8f9 	bl	80001d4 <__adddf3>
 8004fe2:	4622      	mov	r2, r4
 8004fe4:	462b      	mov	r3, r5
 8004fe6:	f7fb faab 	bl	8000540 <__aeabi_dmul>
 8004fea:	a355      	add	r3, pc, #340	; (adr r3, 8005140 <__ieee754_pow+0x9e8>)
 8004fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff0:	f7fb f8ee 	bl	80001d0 <__aeabi_dsub>
 8004ff4:	4622      	mov	r2, r4
 8004ff6:	462b      	mov	r3, r5
 8004ff8:	f7fb faa2 	bl	8000540 <__aeabi_dmul>
 8004ffc:	a352      	add	r3, pc, #328	; (adr r3, 8005148 <__ieee754_pow+0x9f0>)
 8004ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005002:	f7fb f8e7 	bl	80001d4 <__adddf3>
 8005006:	4622      	mov	r2, r4
 8005008:	462b      	mov	r3, r5
 800500a:	f7fb fa99 	bl	8000540 <__aeabi_dmul>
 800500e:	4602      	mov	r2, r0
 8005010:	460b      	mov	r3, r1
 8005012:	4640      	mov	r0, r8
 8005014:	4649      	mov	r1, r9
 8005016:	f7fb f8db 	bl	80001d0 <__aeabi_dsub>
 800501a:	4604      	mov	r4, r0
 800501c:	460d      	mov	r5, r1
 800501e:	4602      	mov	r2, r0
 8005020:	460b      	mov	r3, r1
 8005022:	4640      	mov	r0, r8
 8005024:	4649      	mov	r1, r9
 8005026:	f7fb fa8b 	bl	8000540 <__aeabi_dmul>
 800502a:	2200      	movs	r2, #0
 800502c:	e9cd 0100 	strd	r0, r1, [sp]
 8005030:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005034:	4620      	mov	r0, r4
 8005036:	4629      	mov	r1, r5
 8005038:	f7fb f8ca 	bl	80001d0 <__aeabi_dsub>
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005044:	f7fb fba6 	bl	8000794 <__aeabi_ddiv>
 8005048:	4632      	mov	r2, r6
 800504a:	4604      	mov	r4, r0
 800504c:	460d      	mov	r5, r1
 800504e:	463b      	mov	r3, r7
 8005050:	4640      	mov	r0, r8
 8005052:	4649      	mov	r1, r9
 8005054:	f7fb fa74 	bl	8000540 <__aeabi_dmul>
 8005058:	4632      	mov	r2, r6
 800505a:	463b      	mov	r3, r7
 800505c:	f7fb f8ba 	bl	80001d4 <__adddf3>
 8005060:	4602      	mov	r2, r0
 8005062:	460b      	mov	r3, r1
 8005064:	4620      	mov	r0, r4
 8005066:	4629      	mov	r1, r5
 8005068:	f7fb f8b2 	bl	80001d0 <__aeabi_dsub>
 800506c:	4642      	mov	r2, r8
 800506e:	464b      	mov	r3, r9
 8005070:	f7fb f8ae 	bl	80001d0 <__aeabi_dsub>
 8005074:	4602      	mov	r2, r0
 8005076:	460b      	mov	r3, r1
 8005078:	2000      	movs	r0, #0
 800507a:	4939      	ldr	r1, [pc, #228]	; (8005160 <__ieee754_pow+0xa08>)
 800507c:	f7fb f8a8 	bl	80001d0 <__aeabi_dsub>
 8005080:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8005084:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005088:	4602      	mov	r2, r0
 800508a:	460b      	mov	r3, r1
 800508c:	da2f      	bge.n	80050ee <__ieee754_pow+0x996>
 800508e:	4650      	mov	r0, sl
 8005090:	ec43 2b10 	vmov	d0, r2, r3
 8005094:	f001 f948 	bl	8006328 <scalbn>
 8005098:	ec51 0b10 	vmov	r0, r1, d0
 800509c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050a0:	f7ff bbf1 	b.w	8004886 <__ieee754_pow+0x12e>
 80050a4:	4b2f      	ldr	r3, [pc, #188]	; (8005164 <__ieee754_pow+0xa0c>)
 80050a6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80050aa:	429e      	cmp	r6, r3
 80050ac:	f77f af0c 	ble.w	8004ec8 <__ieee754_pow+0x770>
 80050b0:	4b2d      	ldr	r3, [pc, #180]	; (8005168 <__ieee754_pow+0xa10>)
 80050b2:	440b      	add	r3, r1
 80050b4:	4303      	orrs	r3, r0
 80050b6:	d00b      	beq.n	80050d0 <__ieee754_pow+0x978>
 80050b8:	a325      	add	r3, pc, #148	; (adr r3, 8005150 <__ieee754_pow+0x9f8>)
 80050ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050c2:	f7fb fa3d 	bl	8000540 <__aeabi_dmul>
 80050c6:	a322      	add	r3, pc, #136	; (adr r3, 8005150 <__ieee754_pow+0x9f8>)
 80050c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050cc:	f7ff bbdb 	b.w	8004886 <__ieee754_pow+0x12e>
 80050d0:	4622      	mov	r2, r4
 80050d2:	462b      	mov	r3, r5
 80050d4:	f7fb f87c 	bl	80001d0 <__aeabi_dsub>
 80050d8:	4642      	mov	r2, r8
 80050da:	464b      	mov	r3, r9
 80050dc:	f7fb fcb6 	bl	8000a4c <__aeabi_dcmpge>
 80050e0:	2800      	cmp	r0, #0
 80050e2:	f43f aef1 	beq.w	8004ec8 <__ieee754_pow+0x770>
 80050e6:	e7e7      	b.n	80050b8 <__ieee754_pow+0x960>
 80050e8:	f04f 0a00 	mov.w	sl, #0
 80050ec:	e718      	b.n	8004f20 <__ieee754_pow+0x7c8>
 80050ee:	4621      	mov	r1, r4
 80050f0:	e7d4      	b.n	800509c <__ieee754_pow+0x944>
 80050f2:	2000      	movs	r0, #0
 80050f4:	491a      	ldr	r1, [pc, #104]	; (8005160 <__ieee754_pow+0xa08>)
 80050f6:	f7ff bb8f 	b.w	8004818 <__ieee754_pow+0xc0>
 80050fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050fe:	f7ff bb8b 	b.w	8004818 <__ieee754_pow+0xc0>
 8005102:	4630      	mov	r0, r6
 8005104:	4639      	mov	r1, r7
 8005106:	f7ff bb87 	b.w	8004818 <__ieee754_pow+0xc0>
 800510a:	4693      	mov	fp, r2
 800510c:	f7ff bb98 	b.w	8004840 <__ieee754_pow+0xe8>
 8005110:	00000000 	.word	0x00000000
 8005114:	3fe62e43 	.word	0x3fe62e43
 8005118:	fefa39ef 	.word	0xfefa39ef
 800511c:	3fe62e42 	.word	0x3fe62e42
 8005120:	0ca86c39 	.word	0x0ca86c39
 8005124:	be205c61 	.word	0xbe205c61
 8005128:	72bea4d0 	.word	0x72bea4d0
 800512c:	3e663769 	.word	0x3e663769
 8005130:	c5d26bf1 	.word	0xc5d26bf1
 8005134:	3ebbbd41 	.word	0x3ebbbd41
 8005138:	af25de2c 	.word	0xaf25de2c
 800513c:	3f11566a 	.word	0x3f11566a
 8005140:	16bebd93 	.word	0x16bebd93
 8005144:	3f66c16c 	.word	0x3f66c16c
 8005148:	5555553e 	.word	0x5555553e
 800514c:	3fc55555 	.word	0x3fc55555
 8005150:	c2f8f359 	.word	0xc2f8f359
 8005154:	01a56e1f 	.word	0x01a56e1f
 8005158:	3fe00000 	.word	0x3fe00000
 800515c:	000fffff 	.word	0x000fffff
 8005160:	3ff00000 	.word	0x3ff00000
 8005164:	4090cbff 	.word	0x4090cbff
 8005168:	3f6f3400 	.word	0x3f6f3400
 800516c:	652b82fe 	.word	0x652b82fe
 8005170:	3c971547 	.word	0x3c971547
 8005174:	00000000 	.word	0x00000000

08005178 <__ieee754_rem_pio2>:
 8005178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800517c:	ec57 6b10 	vmov	r6, r7, d0
 8005180:	4bc3      	ldr	r3, [pc, #780]	; (8005490 <__ieee754_rem_pio2+0x318>)
 8005182:	b08d      	sub	sp, #52	; 0x34
 8005184:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005188:	4598      	cmp	r8, r3
 800518a:	4604      	mov	r4, r0
 800518c:	9704      	str	r7, [sp, #16]
 800518e:	dc07      	bgt.n	80051a0 <__ieee754_rem_pio2+0x28>
 8005190:	2200      	movs	r2, #0
 8005192:	2300      	movs	r3, #0
 8005194:	ed84 0b00 	vstr	d0, [r4]
 8005198:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800519c:	2500      	movs	r5, #0
 800519e:	e027      	b.n	80051f0 <__ieee754_rem_pio2+0x78>
 80051a0:	4bbc      	ldr	r3, [pc, #752]	; (8005494 <__ieee754_rem_pio2+0x31c>)
 80051a2:	4598      	cmp	r8, r3
 80051a4:	dc75      	bgt.n	8005292 <__ieee754_rem_pio2+0x11a>
 80051a6:	9b04      	ldr	r3, [sp, #16]
 80051a8:	4dbb      	ldr	r5, [pc, #748]	; (8005498 <__ieee754_rem_pio2+0x320>)
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	ee10 0a10 	vmov	r0, s0
 80051b0:	a3a9      	add	r3, pc, #676	; (adr r3, 8005458 <__ieee754_rem_pio2+0x2e0>)
 80051b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b6:	4639      	mov	r1, r7
 80051b8:	dd36      	ble.n	8005228 <__ieee754_rem_pio2+0xb0>
 80051ba:	f7fb f809 	bl	80001d0 <__aeabi_dsub>
 80051be:	45a8      	cmp	r8, r5
 80051c0:	4606      	mov	r6, r0
 80051c2:	460f      	mov	r7, r1
 80051c4:	d018      	beq.n	80051f8 <__ieee754_rem_pio2+0x80>
 80051c6:	a3a6      	add	r3, pc, #664	; (adr r3, 8005460 <__ieee754_rem_pio2+0x2e8>)
 80051c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051cc:	f7fb f800 	bl	80001d0 <__aeabi_dsub>
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	e9c4 2300 	strd	r2, r3, [r4]
 80051d8:	4630      	mov	r0, r6
 80051da:	4639      	mov	r1, r7
 80051dc:	f7fa fff8 	bl	80001d0 <__aeabi_dsub>
 80051e0:	a39f      	add	r3, pc, #636	; (adr r3, 8005460 <__ieee754_rem_pio2+0x2e8>)
 80051e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e6:	f7fa fff3 	bl	80001d0 <__aeabi_dsub>
 80051ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80051ee:	2501      	movs	r5, #1
 80051f0:	4628      	mov	r0, r5
 80051f2:	b00d      	add	sp, #52	; 0x34
 80051f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051f8:	a39b      	add	r3, pc, #620	; (adr r3, 8005468 <__ieee754_rem_pio2+0x2f0>)
 80051fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fe:	f7fa ffe7 	bl	80001d0 <__aeabi_dsub>
 8005202:	a39b      	add	r3, pc, #620	; (adr r3, 8005470 <__ieee754_rem_pio2+0x2f8>)
 8005204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005208:	4606      	mov	r6, r0
 800520a:	460f      	mov	r7, r1
 800520c:	f7fa ffe0 	bl	80001d0 <__aeabi_dsub>
 8005210:	4602      	mov	r2, r0
 8005212:	460b      	mov	r3, r1
 8005214:	e9c4 2300 	strd	r2, r3, [r4]
 8005218:	4630      	mov	r0, r6
 800521a:	4639      	mov	r1, r7
 800521c:	f7fa ffd8 	bl	80001d0 <__aeabi_dsub>
 8005220:	a393      	add	r3, pc, #588	; (adr r3, 8005470 <__ieee754_rem_pio2+0x2f8>)
 8005222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005226:	e7de      	b.n	80051e6 <__ieee754_rem_pio2+0x6e>
 8005228:	f7fa ffd4 	bl	80001d4 <__adddf3>
 800522c:	45a8      	cmp	r8, r5
 800522e:	4606      	mov	r6, r0
 8005230:	460f      	mov	r7, r1
 8005232:	d016      	beq.n	8005262 <__ieee754_rem_pio2+0xea>
 8005234:	a38a      	add	r3, pc, #552	; (adr r3, 8005460 <__ieee754_rem_pio2+0x2e8>)
 8005236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523a:	f7fa ffcb 	bl	80001d4 <__adddf3>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	e9c4 2300 	strd	r2, r3, [r4]
 8005246:	4630      	mov	r0, r6
 8005248:	4639      	mov	r1, r7
 800524a:	f7fa ffc1 	bl	80001d0 <__aeabi_dsub>
 800524e:	a384      	add	r3, pc, #528	; (adr r3, 8005460 <__ieee754_rem_pio2+0x2e8>)
 8005250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005254:	f7fa ffbe 	bl	80001d4 <__adddf3>
 8005258:	f04f 35ff 	mov.w	r5, #4294967295
 800525c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005260:	e7c6      	b.n	80051f0 <__ieee754_rem_pio2+0x78>
 8005262:	a381      	add	r3, pc, #516	; (adr r3, 8005468 <__ieee754_rem_pio2+0x2f0>)
 8005264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005268:	f7fa ffb4 	bl	80001d4 <__adddf3>
 800526c:	a380      	add	r3, pc, #512	; (adr r3, 8005470 <__ieee754_rem_pio2+0x2f8>)
 800526e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005272:	4606      	mov	r6, r0
 8005274:	460f      	mov	r7, r1
 8005276:	f7fa ffad 	bl	80001d4 <__adddf3>
 800527a:	4602      	mov	r2, r0
 800527c:	460b      	mov	r3, r1
 800527e:	e9c4 2300 	strd	r2, r3, [r4]
 8005282:	4630      	mov	r0, r6
 8005284:	4639      	mov	r1, r7
 8005286:	f7fa ffa3 	bl	80001d0 <__aeabi_dsub>
 800528a:	a379      	add	r3, pc, #484	; (adr r3, 8005470 <__ieee754_rem_pio2+0x2f8>)
 800528c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005290:	e7e0      	b.n	8005254 <__ieee754_rem_pio2+0xdc>
 8005292:	4b82      	ldr	r3, [pc, #520]	; (800549c <__ieee754_rem_pio2+0x324>)
 8005294:	4598      	cmp	r8, r3
 8005296:	f300 80d0 	bgt.w	800543a <__ieee754_rem_pio2+0x2c2>
 800529a:	f000 ff1d 	bl	80060d8 <fabs>
 800529e:	ec57 6b10 	vmov	r6, r7, d0
 80052a2:	ee10 0a10 	vmov	r0, s0
 80052a6:	a374      	add	r3, pc, #464	; (adr r3, 8005478 <__ieee754_rem_pio2+0x300>)
 80052a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ac:	4639      	mov	r1, r7
 80052ae:	f7fb f947 	bl	8000540 <__aeabi_dmul>
 80052b2:	2200      	movs	r2, #0
 80052b4:	4b7a      	ldr	r3, [pc, #488]	; (80054a0 <__ieee754_rem_pio2+0x328>)
 80052b6:	f7fa ff8d 	bl	80001d4 <__adddf3>
 80052ba:	f7fb fbf1 	bl	8000aa0 <__aeabi_d2iz>
 80052be:	4605      	mov	r5, r0
 80052c0:	f7fb f8d4 	bl	800046c <__aeabi_i2d>
 80052c4:	a364      	add	r3, pc, #400	; (adr r3, 8005458 <__ieee754_rem_pio2+0x2e0>)
 80052c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052ce:	f7fb f937 	bl	8000540 <__aeabi_dmul>
 80052d2:	4602      	mov	r2, r0
 80052d4:	460b      	mov	r3, r1
 80052d6:	4630      	mov	r0, r6
 80052d8:	4639      	mov	r1, r7
 80052da:	f7fa ff79 	bl	80001d0 <__aeabi_dsub>
 80052de:	a360      	add	r3, pc, #384	; (adr r3, 8005460 <__ieee754_rem_pio2+0x2e8>)
 80052e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e4:	4682      	mov	sl, r0
 80052e6:	468b      	mov	fp, r1
 80052e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052ec:	f7fb f928 	bl	8000540 <__aeabi_dmul>
 80052f0:	2d1f      	cmp	r5, #31
 80052f2:	4606      	mov	r6, r0
 80052f4:	460f      	mov	r7, r1
 80052f6:	dc0c      	bgt.n	8005312 <__ieee754_rem_pio2+0x19a>
 80052f8:	1e6a      	subs	r2, r5, #1
 80052fa:	4b6a      	ldr	r3, [pc, #424]	; (80054a4 <__ieee754_rem_pio2+0x32c>)
 80052fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005300:	4543      	cmp	r3, r8
 8005302:	d006      	beq.n	8005312 <__ieee754_rem_pio2+0x19a>
 8005304:	4632      	mov	r2, r6
 8005306:	463b      	mov	r3, r7
 8005308:	4650      	mov	r0, sl
 800530a:	4659      	mov	r1, fp
 800530c:	f7fa ff60 	bl	80001d0 <__aeabi_dsub>
 8005310:	e00e      	b.n	8005330 <__ieee754_rem_pio2+0x1b8>
 8005312:	4632      	mov	r2, r6
 8005314:	463b      	mov	r3, r7
 8005316:	4650      	mov	r0, sl
 8005318:	4659      	mov	r1, fp
 800531a:	f7fa ff59 	bl	80001d0 <__aeabi_dsub>
 800531e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005322:	9305      	str	r3, [sp, #20]
 8005324:	9a05      	ldr	r2, [sp, #20]
 8005326:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b10      	cmp	r3, #16
 800532e:	dc02      	bgt.n	8005336 <__ieee754_rem_pio2+0x1be>
 8005330:	e9c4 0100 	strd	r0, r1, [r4]
 8005334:	e039      	b.n	80053aa <__ieee754_rem_pio2+0x232>
 8005336:	a34c      	add	r3, pc, #304	; (adr r3, 8005468 <__ieee754_rem_pio2+0x2f0>)
 8005338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005340:	f7fb f8fe 	bl	8000540 <__aeabi_dmul>
 8005344:	4606      	mov	r6, r0
 8005346:	460f      	mov	r7, r1
 8005348:	4602      	mov	r2, r0
 800534a:	460b      	mov	r3, r1
 800534c:	4650      	mov	r0, sl
 800534e:	4659      	mov	r1, fp
 8005350:	f7fa ff3e 	bl	80001d0 <__aeabi_dsub>
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	4680      	mov	r8, r0
 800535a:	4689      	mov	r9, r1
 800535c:	4650      	mov	r0, sl
 800535e:	4659      	mov	r1, fp
 8005360:	f7fa ff36 	bl	80001d0 <__aeabi_dsub>
 8005364:	4632      	mov	r2, r6
 8005366:	463b      	mov	r3, r7
 8005368:	f7fa ff32 	bl	80001d0 <__aeabi_dsub>
 800536c:	a340      	add	r3, pc, #256	; (adr r3, 8005470 <__ieee754_rem_pio2+0x2f8>)
 800536e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005372:	4606      	mov	r6, r0
 8005374:	460f      	mov	r7, r1
 8005376:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800537a:	f7fb f8e1 	bl	8000540 <__aeabi_dmul>
 800537e:	4632      	mov	r2, r6
 8005380:	463b      	mov	r3, r7
 8005382:	f7fa ff25 	bl	80001d0 <__aeabi_dsub>
 8005386:	4602      	mov	r2, r0
 8005388:	460b      	mov	r3, r1
 800538a:	4606      	mov	r6, r0
 800538c:	460f      	mov	r7, r1
 800538e:	4640      	mov	r0, r8
 8005390:	4649      	mov	r1, r9
 8005392:	f7fa ff1d 	bl	80001d0 <__aeabi_dsub>
 8005396:	9a05      	ldr	r2, [sp, #20]
 8005398:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b31      	cmp	r3, #49	; 0x31
 80053a0:	dc20      	bgt.n	80053e4 <__ieee754_rem_pio2+0x26c>
 80053a2:	e9c4 0100 	strd	r0, r1, [r4]
 80053a6:	46c2      	mov	sl, r8
 80053a8:	46cb      	mov	fp, r9
 80053aa:	e9d4 8900 	ldrd	r8, r9, [r4]
 80053ae:	4650      	mov	r0, sl
 80053b0:	4642      	mov	r2, r8
 80053b2:	464b      	mov	r3, r9
 80053b4:	4659      	mov	r1, fp
 80053b6:	f7fa ff0b 	bl	80001d0 <__aeabi_dsub>
 80053ba:	463b      	mov	r3, r7
 80053bc:	4632      	mov	r2, r6
 80053be:	f7fa ff07 	bl	80001d0 <__aeabi_dsub>
 80053c2:	9b04      	ldr	r3, [sp, #16]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80053ca:	f6bf af11 	bge.w	80051f0 <__ieee754_rem_pio2+0x78>
 80053ce:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80053d2:	6063      	str	r3, [r4, #4]
 80053d4:	f8c4 8000 	str.w	r8, [r4]
 80053d8:	60a0      	str	r0, [r4, #8]
 80053da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80053de:	60e3      	str	r3, [r4, #12]
 80053e0:	426d      	negs	r5, r5
 80053e2:	e705      	b.n	80051f0 <__ieee754_rem_pio2+0x78>
 80053e4:	a326      	add	r3, pc, #152	; (adr r3, 8005480 <__ieee754_rem_pio2+0x308>)
 80053e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053ee:	f7fb f8a7 	bl	8000540 <__aeabi_dmul>
 80053f2:	4606      	mov	r6, r0
 80053f4:	460f      	mov	r7, r1
 80053f6:	4602      	mov	r2, r0
 80053f8:	460b      	mov	r3, r1
 80053fa:	4640      	mov	r0, r8
 80053fc:	4649      	mov	r1, r9
 80053fe:	f7fa fee7 	bl	80001d0 <__aeabi_dsub>
 8005402:	4602      	mov	r2, r0
 8005404:	460b      	mov	r3, r1
 8005406:	4682      	mov	sl, r0
 8005408:	468b      	mov	fp, r1
 800540a:	4640      	mov	r0, r8
 800540c:	4649      	mov	r1, r9
 800540e:	f7fa fedf 	bl	80001d0 <__aeabi_dsub>
 8005412:	4632      	mov	r2, r6
 8005414:	463b      	mov	r3, r7
 8005416:	f7fa fedb 	bl	80001d0 <__aeabi_dsub>
 800541a:	a31b      	add	r3, pc, #108	; (adr r3, 8005488 <__ieee754_rem_pio2+0x310>)
 800541c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005420:	4606      	mov	r6, r0
 8005422:	460f      	mov	r7, r1
 8005424:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005428:	f7fb f88a 	bl	8000540 <__aeabi_dmul>
 800542c:	4632      	mov	r2, r6
 800542e:	463b      	mov	r3, r7
 8005430:	f7fa fece 	bl	80001d0 <__aeabi_dsub>
 8005434:	4606      	mov	r6, r0
 8005436:	460f      	mov	r7, r1
 8005438:	e764      	b.n	8005304 <__ieee754_rem_pio2+0x18c>
 800543a:	4b1b      	ldr	r3, [pc, #108]	; (80054a8 <__ieee754_rem_pio2+0x330>)
 800543c:	4598      	cmp	r8, r3
 800543e:	dd35      	ble.n	80054ac <__ieee754_rem_pio2+0x334>
 8005440:	ee10 2a10 	vmov	r2, s0
 8005444:	463b      	mov	r3, r7
 8005446:	4630      	mov	r0, r6
 8005448:	4639      	mov	r1, r7
 800544a:	f7fa fec1 	bl	80001d0 <__aeabi_dsub>
 800544e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005452:	e9c4 0100 	strd	r0, r1, [r4]
 8005456:	e6a1      	b.n	800519c <__ieee754_rem_pio2+0x24>
 8005458:	54400000 	.word	0x54400000
 800545c:	3ff921fb 	.word	0x3ff921fb
 8005460:	1a626331 	.word	0x1a626331
 8005464:	3dd0b461 	.word	0x3dd0b461
 8005468:	1a600000 	.word	0x1a600000
 800546c:	3dd0b461 	.word	0x3dd0b461
 8005470:	2e037073 	.word	0x2e037073
 8005474:	3ba3198a 	.word	0x3ba3198a
 8005478:	6dc9c883 	.word	0x6dc9c883
 800547c:	3fe45f30 	.word	0x3fe45f30
 8005480:	2e000000 	.word	0x2e000000
 8005484:	3ba3198a 	.word	0x3ba3198a
 8005488:	252049c1 	.word	0x252049c1
 800548c:	397b839a 	.word	0x397b839a
 8005490:	3fe921fb 	.word	0x3fe921fb
 8005494:	4002d97b 	.word	0x4002d97b
 8005498:	3ff921fb 	.word	0x3ff921fb
 800549c:	413921fb 	.word	0x413921fb
 80054a0:	3fe00000 	.word	0x3fe00000
 80054a4:	080064a0 	.word	0x080064a0
 80054a8:	7fefffff 	.word	0x7fefffff
 80054ac:	ea4f 5528 	mov.w	r5, r8, asr #20
 80054b0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80054b4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80054b8:	4630      	mov	r0, r6
 80054ba:	460f      	mov	r7, r1
 80054bc:	f7fb faf0 	bl	8000aa0 <__aeabi_d2iz>
 80054c0:	f7fa ffd4 	bl	800046c <__aeabi_i2d>
 80054c4:	4602      	mov	r2, r0
 80054c6:	460b      	mov	r3, r1
 80054c8:	4630      	mov	r0, r6
 80054ca:	4639      	mov	r1, r7
 80054cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80054d0:	f7fa fe7e 	bl	80001d0 <__aeabi_dsub>
 80054d4:	2200      	movs	r2, #0
 80054d6:	4b1f      	ldr	r3, [pc, #124]	; (8005554 <__ieee754_rem_pio2+0x3dc>)
 80054d8:	f7fb f832 	bl	8000540 <__aeabi_dmul>
 80054dc:	460f      	mov	r7, r1
 80054de:	4606      	mov	r6, r0
 80054e0:	f7fb fade 	bl	8000aa0 <__aeabi_d2iz>
 80054e4:	f7fa ffc2 	bl	800046c <__aeabi_i2d>
 80054e8:	4602      	mov	r2, r0
 80054ea:	460b      	mov	r3, r1
 80054ec:	4630      	mov	r0, r6
 80054ee:	4639      	mov	r1, r7
 80054f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80054f4:	f7fa fe6c 	bl	80001d0 <__aeabi_dsub>
 80054f8:	2200      	movs	r2, #0
 80054fa:	4b16      	ldr	r3, [pc, #88]	; (8005554 <__ieee754_rem_pio2+0x3dc>)
 80054fc:	f7fb f820 	bl	8000540 <__aeabi_dmul>
 8005500:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005504:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8005508:	f04f 0803 	mov.w	r8, #3
 800550c:	2600      	movs	r6, #0
 800550e:	2700      	movs	r7, #0
 8005510:	4632      	mov	r2, r6
 8005512:	463b      	mov	r3, r7
 8005514:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005518:	f108 3aff 	add.w	sl, r8, #4294967295
 800551c:	f7fb fa78 	bl	8000a10 <__aeabi_dcmpeq>
 8005520:	b9b0      	cbnz	r0, 8005550 <__ieee754_rem_pio2+0x3d8>
 8005522:	4b0d      	ldr	r3, [pc, #52]	; (8005558 <__ieee754_rem_pio2+0x3e0>)
 8005524:	9301      	str	r3, [sp, #4]
 8005526:	2302      	movs	r3, #2
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	462a      	mov	r2, r5
 800552c:	4643      	mov	r3, r8
 800552e:	4621      	mov	r1, r4
 8005530:	a806      	add	r0, sp, #24
 8005532:	f000 f8c5 	bl	80056c0 <__kernel_rem_pio2>
 8005536:	9b04      	ldr	r3, [sp, #16]
 8005538:	2b00      	cmp	r3, #0
 800553a:	4605      	mov	r5, r0
 800553c:	f6bf ae58 	bge.w	80051f0 <__ieee754_rem_pio2+0x78>
 8005540:	6863      	ldr	r3, [r4, #4]
 8005542:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005546:	6063      	str	r3, [r4, #4]
 8005548:	68e3      	ldr	r3, [r4, #12]
 800554a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800554e:	e746      	b.n	80053de <__ieee754_rem_pio2+0x266>
 8005550:	46d0      	mov	r8, sl
 8005552:	e7dd      	b.n	8005510 <__ieee754_rem_pio2+0x398>
 8005554:	41700000 	.word	0x41700000
 8005558:	08006520 	.word	0x08006520

0800555c <__ieee754_sqrt>:
 800555c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005560:	4955      	ldr	r1, [pc, #340]	; (80056b8 <__ieee754_sqrt+0x15c>)
 8005562:	ec55 4b10 	vmov	r4, r5, d0
 8005566:	43a9      	bics	r1, r5
 8005568:	462b      	mov	r3, r5
 800556a:	462a      	mov	r2, r5
 800556c:	d112      	bne.n	8005594 <__ieee754_sqrt+0x38>
 800556e:	ee10 2a10 	vmov	r2, s0
 8005572:	ee10 0a10 	vmov	r0, s0
 8005576:	4629      	mov	r1, r5
 8005578:	f7fa ffe2 	bl	8000540 <__aeabi_dmul>
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	4620      	mov	r0, r4
 8005582:	4629      	mov	r1, r5
 8005584:	f7fa fe26 	bl	80001d4 <__adddf3>
 8005588:	4604      	mov	r4, r0
 800558a:	460d      	mov	r5, r1
 800558c:	ec45 4b10 	vmov	d0, r4, r5
 8005590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005594:	2d00      	cmp	r5, #0
 8005596:	ee10 0a10 	vmov	r0, s0
 800559a:	4621      	mov	r1, r4
 800559c:	dc0f      	bgt.n	80055be <__ieee754_sqrt+0x62>
 800559e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80055a2:	4330      	orrs	r0, r6
 80055a4:	d0f2      	beq.n	800558c <__ieee754_sqrt+0x30>
 80055a6:	b155      	cbz	r5, 80055be <__ieee754_sqrt+0x62>
 80055a8:	ee10 2a10 	vmov	r2, s0
 80055ac:	4620      	mov	r0, r4
 80055ae:	4629      	mov	r1, r5
 80055b0:	f7fa fe0e 	bl	80001d0 <__aeabi_dsub>
 80055b4:	4602      	mov	r2, r0
 80055b6:	460b      	mov	r3, r1
 80055b8:	f7fb f8ec 	bl	8000794 <__aeabi_ddiv>
 80055bc:	e7e4      	b.n	8005588 <__ieee754_sqrt+0x2c>
 80055be:	151b      	asrs	r3, r3, #20
 80055c0:	d073      	beq.n	80056aa <__ieee754_sqrt+0x14e>
 80055c2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80055c6:	07dd      	lsls	r5, r3, #31
 80055c8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80055cc:	bf48      	it	mi
 80055ce:	0fc8      	lsrmi	r0, r1, #31
 80055d0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80055d4:	bf44      	itt	mi
 80055d6:	0049      	lslmi	r1, r1, #1
 80055d8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80055dc:	2500      	movs	r5, #0
 80055de:	1058      	asrs	r0, r3, #1
 80055e0:	0fcb      	lsrs	r3, r1, #31
 80055e2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80055e6:	0049      	lsls	r1, r1, #1
 80055e8:	2316      	movs	r3, #22
 80055ea:	462c      	mov	r4, r5
 80055ec:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80055f0:	19a7      	adds	r7, r4, r6
 80055f2:	4297      	cmp	r7, r2
 80055f4:	bfde      	ittt	le
 80055f6:	19bc      	addle	r4, r7, r6
 80055f8:	1bd2      	suble	r2, r2, r7
 80055fa:	19ad      	addle	r5, r5, r6
 80055fc:	0fcf      	lsrs	r7, r1, #31
 80055fe:	3b01      	subs	r3, #1
 8005600:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8005604:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005608:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800560c:	d1f0      	bne.n	80055f0 <__ieee754_sqrt+0x94>
 800560e:	f04f 0c20 	mov.w	ip, #32
 8005612:	469e      	mov	lr, r3
 8005614:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005618:	42a2      	cmp	r2, r4
 800561a:	eb06 070e 	add.w	r7, r6, lr
 800561e:	dc02      	bgt.n	8005626 <__ieee754_sqrt+0xca>
 8005620:	d112      	bne.n	8005648 <__ieee754_sqrt+0xec>
 8005622:	428f      	cmp	r7, r1
 8005624:	d810      	bhi.n	8005648 <__ieee754_sqrt+0xec>
 8005626:	2f00      	cmp	r7, #0
 8005628:	eb07 0e06 	add.w	lr, r7, r6
 800562c:	da42      	bge.n	80056b4 <__ieee754_sqrt+0x158>
 800562e:	f1be 0f00 	cmp.w	lr, #0
 8005632:	db3f      	blt.n	80056b4 <__ieee754_sqrt+0x158>
 8005634:	f104 0801 	add.w	r8, r4, #1
 8005638:	1b12      	subs	r2, r2, r4
 800563a:	428f      	cmp	r7, r1
 800563c:	bf88      	it	hi
 800563e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8005642:	1bc9      	subs	r1, r1, r7
 8005644:	4433      	add	r3, r6
 8005646:	4644      	mov	r4, r8
 8005648:	0052      	lsls	r2, r2, #1
 800564a:	f1bc 0c01 	subs.w	ip, ip, #1
 800564e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8005652:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005656:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800565a:	d1dd      	bne.n	8005618 <__ieee754_sqrt+0xbc>
 800565c:	430a      	orrs	r2, r1
 800565e:	d006      	beq.n	800566e <__ieee754_sqrt+0x112>
 8005660:	1c5c      	adds	r4, r3, #1
 8005662:	bf13      	iteet	ne
 8005664:	3301      	addne	r3, #1
 8005666:	3501      	addeq	r5, #1
 8005668:	4663      	moveq	r3, ip
 800566a:	f023 0301 	bicne.w	r3, r3, #1
 800566e:	106a      	asrs	r2, r5, #1
 8005670:	085b      	lsrs	r3, r3, #1
 8005672:	07e9      	lsls	r1, r5, #31
 8005674:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005678:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800567c:	bf48      	it	mi
 800567e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005682:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8005686:	461c      	mov	r4, r3
 8005688:	e780      	b.n	800558c <__ieee754_sqrt+0x30>
 800568a:	0aca      	lsrs	r2, r1, #11
 800568c:	3815      	subs	r0, #21
 800568e:	0549      	lsls	r1, r1, #21
 8005690:	2a00      	cmp	r2, #0
 8005692:	d0fa      	beq.n	800568a <__ieee754_sqrt+0x12e>
 8005694:	02d6      	lsls	r6, r2, #11
 8005696:	d50a      	bpl.n	80056ae <__ieee754_sqrt+0x152>
 8005698:	f1c3 0420 	rsb	r4, r3, #32
 800569c:	fa21 f404 	lsr.w	r4, r1, r4
 80056a0:	1e5d      	subs	r5, r3, #1
 80056a2:	4099      	lsls	r1, r3
 80056a4:	4322      	orrs	r2, r4
 80056a6:	1b43      	subs	r3, r0, r5
 80056a8:	e78b      	b.n	80055c2 <__ieee754_sqrt+0x66>
 80056aa:	4618      	mov	r0, r3
 80056ac:	e7f0      	b.n	8005690 <__ieee754_sqrt+0x134>
 80056ae:	0052      	lsls	r2, r2, #1
 80056b0:	3301      	adds	r3, #1
 80056b2:	e7ef      	b.n	8005694 <__ieee754_sqrt+0x138>
 80056b4:	46a0      	mov	r8, r4
 80056b6:	e7bf      	b.n	8005638 <__ieee754_sqrt+0xdc>
 80056b8:	7ff00000 	.word	0x7ff00000
 80056bc:	00000000 	.word	0x00000000

080056c0 <__kernel_rem_pio2>:
 80056c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c4:	ed2d 8b02 	vpush	{d8}
 80056c8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80056cc:	1ed4      	subs	r4, r2, #3
 80056ce:	9308      	str	r3, [sp, #32]
 80056d0:	9101      	str	r1, [sp, #4]
 80056d2:	4bc5      	ldr	r3, [pc, #788]	; (80059e8 <__kernel_rem_pio2+0x328>)
 80056d4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80056d6:	9009      	str	r0, [sp, #36]	; 0x24
 80056d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80056dc:	9304      	str	r3, [sp, #16]
 80056de:	9b08      	ldr	r3, [sp, #32]
 80056e0:	3b01      	subs	r3, #1
 80056e2:	9307      	str	r3, [sp, #28]
 80056e4:	2318      	movs	r3, #24
 80056e6:	fb94 f4f3 	sdiv	r4, r4, r3
 80056ea:	f06f 0317 	mvn.w	r3, #23
 80056ee:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80056f2:	fb04 3303 	mla	r3, r4, r3, r3
 80056f6:	eb03 0a02 	add.w	sl, r3, r2
 80056fa:	9b04      	ldr	r3, [sp, #16]
 80056fc:	9a07      	ldr	r2, [sp, #28]
 80056fe:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80059d8 <__kernel_rem_pio2+0x318>
 8005702:	eb03 0802 	add.w	r8, r3, r2
 8005706:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005708:	1aa7      	subs	r7, r4, r2
 800570a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800570e:	ae22      	add	r6, sp, #136	; 0x88
 8005710:	2500      	movs	r5, #0
 8005712:	4545      	cmp	r5, r8
 8005714:	dd13      	ble.n	800573e <__kernel_rem_pio2+0x7e>
 8005716:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80059d8 <__kernel_rem_pio2+0x318>
 800571a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800571e:	2600      	movs	r6, #0
 8005720:	9b04      	ldr	r3, [sp, #16]
 8005722:	429e      	cmp	r6, r3
 8005724:	dc32      	bgt.n	800578c <__kernel_rem_pio2+0xcc>
 8005726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005728:	9302      	str	r3, [sp, #8]
 800572a:	9b08      	ldr	r3, [sp, #32]
 800572c:	199d      	adds	r5, r3, r6
 800572e:	ab22      	add	r3, sp, #136	; 0x88
 8005730:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005734:	9306      	str	r3, [sp, #24]
 8005736:	ec59 8b18 	vmov	r8, r9, d8
 800573a:	2700      	movs	r7, #0
 800573c:	e01f      	b.n	800577e <__kernel_rem_pio2+0xbe>
 800573e:	42ef      	cmn	r7, r5
 8005740:	d407      	bmi.n	8005752 <__kernel_rem_pio2+0x92>
 8005742:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005746:	f7fa fe91 	bl	800046c <__aeabi_i2d>
 800574a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800574e:	3501      	adds	r5, #1
 8005750:	e7df      	b.n	8005712 <__kernel_rem_pio2+0x52>
 8005752:	ec51 0b18 	vmov	r0, r1, d8
 8005756:	e7f8      	b.n	800574a <__kernel_rem_pio2+0x8a>
 8005758:	9906      	ldr	r1, [sp, #24]
 800575a:	9d02      	ldr	r5, [sp, #8]
 800575c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8005760:	9106      	str	r1, [sp, #24]
 8005762:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8005766:	9502      	str	r5, [sp, #8]
 8005768:	f7fa feea 	bl	8000540 <__aeabi_dmul>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	4640      	mov	r0, r8
 8005772:	4649      	mov	r1, r9
 8005774:	f7fa fd2e 	bl	80001d4 <__adddf3>
 8005778:	3701      	adds	r7, #1
 800577a:	4680      	mov	r8, r0
 800577c:	4689      	mov	r9, r1
 800577e:	9b07      	ldr	r3, [sp, #28]
 8005780:	429f      	cmp	r7, r3
 8005782:	dde9      	ble.n	8005758 <__kernel_rem_pio2+0x98>
 8005784:	e8eb 8902 	strd	r8, r9, [fp], #8
 8005788:	3601      	adds	r6, #1
 800578a:	e7c9      	b.n	8005720 <__kernel_rem_pio2+0x60>
 800578c:	9b04      	ldr	r3, [sp, #16]
 800578e:	aa0e      	add	r2, sp, #56	; 0x38
 8005790:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005794:	930c      	str	r3, [sp, #48]	; 0x30
 8005796:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005798:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800579c:	9c04      	ldr	r4, [sp, #16]
 800579e:	930b      	str	r3, [sp, #44]	; 0x2c
 80057a0:	ab9a      	add	r3, sp, #616	; 0x268
 80057a2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80057a6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80057aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80057ae:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80057b2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80057b6:	ab9a      	add	r3, sp, #616	; 0x268
 80057b8:	445b      	add	r3, fp
 80057ba:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80057be:	2500      	movs	r5, #0
 80057c0:	1b63      	subs	r3, r4, r5
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	dc78      	bgt.n	80058b8 <__kernel_rem_pio2+0x1f8>
 80057c6:	4650      	mov	r0, sl
 80057c8:	ec49 8b10 	vmov	d0, r8, r9
 80057cc:	f000 fdac 	bl	8006328 <scalbn>
 80057d0:	ec57 6b10 	vmov	r6, r7, d0
 80057d4:	2200      	movs	r2, #0
 80057d6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80057da:	ee10 0a10 	vmov	r0, s0
 80057de:	4639      	mov	r1, r7
 80057e0:	f7fa feae 	bl	8000540 <__aeabi_dmul>
 80057e4:	ec41 0b10 	vmov	d0, r0, r1
 80057e8:	f000 fc8a 	bl	8006100 <floor>
 80057ec:	2200      	movs	r2, #0
 80057ee:	ec51 0b10 	vmov	r0, r1, d0
 80057f2:	4b7e      	ldr	r3, [pc, #504]	; (80059ec <__kernel_rem_pio2+0x32c>)
 80057f4:	f7fa fea4 	bl	8000540 <__aeabi_dmul>
 80057f8:	4602      	mov	r2, r0
 80057fa:	460b      	mov	r3, r1
 80057fc:	4630      	mov	r0, r6
 80057fe:	4639      	mov	r1, r7
 8005800:	f7fa fce6 	bl	80001d0 <__aeabi_dsub>
 8005804:	460f      	mov	r7, r1
 8005806:	4606      	mov	r6, r0
 8005808:	f7fb f94a 	bl	8000aa0 <__aeabi_d2iz>
 800580c:	9006      	str	r0, [sp, #24]
 800580e:	f7fa fe2d 	bl	800046c <__aeabi_i2d>
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	4630      	mov	r0, r6
 8005818:	4639      	mov	r1, r7
 800581a:	f7fa fcd9 	bl	80001d0 <__aeabi_dsub>
 800581e:	f1ba 0f00 	cmp.w	sl, #0
 8005822:	4606      	mov	r6, r0
 8005824:	460f      	mov	r7, r1
 8005826:	dd6c      	ble.n	8005902 <__kernel_rem_pio2+0x242>
 8005828:	1e62      	subs	r2, r4, #1
 800582a:	ab0e      	add	r3, sp, #56	; 0x38
 800582c:	f1ca 0118 	rsb	r1, sl, #24
 8005830:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005834:	9d06      	ldr	r5, [sp, #24]
 8005836:	fa40 f301 	asr.w	r3, r0, r1
 800583a:	441d      	add	r5, r3
 800583c:	408b      	lsls	r3, r1
 800583e:	1ac0      	subs	r0, r0, r3
 8005840:	ab0e      	add	r3, sp, #56	; 0x38
 8005842:	9506      	str	r5, [sp, #24]
 8005844:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005848:	f1ca 0317 	rsb	r3, sl, #23
 800584c:	fa40 f303 	asr.w	r3, r0, r3
 8005850:	9302      	str	r3, [sp, #8]
 8005852:	9b02      	ldr	r3, [sp, #8]
 8005854:	2b00      	cmp	r3, #0
 8005856:	dd62      	ble.n	800591e <__kernel_rem_pio2+0x25e>
 8005858:	9b06      	ldr	r3, [sp, #24]
 800585a:	2200      	movs	r2, #0
 800585c:	3301      	adds	r3, #1
 800585e:	9306      	str	r3, [sp, #24]
 8005860:	4615      	mov	r5, r2
 8005862:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005866:	4294      	cmp	r4, r2
 8005868:	f300 8095 	bgt.w	8005996 <__kernel_rem_pio2+0x2d6>
 800586c:	f1ba 0f00 	cmp.w	sl, #0
 8005870:	dd07      	ble.n	8005882 <__kernel_rem_pio2+0x1c2>
 8005872:	f1ba 0f01 	cmp.w	sl, #1
 8005876:	f000 80a2 	beq.w	80059be <__kernel_rem_pio2+0x2fe>
 800587a:	f1ba 0f02 	cmp.w	sl, #2
 800587e:	f000 80c1 	beq.w	8005a04 <__kernel_rem_pio2+0x344>
 8005882:	9b02      	ldr	r3, [sp, #8]
 8005884:	2b02      	cmp	r3, #2
 8005886:	d14a      	bne.n	800591e <__kernel_rem_pio2+0x25e>
 8005888:	4632      	mov	r2, r6
 800588a:	463b      	mov	r3, r7
 800588c:	2000      	movs	r0, #0
 800588e:	4958      	ldr	r1, [pc, #352]	; (80059f0 <__kernel_rem_pio2+0x330>)
 8005890:	f7fa fc9e 	bl	80001d0 <__aeabi_dsub>
 8005894:	4606      	mov	r6, r0
 8005896:	460f      	mov	r7, r1
 8005898:	2d00      	cmp	r5, #0
 800589a:	d040      	beq.n	800591e <__kernel_rem_pio2+0x25e>
 800589c:	4650      	mov	r0, sl
 800589e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80059e0 <__kernel_rem_pio2+0x320>
 80058a2:	f000 fd41 	bl	8006328 <scalbn>
 80058a6:	4630      	mov	r0, r6
 80058a8:	4639      	mov	r1, r7
 80058aa:	ec53 2b10 	vmov	r2, r3, d0
 80058ae:	f7fa fc8f 	bl	80001d0 <__aeabi_dsub>
 80058b2:	4606      	mov	r6, r0
 80058b4:	460f      	mov	r7, r1
 80058b6:	e032      	b.n	800591e <__kernel_rem_pio2+0x25e>
 80058b8:	2200      	movs	r2, #0
 80058ba:	4b4e      	ldr	r3, [pc, #312]	; (80059f4 <__kernel_rem_pio2+0x334>)
 80058bc:	4640      	mov	r0, r8
 80058be:	4649      	mov	r1, r9
 80058c0:	f7fa fe3e 	bl	8000540 <__aeabi_dmul>
 80058c4:	f7fb f8ec 	bl	8000aa0 <__aeabi_d2iz>
 80058c8:	f7fa fdd0 	bl	800046c <__aeabi_i2d>
 80058cc:	2200      	movs	r2, #0
 80058ce:	4b4a      	ldr	r3, [pc, #296]	; (80059f8 <__kernel_rem_pio2+0x338>)
 80058d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058d4:	f7fa fe34 	bl	8000540 <__aeabi_dmul>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4640      	mov	r0, r8
 80058de:	4649      	mov	r1, r9
 80058e0:	f7fa fc76 	bl	80001d0 <__aeabi_dsub>
 80058e4:	f7fb f8dc 	bl	8000aa0 <__aeabi_d2iz>
 80058e8:	ab0e      	add	r3, sp, #56	; 0x38
 80058ea:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80058ee:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80058f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058f6:	f7fa fc6d 	bl	80001d4 <__adddf3>
 80058fa:	3501      	adds	r5, #1
 80058fc:	4680      	mov	r8, r0
 80058fe:	4689      	mov	r9, r1
 8005900:	e75e      	b.n	80057c0 <__kernel_rem_pio2+0x100>
 8005902:	d105      	bne.n	8005910 <__kernel_rem_pio2+0x250>
 8005904:	1e63      	subs	r3, r4, #1
 8005906:	aa0e      	add	r2, sp, #56	; 0x38
 8005908:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800590c:	15c3      	asrs	r3, r0, #23
 800590e:	e79f      	b.n	8005850 <__kernel_rem_pio2+0x190>
 8005910:	2200      	movs	r2, #0
 8005912:	4b3a      	ldr	r3, [pc, #232]	; (80059fc <__kernel_rem_pio2+0x33c>)
 8005914:	f7fb f89a 	bl	8000a4c <__aeabi_dcmpge>
 8005918:	2800      	cmp	r0, #0
 800591a:	d139      	bne.n	8005990 <__kernel_rem_pio2+0x2d0>
 800591c:	9002      	str	r0, [sp, #8]
 800591e:	2200      	movs	r2, #0
 8005920:	2300      	movs	r3, #0
 8005922:	4630      	mov	r0, r6
 8005924:	4639      	mov	r1, r7
 8005926:	f7fb f873 	bl	8000a10 <__aeabi_dcmpeq>
 800592a:	2800      	cmp	r0, #0
 800592c:	f000 80c7 	beq.w	8005abe <__kernel_rem_pio2+0x3fe>
 8005930:	1e65      	subs	r5, r4, #1
 8005932:	462b      	mov	r3, r5
 8005934:	2200      	movs	r2, #0
 8005936:	9904      	ldr	r1, [sp, #16]
 8005938:	428b      	cmp	r3, r1
 800593a:	da6a      	bge.n	8005a12 <__kernel_rem_pio2+0x352>
 800593c:	2a00      	cmp	r2, #0
 800593e:	f000 8088 	beq.w	8005a52 <__kernel_rem_pio2+0x392>
 8005942:	ab0e      	add	r3, sp, #56	; 0x38
 8005944:	f1aa 0a18 	sub.w	sl, sl, #24
 8005948:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 80b4 	beq.w	8005aba <__kernel_rem_pio2+0x3fa>
 8005952:	4650      	mov	r0, sl
 8005954:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80059e0 <__kernel_rem_pio2+0x320>
 8005958:	f000 fce6 	bl	8006328 <scalbn>
 800595c:	00ec      	lsls	r4, r5, #3
 800595e:	ab72      	add	r3, sp, #456	; 0x1c8
 8005960:	191e      	adds	r6, r3, r4
 8005962:	ec59 8b10 	vmov	r8, r9, d0
 8005966:	f106 0a08 	add.w	sl, r6, #8
 800596a:	462f      	mov	r7, r5
 800596c:	2f00      	cmp	r7, #0
 800596e:	f280 80df 	bge.w	8005b30 <__kernel_rem_pio2+0x470>
 8005972:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80059d8 <__kernel_rem_pio2+0x318>
 8005976:	f04f 0a00 	mov.w	sl, #0
 800597a:	eba5 030a 	sub.w	r3, r5, sl
 800597e:	2b00      	cmp	r3, #0
 8005980:	f2c0 810a 	blt.w	8005b98 <__kernel_rem_pio2+0x4d8>
 8005984:	f8df b078 	ldr.w	fp, [pc, #120]	; 8005a00 <__kernel_rem_pio2+0x340>
 8005988:	ec59 8b18 	vmov	r8, r9, d8
 800598c:	2700      	movs	r7, #0
 800598e:	e0f5      	b.n	8005b7c <__kernel_rem_pio2+0x4bc>
 8005990:	2302      	movs	r3, #2
 8005992:	9302      	str	r3, [sp, #8]
 8005994:	e760      	b.n	8005858 <__kernel_rem_pio2+0x198>
 8005996:	ab0e      	add	r3, sp, #56	; 0x38
 8005998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800599c:	b94d      	cbnz	r5, 80059b2 <__kernel_rem_pio2+0x2f2>
 800599e:	b12b      	cbz	r3, 80059ac <__kernel_rem_pio2+0x2ec>
 80059a0:	a80e      	add	r0, sp, #56	; 0x38
 80059a2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80059a6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80059aa:	2301      	movs	r3, #1
 80059ac:	3201      	adds	r2, #1
 80059ae:	461d      	mov	r5, r3
 80059b0:	e759      	b.n	8005866 <__kernel_rem_pio2+0x1a6>
 80059b2:	a80e      	add	r0, sp, #56	; 0x38
 80059b4:	1acb      	subs	r3, r1, r3
 80059b6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80059ba:	462b      	mov	r3, r5
 80059bc:	e7f6      	b.n	80059ac <__kernel_rem_pio2+0x2ec>
 80059be:	1e62      	subs	r2, r4, #1
 80059c0:	ab0e      	add	r3, sp, #56	; 0x38
 80059c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059c6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80059ca:	a90e      	add	r1, sp, #56	; 0x38
 80059cc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80059d0:	e757      	b.n	8005882 <__kernel_rem_pio2+0x1c2>
 80059d2:	bf00      	nop
 80059d4:	f3af 8000 	nop.w
	...
 80059e4:	3ff00000 	.word	0x3ff00000
 80059e8:	08006668 	.word	0x08006668
 80059ec:	40200000 	.word	0x40200000
 80059f0:	3ff00000 	.word	0x3ff00000
 80059f4:	3e700000 	.word	0x3e700000
 80059f8:	41700000 	.word	0x41700000
 80059fc:	3fe00000 	.word	0x3fe00000
 8005a00:	08006628 	.word	0x08006628
 8005a04:	1e62      	subs	r2, r4, #1
 8005a06:	ab0e      	add	r3, sp, #56	; 0x38
 8005a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a0c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005a10:	e7db      	b.n	80059ca <__kernel_rem_pio2+0x30a>
 8005a12:	a90e      	add	r1, sp, #56	; 0x38
 8005a14:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	e78b      	b.n	8005936 <__kernel_rem_pio2+0x276>
 8005a1e:	3301      	adds	r3, #1
 8005a20:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005a24:	2900      	cmp	r1, #0
 8005a26:	d0fa      	beq.n	8005a1e <__kernel_rem_pio2+0x35e>
 8005a28:	9a08      	ldr	r2, [sp, #32]
 8005a2a:	4422      	add	r2, r4
 8005a2c:	00d2      	lsls	r2, r2, #3
 8005a2e:	a922      	add	r1, sp, #136	; 0x88
 8005a30:	18e3      	adds	r3, r4, r3
 8005a32:	9206      	str	r2, [sp, #24]
 8005a34:	440a      	add	r2, r1
 8005a36:	9302      	str	r3, [sp, #8]
 8005a38:	f10b 0108 	add.w	r1, fp, #8
 8005a3c:	f102 0308 	add.w	r3, r2, #8
 8005a40:	1c66      	adds	r6, r4, #1
 8005a42:	910a      	str	r1, [sp, #40]	; 0x28
 8005a44:	2500      	movs	r5, #0
 8005a46:	930d      	str	r3, [sp, #52]	; 0x34
 8005a48:	9b02      	ldr	r3, [sp, #8]
 8005a4a:	42b3      	cmp	r3, r6
 8005a4c:	da04      	bge.n	8005a58 <__kernel_rem_pio2+0x398>
 8005a4e:	461c      	mov	r4, r3
 8005a50:	e6a6      	b.n	80057a0 <__kernel_rem_pio2+0xe0>
 8005a52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a54:	2301      	movs	r3, #1
 8005a56:	e7e3      	b.n	8005a20 <__kernel_rem_pio2+0x360>
 8005a58:	9b06      	ldr	r3, [sp, #24]
 8005a5a:	18ef      	adds	r7, r5, r3
 8005a5c:	ab22      	add	r3, sp, #136	; 0x88
 8005a5e:	441f      	add	r7, r3
 8005a60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a62:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005a66:	f7fa fd01 	bl	800046c <__aeabi_i2d>
 8005a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a6c:	461c      	mov	r4, r3
 8005a6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a70:	e9c7 0100 	strd	r0, r1, [r7]
 8005a74:	eb03 0b05 	add.w	fp, r3, r5
 8005a78:	2700      	movs	r7, #0
 8005a7a:	f04f 0800 	mov.w	r8, #0
 8005a7e:	f04f 0900 	mov.w	r9, #0
 8005a82:	9b07      	ldr	r3, [sp, #28]
 8005a84:	429f      	cmp	r7, r3
 8005a86:	dd08      	ble.n	8005a9a <__kernel_rem_pio2+0x3da>
 8005a88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a8a:	aa72      	add	r2, sp, #456	; 0x1c8
 8005a8c:	18eb      	adds	r3, r5, r3
 8005a8e:	4413      	add	r3, r2
 8005a90:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8005a94:	3601      	adds	r6, #1
 8005a96:	3508      	adds	r5, #8
 8005a98:	e7d6      	b.n	8005a48 <__kernel_rem_pio2+0x388>
 8005a9a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005a9e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005aa2:	f7fa fd4d 	bl	8000540 <__aeabi_dmul>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	4640      	mov	r0, r8
 8005aac:	4649      	mov	r1, r9
 8005aae:	f7fa fb91 	bl	80001d4 <__adddf3>
 8005ab2:	3701      	adds	r7, #1
 8005ab4:	4680      	mov	r8, r0
 8005ab6:	4689      	mov	r9, r1
 8005ab8:	e7e3      	b.n	8005a82 <__kernel_rem_pio2+0x3c2>
 8005aba:	3d01      	subs	r5, #1
 8005abc:	e741      	b.n	8005942 <__kernel_rem_pio2+0x282>
 8005abe:	f1ca 0000 	rsb	r0, sl, #0
 8005ac2:	ec47 6b10 	vmov	d0, r6, r7
 8005ac6:	f000 fc2f 	bl	8006328 <scalbn>
 8005aca:	ec57 6b10 	vmov	r6, r7, d0
 8005ace:	2200      	movs	r2, #0
 8005ad0:	4b99      	ldr	r3, [pc, #612]	; (8005d38 <__kernel_rem_pio2+0x678>)
 8005ad2:	ee10 0a10 	vmov	r0, s0
 8005ad6:	4639      	mov	r1, r7
 8005ad8:	f7fa ffb8 	bl	8000a4c <__aeabi_dcmpge>
 8005adc:	b1f8      	cbz	r0, 8005b1e <__kernel_rem_pio2+0x45e>
 8005ade:	2200      	movs	r2, #0
 8005ae0:	4b96      	ldr	r3, [pc, #600]	; (8005d3c <__kernel_rem_pio2+0x67c>)
 8005ae2:	4630      	mov	r0, r6
 8005ae4:	4639      	mov	r1, r7
 8005ae6:	f7fa fd2b 	bl	8000540 <__aeabi_dmul>
 8005aea:	f7fa ffd9 	bl	8000aa0 <__aeabi_d2iz>
 8005aee:	4680      	mov	r8, r0
 8005af0:	f7fa fcbc 	bl	800046c <__aeabi_i2d>
 8005af4:	2200      	movs	r2, #0
 8005af6:	4b90      	ldr	r3, [pc, #576]	; (8005d38 <__kernel_rem_pio2+0x678>)
 8005af8:	f7fa fd22 	bl	8000540 <__aeabi_dmul>
 8005afc:	460b      	mov	r3, r1
 8005afe:	4602      	mov	r2, r0
 8005b00:	4639      	mov	r1, r7
 8005b02:	4630      	mov	r0, r6
 8005b04:	f7fa fb64 	bl	80001d0 <__aeabi_dsub>
 8005b08:	f7fa ffca 	bl	8000aa0 <__aeabi_d2iz>
 8005b0c:	1c65      	adds	r5, r4, #1
 8005b0e:	ab0e      	add	r3, sp, #56	; 0x38
 8005b10:	f10a 0a18 	add.w	sl, sl, #24
 8005b14:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005b18:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005b1c:	e719      	b.n	8005952 <__kernel_rem_pio2+0x292>
 8005b1e:	4630      	mov	r0, r6
 8005b20:	4639      	mov	r1, r7
 8005b22:	f7fa ffbd 	bl	8000aa0 <__aeabi_d2iz>
 8005b26:	ab0e      	add	r3, sp, #56	; 0x38
 8005b28:	4625      	mov	r5, r4
 8005b2a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005b2e:	e710      	b.n	8005952 <__kernel_rem_pio2+0x292>
 8005b30:	ab0e      	add	r3, sp, #56	; 0x38
 8005b32:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8005b36:	f7fa fc99 	bl	800046c <__aeabi_i2d>
 8005b3a:	4642      	mov	r2, r8
 8005b3c:	464b      	mov	r3, r9
 8005b3e:	f7fa fcff 	bl	8000540 <__aeabi_dmul>
 8005b42:	2200      	movs	r2, #0
 8005b44:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8005b48:	4b7c      	ldr	r3, [pc, #496]	; (8005d3c <__kernel_rem_pio2+0x67c>)
 8005b4a:	4640      	mov	r0, r8
 8005b4c:	4649      	mov	r1, r9
 8005b4e:	f7fa fcf7 	bl	8000540 <__aeabi_dmul>
 8005b52:	3f01      	subs	r7, #1
 8005b54:	4680      	mov	r8, r0
 8005b56:	4689      	mov	r9, r1
 8005b58:	e708      	b.n	800596c <__kernel_rem_pio2+0x2ac>
 8005b5a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8005b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b62:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8005b66:	f7fa fceb 	bl	8000540 <__aeabi_dmul>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	4640      	mov	r0, r8
 8005b70:	4649      	mov	r1, r9
 8005b72:	f7fa fb2f 	bl	80001d4 <__adddf3>
 8005b76:	3701      	adds	r7, #1
 8005b78:	4680      	mov	r8, r0
 8005b7a:	4689      	mov	r9, r1
 8005b7c:	9b04      	ldr	r3, [sp, #16]
 8005b7e:	429f      	cmp	r7, r3
 8005b80:	dc01      	bgt.n	8005b86 <__kernel_rem_pio2+0x4c6>
 8005b82:	45ba      	cmp	sl, r7
 8005b84:	dae9      	bge.n	8005b5a <__kernel_rem_pio2+0x49a>
 8005b86:	ab4a      	add	r3, sp, #296	; 0x128
 8005b88:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005b8c:	e9c3 8900 	strd	r8, r9, [r3]
 8005b90:	f10a 0a01 	add.w	sl, sl, #1
 8005b94:	3e08      	subs	r6, #8
 8005b96:	e6f0      	b.n	800597a <__kernel_rem_pio2+0x2ba>
 8005b98:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005b9a:	2b03      	cmp	r3, #3
 8005b9c:	d85b      	bhi.n	8005c56 <__kernel_rem_pio2+0x596>
 8005b9e:	e8df f003 	tbb	[pc, r3]
 8005ba2:	264a      	.short	0x264a
 8005ba4:	0226      	.short	0x0226
 8005ba6:	ab9a      	add	r3, sp, #616	; 0x268
 8005ba8:	441c      	add	r4, r3
 8005baa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005bae:	46a2      	mov	sl, r4
 8005bb0:	46ab      	mov	fp, r5
 8005bb2:	f1bb 0f00 	cmp.w	fp, #0
 8005bb6:	dc6c      	bgt.n	8005c92 <__kernel_rem_pio2+0x5d2>
 8005bb8:	46a2      	mov	sl, r4
 8005bba:	46ab      	mov	fp, r5
 8005bbc:	f1bb 0f01 	cmp.w	fp, #1
 8005bc0:	f300 8086 	bgt.w	8005cd0 <__kernel_rem_pio2+0x610>
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	2d01      	cmp	r5, #1
 8005bca:	f300 80a0 	bgt.w	8005d0e <__kernel_rem_pio2+0x64e>
 8005bce:	9b02      	ldr	r3, [sp, #8]
 8005bd0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005bd4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f040 809e 	bne.w	8005d1a <__kernel_rem_pio2+0x65a>
 8005bde:	9b01      	ldr	r3, [sp, #4]
 8005be0:	e9c3 7800 	strd	r7, r8, [r3]
 8005be4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005be8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005bec:	e033      	b.n	8005c56 <__kernel_rem_pio2+0x596>
 8005bee:	3408      	adds	r4, #8
 8005bf0:	ab4a      	add	r3, sp, #296	; 0x128
 8005bf2:	441c      	add	r4, r3
 8005bf4:	462e      	mov	r6, r5
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	2e00      	cmp	r6, #0
 8005bfc:	da3a      	bge.n	8005c74 <__kernel_rem_pio2+0x5b4>
 8005bfe:	9b02      	ldr	r3, [sp, #8]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d03d      	beq.n	8005c80 <__kernel_rem_pio2+0x5c0>
 8005c04:	4602      	mov	r2, r0
 8005c06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c0a:	9c01      	ldr	r4, [sp, #4]
 8005c0c:	e9c4 2300 	strd	r2, r3, [r4]
 8005c10:	4602      	mov	r2, r0
 8005c12:	460b      	mov	r3, r1
 8005c14:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005c18:	f7fa fada 	bl	80001d0 <__aeabi_dsub>
 8005c1c:	ae4c      	add	r6, sp, #304	; 0x130
 8005c1e:	2401      	movs	r4, #1
 8005c20:	42a5      	cmp	r5, r4
 8005c22:	da30      	bge.n	8005c86 <__kernel_rem_pio2+0x5c6>
 8005c24:	9b02      	ldr	r3, [sp, #8]
 8005c26:	b113      	cbz	r3, 8005c2e <__kernel_rem_pio2+0x56e>
 8005c28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	9b01      	ldr	r3, [sp, #4]
 8005c30:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005c34:	e00f      	b.n	8005c56 <__kernel_rem_pio2+0x596>
 8005c36:	ab9a      	add	r3, sp, #616	; 0x268
 8005c38:	441c      	add	r4, r3
 8005c3a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005c3e:	2000      	movs	r0, #0
 8005c40:	2100      	movs	r1, #0
 8005c42:	2d00      	cmp	r5, #0
 8005c44:	da10      	bge.n	8005c68 <__kernel_rem_pio2+0x5a8>
 8005c46:	9b02      	ldr	r3, [sp, #8]
 8005c48:	b113      	cbz	r3, 8005c50 <__kernel_rem_pio2+0x590>
 8005c4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c4e:	4619      	mov	r1, r3
 8005c50:	9b01      	ldr	r3, [sp, #4]
 8005c52:	e9c3 0100 	strd	r0, r1, [r3]
 8005c56:	9b06      	ldr	r3, [sp, #24]
 8005c58:	f003 0007 	and.w	r0, r3, #7
 8005c5c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005c60:	ecbd 8b02 	vpop	{d8}
 8005c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c68:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005c6c:	f7fa fab2 	bl	80001d4 <__adddf3>
 8005c70:	3d01      	subs	r5, #1
 8005c72:	e7e6      	b.n	8005c42 <__kernel_rem_pio2+0x582>
 8005c74:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005c78:	f7fa faac 	bl	80001d4 <__adddf3>
 8005c7c:	3e01      	subs	r6, #1
 8005c7e:	e7bc      	b.n	8005bfa <__kernel_rem_pio2+0x53a>
 8005c80:	4602      	mov	r2, r0
 8005c82:	460b      	mov	r3, r1
 8005c84:	e7c1      	b.n	8005c0a <__kernel_rem_pio2+0x54a>
 8005c86:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005c8a:	f7fa faa3 	bl	80001d4 <__adddf3>
 8005c8e:	3401      	adds	r4, #1
 8005c90:	e7c6      	b.n	8005c20 <__kernel_rem_pio2+0x560>
 8005c92:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8005c96:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005c9a:	4640      	mov	r0, r8
 8005c9c:	ec53 2b17 	vmov	r2, r3, d7
 8005ca0:	4649      	mov	r1, r9
 8005ca2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005ca6:	f7fa fa95 	bl	80001d4 <__adddf3>
 8005caa:	4602      	mov	r2, r0
 8005cac:	460b      	mov	r3, r1
 8005cae:	4606      	mov	r6, r0
 8005cb0:	460f      	mov	r7, r1
 8005cb2:	4640      	mov	r0, r8
 8005cb4:	4649      	mov	r1, r9
 8005cb6:	f7fa fa8b 	bl	80001d0 <__aeabi_dsub>
 8005cba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cbe:	f7fa fa89 	bl	80001d4 <__adddf3>
 8005cc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005cc6:	e9ca 0100 	strd	r0, r1, [sl]
 8005cca:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8005cce:	e770      	b.n	8005bb2 <__kernel_rem_pio2+0x4f2>
 8005cd0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8005cd4:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005cd8:	4630      	mov	r0, r6
 8005cda:	ec53 2b17 	vmov	r2, r3, d7
 8005cde:	4639      	mov	r1, r7
 8005ce0:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005ce4:	f7fa fa76 	bl	80001d4 <__adddf3>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	460b      	mov	r3, r1
 8005cec:	4680      	mov	r8, r0
 8005cee:	4689      	mov	r9, r1
 8005cf0:	4630      	mov	r0, r6
 8005cf2:	4639      	mov	r1, r7
 8005cf4:	f7fa fa6c 	bl	80001d0 <__aeabi_dsub>
 8005cf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cfc:	f7fa fa6a 	bl	80001d4 <__adddf3>
 8005d00:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d04:	e9ca 0100 	strd	r0, r1, [sl]
 8005d08:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8005d0c:	e756      	b.n	8005bbc <__kernel_rem_pio2+0x4fc>
 8005d0e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005d12:	f7fa fa5f 	bl	80001d4 <__adddf3>
 8005d16:	3d01      	subs	r5, #1
 8005d18:	e756      	b.n	8005bc8 <__kernel_rem_pio2+0x508>
 8005d1a:	9b01      	ldr	r3, [sp, #4]
 8005d1c:	9a01      	ldr	r2, [sp, #4]
 8005d1e:	601f      	str	r7, [r3, #0]
 8005d20:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8005d24:	605c      	str	r4, [r3, #4]
 8005d26:	609d      	str	r5, [r3, #8]
 8005d28:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005d2c:	60d3      	str	r3, [r2, #12]
 8005d2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d32:	6110      	str	r0, [r2, #16]
 8005d34:	6153      	str	r3, [r2, #20]
 8005d36:	e78e      	b.n	8005c56 <__kernel_rem_pio2+0x596>
 8005d38:	41700000 	.word	0x41700000
 8005d3c:	3e700000 	.word	0x3e700000

08005d40 <__kernel_tan>:
 8005d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d44:	ec5b ab10 	vmov	sl, fp, d0
 8005d48:	4bbf      	ldr	r3, [pc, #764]	; (8006048 <__kernel_tan+0x308>)
 8005d4a:	b089      	sub	sp, #36	; 0x24
 8005d4c:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8005d50:	429f      	cmp	r7, r3
 8005d52:	ec59 8b11 	vmov	r8, r9, d1
 8005d56:	4606      	mov	r6, r0
 8005d58:	f8cd b008 	str.w	fp, [sp, #8]
 8005d5c:	dc22      	bgt.n	8005da4 <__kernel_tan+0x64>
 8005d5e:	ee10 0a10 	vmov	r0, s0
 8005d62:	4659      	mov	r1, fp
 8005d64:	f7fa fe9c 	bl	8000aa0 <__aeabi_d2iz>
 8005d68:	2800      	cmp	r0, #0
 8005d6a:	d145      	bne.n	8005df8 <__kernel_tan+0xb8>
 8005d6c:	1c73      	adds	r3, r6, #1
 8005d6e:	4652      	mov	r2, sl
 8005d70:	4313      	orrs	r3, r2
 8005d72:	433b      	orrs	r3, r7
 8005d74:	d110      	bne.n	8005d98 <__kernel_tan+0x58>
 8005d76:	ec4b ab10 	vmov	d0, sl, fp
 8005d7a:	f000 f9ad 	bl	80060d8 <fabs>
 8005d7e:	49b3      	ldr	r1, [pc, #716]	; (800604c <__kernel_tan+0x30c>)
 8005d80:	ec53 2b10 	vmov	r2, r3, d0
 8005d84:	2000      	movs	r0, #0
 8005d86:	f7fa fd05 	bl	8000794 <__aeabi_ddiv>
 8005d8a:	4682      	mov	sl, r0
 8005d8c:	468b      	mov	fp, r1
 8005d8e:	ec4b ab10 	vmov	d0, sl, fp
 8005d92:	b009      	add	sp, #36	; 0x24
 8005d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d98:	2e01      	cmp	r6, #1
 8005d9a:	d0f8      	beq.n	8005d8e <__kernel_tan+0x4e>
 8005d9c:	465b      	mov	r3, fp
 8005d9e:	2000      	movs	r0, #0
 8005da0:	49ab      	ldr	r1, [pc, #684]	; (8006050 <__kernel_tan+0x310>)
 8005da2:	e7f0      	b.n	8005d86 <__kernel_tan+0x46>
 8005da4:	4bab      	ldr	r3, [pc, #684]	; (8006054 <__kernel_tan+0x314>)
 8005da6:	429f      	cmp	r7, r3
 8005da8:	dd26      	ble.n	8005df8 <__kernel_tan+0xb8>
 8005daa:	9b02      	ldr	r3, [sp, #8]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	da09      	bge.n	8005dc4 <__kernel_tan+0x84>
 8005db0:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005db4:	469b      	mov	fp, r3
 8005db6:	ee10 aa10 	vmov	sl, s0
 8005dba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005dbe:	ee11 8a10 	vmov	r8, s2
 8005dc2:	4699      	mov	r9, r3
 8005dc4:	4652      	mov	r2, sl
 8005dc6:	465b      	mov	r3, fp
 8005dc8:	a181      	add	r1, pc, #516	; (adr r1, 8005fd0 <__kernel_tan+0x290>)
 8005dca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dce:	f7fa f9ff 	bl	80001d0 <__aeabi_dsub>
 8005dd2:	4642      	mov	r2, r8
 8005dd4:	464b      	mov	r3, r9
 8005dd6:	4604      	mov	r4, r0
 8005dd8:	460d      	mov	r5, r1
 8005dda:	a17f      	add	r1, pc, #508	; (adr r1, 8005fd8 <__kernel_tan+0x298>)
 8005ddc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005de0:	f7fa f9f6 	bl	80001d0 <__aeabi_dsub>
 8005de4:	4622      	mov	r2, r4
 8005de6:	462b      	mov	r3, r5
 8005de8:	f7fa f9f4 	bl	80001d4 <__adddf3>
 8005dec:	f04f 0800 	mov.w	r8, #0
 8005df0:	4682      	mov	sl, r0
 8005df2:	468b      	mov	fp, r1
 8005df4:	f04f 0900 	mov.w	r9, #0
 8005df8:	4652      	mov	r2, sl
 8005dfa:	465b      	mov	r3, fp
 8005dfc:	4650      	mov	r0, sl
 8005dfe:	4659      	mov	r1, fp
 8005e00:	f7fa fb9e 	bl	8000540 <__aeabi_dmul>
 8005e04:	4602      	mov	r2, r0
 8005e06:	460b      	mov	r3, r1
 8005e08:	e9cd 0100 	strd	r0, r1, [sp]
 8005e0c:	f7fa fb98 	bl	8000540 <__aeabi_dmul>
 8005e10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e14:	4604      	mov	r4, r0
 8005e16:	460d      	mov	r5, r1
 8005e18:	4650      	mov	r0, sl
 8005e1a:	4659      	mov	r1, fp
 8005e1c:	f7fa fb90 	bl	8000540 <__aeabi_dmul>
 8005e20:	a36f      	add	r3, pc, #444	; (adr r3, 8005fe0 <__kernel_tan+0x2a0>)
 8005e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	4629      	mov	r1, r5
 8005e2e:	f7fa fb87 	bl	8000540 <__aeabi_dmul>
 8005e32:	a36d      	add	r3, pc, #436	; (adr r3, 8005fe8 <__kernel_tan+0x2a8>)
 8005e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e38:	f7fa f9cc 	bl	80001d4 <__adddf3>
 8005e3c:	4622      	mov	r2, r4
 8005e3e:	462b      	mov	r3, r5
 8005e40:	f7fa fb7e 	bl	8000540 <__aeabi_dmul>
 8005e44:	a36a      	add	r3, pc, #424	; (adr r3, 8005ff0 <__kernel_tan+0x2b0>)
 8005e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4a:	f7fa f9c3 	bl	80001d4 <__adddf3>
 8005e4e:	4622      	mov	r2, r4
 8005e50:	462b      	mov	r3, r5
 8005e52:	f7fa fb75 	bl	8000540 <__aeabi_dmul>
 8005e56:	a368      	add	r3, pc, #416	; (adr r3, 8005ff8 <__kernel_tan+0x2b8>)
 8005e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5c:	f7fa f9ba 	bl	80001d4 <__adddf3>
 8005e60:	4622      	mov	r2, r4
 8005e62:	462b      	mov	r3, r5
 8005e64:	f7fa fb6c 	bl	8000540 <__aeabi_dmul>
 8005e68:	a365      	add	r3, pc, #404	; (adr r3, 8006000 <__kernel_tan+0x2c0>)
 8005e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6e:	f7fa f9b1 	bl	80001d4 <__adddf3>
 8005e72:	4622      	mov	r2, r4
 8005e74:	462b      	mov	r3, r5
 8005e76:	f7fa fb63 	bl	8000540 <__aeabi_dmul>
 8005e7a:	a363      	add	r3, pc, #396	; (adr r3, 8006008 <__kernel_tan+0x2c8>)
 8005e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e80:	f7fa f9a8 	bl	80001d4 <__adddf3>
 8005e84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e88:	f7fa fb5a 	bl	8000540 <__aeabi_dmul>
 8005e8c:	a360      	add	r3, pc, #384	; (adr r3, 8006010 <__kernel_tan+0x2d0>)
 8005e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e92:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005e96:	4620      	mov	r0, r4
 8005e98:	4629      	mov	r1, r5
 8005e9a:	f7fa fb51 	bl	8000540 <__aeabi_dmul>
 8005e9e:	a35e      	add	r3, pc, #376	; (adr r3, 8006018 <__kernel_tan+0x2d8>)
 8005ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea4:	f7fa f996 	bl	80001d4 <__adddf3>
 8005ea8:	4622      	mov	r2, r4
 8005eaa:	462b      	mov	r3, r5
 8005eac:	f7fa fb48 	bl	8000540 <__aeabi_dmul>
 8005eb0:	a35b      	add	r3, pc, #364	; (adr r3, 8006020 <__kernel_tan+0x2e0>)
 8005eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb6:	f7fa f98d 	bl	80001d4 <__adddf3>
 8005eba:	4622      	mov	r2, r4
 8005ebc:	462b      	mov	r3, r5
 8005ebe:	f7fa fb3f 	bl	8000540 <__aeabi_dmul>
 8005ec2:	a359      	add	r3, pc, #356	; (adr r3, 8006028 <__kernel_tan+0x2e8>)
 8005ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec8:	f7fa f984 	bl	80001d4 <__adddf3>
 8005ecc:	4622      	mov	r2, r4
 8005ece:	462b      	mov	r3, r5
 8005ed0:	f7fa fb36 	bl	8000540 <__aeabi_dmul>
 8005ed4:	a356      	add	r3, pc, #344	; (adr r3, 8006030 <__kernel_tan+0x2f0>)
 8005ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eda:	f7fa f97b 	bl	80001d4 <__adddf3>
 8005ede:	4622      	mov	r2, r4
 8005ee0:	462b      	mov	r3, r5
 8005ee2:	f7fa fb2d 	bl	8000540 <__aeabi_dmul>
 8005ee6:	a354      	add	r3, pc, #336	; (adr r3, 8006038 <__kernel_tan+0x2f8>)
 8005ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eec:	f7fa f972 	bl	80001d4 <__adddf3>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ef8:	f7fa f96c 	bl	80001d4 <__adddf3>
 8005efc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f00:	f7fa fb1e 	bl	8000540 <__aeabi_dmul>
 8005f04:	4642      	mov	r2, r8
 8005f06:	464b      	mov	r3, r9
 8005f08:	f7fa f964 	bl	80001d4 <__adddf3>
 8005f0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f10:	f7fa fb16 	bl	8000540 <__aeabi_dmul>
 8005f14:	4642      	mov	r2, r8
 8005f16:	464b      	mov	r3, r9
 8005f18:	f7fa f95c 	bl	80001d4 <__adddf3>
 8005f1c:	a348      	add	r3, pc, #288	; (adr r3, 8006040 <__kernel_tan+0x300>)
 8005f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f22:	4604      	mov	r4, r0
 8005f24:	460d      	mov	r5, r1
 8005f26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f2a:	f7fa fb09 	bl	8000540 <__aeabi_dmul>
 8005f2e:	4622      	mov	r2, r4
 8005f30:	462b      	mov	r3, r5
 8005f32:	f7fa f94f 	bl	80001d4 <__adddf3>
 8005f36:	e9cd 0100 	strd	r0, r1, [sp]
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	4659      	mov	r1, fp
 8005f40:	4650      	mov	r0, sl
 8005f42:	f7fa f947 	bl	80001d4 <__adddf3>
 8005f46:	4b43      	ldr	r3, [pc, #268]	; (8006054 <__kernel_tan+0x314>)
 8005f48:	429f      	cmp	r7, r3
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	460d      	mov	r5, r1
 8005f4e:	f340 8083 	ble.w	8006058 <__kernel_tan+0x318>
 8005f52:	4630      	mov	r0, r6
 8005f54:	f7fa fa8a 	bl	800046c <__aeabi_i2d>
 8005f58:	4622      	mov	r2, r4
 8005f5a:	4680      	mov	r8, r0
 8005f5c:	4689      	mov	r9, r1
 8005f5e:	462b      	mov	r3, r5
 8005f60:	4620      	mov	r0, r4
 8005f62:	4629      	mov	r1, r5
 8005f64:	f7fa faec 	bl	8000540 <__aeabi_dmul>
 8005f68:	4642      	mov	r2, r8
 8005f6a:	4606      	mov	r6, r0
 8005f6c:	460f      	mov	r7, r1
 8005f6e:	464b      	mov	r3, r9
 8005f70:	4620      	mov	r0, r4
 8005f72:	4629      	mov	r1, r5
 8005f74:	f7fa f92e 	bl	80001d4 <__adddf3>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4630      	mov	r0, r6
 8005f7e:	4639      	mov	r1, r7
 8005f80:	f7fa fc08 	bl	8000794 <__aeabi_ddiv>
 8005f84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f88:	f7fa f922 	bl	80001d0 <__aeabi_dsub>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	460b      	mov	r3, r1
 8005f90:	4650      	mov	r0, sl
 8005f92:	4659      	mov	r1, fp
 8005f94:	f7fa f91c 	bl	80001d0 <__aeabi_dsub>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	f7fa f91a 	bl	80001d4 <__adddf3>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	4640      	mov	r0, r8
 8005fa6:	4649      	mov	r1, r9
 8005fa8:	f7fa f912 	bl	80001d0 <__aeabi_dsub>
 8005fac:	9b02      	ldr	r3, [sp, #8]
 8005fae:	4604      	mov	r4, r0
 8005fb0:	1798      	asrs	r0, r3, #30
 8005fb2:	f000 0002 	and.w	r0, r0, #2
 8005fb6:	f1c0 0001 	rsb	r0, r0, #1
 8005fba:	460d      	mov	r5, r1
 8005fbc:	f7fa fa56 	bl	800046c <__aeabi_i2d>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	4629      	mov	r1, r5
 8005fc8:	f7fa faba 	bl	8000540 <__aeabi_dmul>
 8005fcc:	e6dd      	b.n	8005d8a <__kernel_tan+0x4a>
 8005fce:	bf00      	nop
 8005fd0:	54442d18 	.word	0x54442d18
 8005fd4:	3fe921fb 	.word	0x3fe921fb
 8005fd8:	33145c07 	.word	0x33145c07
 8005fdc:	3c81a626 	.word	0x3c81a626
 8005fe0:	74bf7ad4 	.word	0x74bf7ad4
 8005fe4:	3efb2a70 	.word	0x3efb2a70
 8005fe8:	32f0a7e9 	.word	0x32f0a7e9
 8005fec:	3f12b80f 	.word	0x3f12b80f
 8005ff0:	1a8d1068 	.word	0x1a8d1068
 8005ff4:	3f3026f7 	.word	0x3f3026f7
 8005ff8:	fee08315 	.word	0xfee08315
 8005ffc:	3f57dbc8 	.word	0x3f57dbc8
 8006000:	e96e8493 	.word	0xe96e8493
 8006004:	3f8226e3 	.word	0x3f8226e3
 8006008:	1bb341fe 	.word	0x1bb341fe
 800600c:	3faba1ba 	.word	0x3faba1ba
 8006010:	db605373 	.word	0xdb605373
 8006014:	bef375cb 	.word	0xbef375cb
 8006018:	a03792a6 	.word	0xa03792a6
 800601c:	3f147e88 	.word	0x3f147e88
 8006020:	f2f26501 	.word	0xf2f26501
 8006024:	3f4344d8 	.word	0x3f4344d8
 8006028:	c9560328 	.word	0xc9560328
 800602c:	3f6d6d22 	.word	0x3f6d6d22
 8006030:	8406d637 	.word	0x8406d637
 8006034:	3f9664f4 	.word	0x3f9664f4
 8006038:	1110fe7a 	.word	0x1110fe7a
 800603c:	3fc11111 	.word	0x3fc11111
 8006040:	55555563 	.word	0x55555563
 8006044:	3fd55555 	.word	0x3fd55555
 8006048:	3e2fffff 	.word	0x3e2fffff
 800604c:	3ff00000 	.word	0x3ff00000
 8006050:	bff00000 	.word	0xbff00000
 8006054:	3fe59427 	.word	0x3fe59427
 8006058:	2e01      	cmp	r6, #1
 800605a:	d036      	beq.n	80060ca <__kernel_tan+0x38a>
 800605c:	460f      	mov	r7, r1
 800605e:	4602      	mov	r2, r0
 8006060:	460b      	mov	r3, r1
 8006062:	2000      	movs	r0, #0
 8006064:	491a      	ldr	r1, [pc, #104]	; (80060d0 <__kernel_tan+0x390>)
 8006066:	f7fa fb95 	bl	8000794 <__aeabi_ddiv>
 800606a:	2600      	movs	r6, #0
 800606c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006070:	4652      	mov	r2, sl
 8006072:	465b      	mov	r3, fp
 8006074:	4630      	mov	r0, r6
 8006076:	4639      	mov	r1, r7
 8006078:	f7fa f8aa 	bl	80001d0 <__aeabi_dsub>
 800607c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006080:	4602      	mov	r2, r0
 8006082:	460b      	mov	r3, r1
 8006084:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006088:	f7fa f8a2 	bl	80001d0 <__aeabi_dsub>
 800608c:	4632      	mov	r2, r6
 800608e:	462b      	mov	r3, r5
 8006090:	f7fa fa56 	bl	8000540 <__aeabi_dmul>
 8006094:	4632      	mov	r2, r6
 8006096:	4682      	mov	sl, r0
 8006098:	468b      	mov	fp, r1
 800609a:	462b      	mov	r3, r5
 800609c:	4630      	mov	r0, r6
 800609e:	4639      	mov	r1, r7
 80060a0:	f7fa fa4e 	bl	8000540 <__aeabi_dmul>
 80060a4:	2200      	movs	r2, #0
 80060a6:	4b0b      	ldr	r3, [pc, #44]	; (80060d4 <__kernel_tan+0x394>)
 80060a8:	f7fa f894 	bl	80001d4 <__adddf3>
 80060ac:	4602      	mov	r2, r0
 80060ae:	460b      	mov	r3, r1
 80060b0:	4650      	mov	r0, sl
 80060b2:	4659      	mov	r1, fp
 80060b4:	f7fa f88e 	bl	80001d4 <__adddf3>
 80060b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060bc:	f7fa fa40 	bl	8000540 <__aeabi_dmul>
 80060c0:	4632      	mov	r2, r6
 80060c2:	462b      	mov	r3, r5
 80060c4:	f7fa f886 	bl	80001d4 <__adddf3>
 80060c8:	e65f      	b.n	8005d8a <__kernel_tan+0x4a>
 80060ca:	4682      	mov	sl, r0
 80060cc:	468b      	mov	fp, r1
 80060ce:	e65e      	b.n	8005d8e <__kernel_tan+0x4e>
 80060d0:	bff00000 	.word	0xbff00000
 80060d4:	3ff00000 	.word	0x3ff00000

080060d8 <fabs>:
 80060d8:	ec51 0b10 	vmov	r0, r1, d0
 80060dc:	ee10 2a10 	vmov	r2, s0
 80060e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80060e4:	ec43 2b10 	vmov	d0, r2, r3
 80060e8:	4770      	bx	lr

080060ea <finite>:
 80060ea:	ee10 3a90 	vmov	r3, s1
 80060ee:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80060f2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80060f6:	0fc0      	lsrs	r0, r0, #31
 80060f8:	4770      	bx	lr
 80060fa:	0000      	movs	r0, r0
 80060fc:	0000      	movs	r0, r0
	...

08006100 <floor>:
 8006100:	ec51 0b10 	vmov	r0, r1, d0
 8006104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006108:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800610c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006110:	2e13      	cmp	r6, #19
 8006112:	460c      	mov	r4, r1
 8006114:	ee10 5a10 	vmov	r5, s0
 8006118:	4680      	mov	r8, r0
 800611a:	dc34      	bgt.n	8006186 <floor+0x86>
 800611c:	2e00      	cmp	r6, #0
 800611e:	da16      	bge.n	800614e <floor+0x4e>
 8006120:	a335      	add	r3, pc, #212	; (adr r3, 80061f8 <floor+0xf8>)
 8006122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006126:	f7fa f855 	bl	80001d4 <__adddf3>
 800612a:	2200      	movs	r2, #0
 800612c:	2300      	movs	r3, #0
 800612e:	f7fa fc97 	bl	8000a60 <__aeabi_dcmpgt>
 8006132:	b148      	cbz	r0, 8006148 <floor+0x48>
 8006134:	2c00      	cmp	r4, #0
 8006136:	da59      	bge.n	80061ec <floor+0xec>
 8006138:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800613c:	4a30      	ldr	r2, [pc, #192]	; (8006200 <floor+0x100>)
 800613e:	432b      	orrs	r3, r5
 8006140:	2500      	movs	r5, #0
 8006142:	42ab      	cmp	r3, r5
 8006144:	bf18      	it	ne
 8006146:	4614      	movne	r4, r2
 8006148:	4621      	mov	r1, r4
 800614a:	4628      	mov	r0, r5
 800614c:	e025      	b.n	800619a <floor+0x9a>
 800614e:	4f2d      	ldr	r7, [pc, #180]	; (8006204 <floor+0x104>)
 8006150:	4137      	asrs	r7, r6
 8006152:	ea01 0307 	and.w	r3, r1, r7
 8006156:	4303      	orrs	r3, r0
 8006158:	d01f      	beq.n	800619a <floor+0x9a>
 800615a:	a327      	add	r3, pc, #156	; (adr r3, 80061f8 <floor+0xf8>)
 800615c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006160:	f7fa f838 	bl	80001d4 <__adddf3>
 8006164:	2200      	movs	r2, #0
 8006166:	2300      	movs	r3, #0
 8006168:	f7fa fc7a 	bl	8000a60 <__aeabi_dcmpgt>
 800616c:	2800      	cmp	r0, #0
 800616e:	d0eb      	beq.n	8006148 <floor+0x48>
 8006170:	2c00      	cmp	r4, #0
 8006172:	bfbe      	ittt	lt
 8006174:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006178:	fa43 f606 	asrlt.w	r6, r3, r6
 800617c:	19a4      	addlt	r4, r4, r6
 800617e:	ea24 0407 	bic.w	r4, r4, r7
 8006182:	2500      	movs	r5, #0
 8006184:	e7e0      	b.n	8006148 <floor+0x48>
 8006186:	2e33      	cmp	r6, #51	; 0x33
 8006188:	dd0b      	ble.n	80061a2 <floor+0xa2>
 800618a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800618e:	d104      	bne.n	800619a <floor+0x9a>
 8006190:	ee10 2a10 	vmov	r2, s0
 8006194:	460b      	mov	r3, r1
 8006196:	f7fa f81d 	bl	80001d4 <__adddf3>
 800619a:	ec41 0b10 	vmov	d0, r0, r1
 800619e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061a2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80061a6:	f04f 33ff 	mov.w	r3, #4294967295
 80061aa:	fa23 f707 	lsr.w	r7, r3, r7
 80061ae:	4207      	tst	r7, r0
 80061b0:	d0f3      	beq.n	800619a <floor+0x9a>
 80061b2:	a311      	add	r3, pc, #68	; (adr r3, 80061f8 <floor+0xf8>)
 80061b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b8:	f7fa f80c 	bl	80001d4 <__adddf3>
 80061bc:	2200      	movs	r2, #0
 80061be:	2300      	movs	r3, #0
 80061c0:	f7fa fc4e 	bl	8000a60 <__aeabi_dcmpgt>
 80061c4:	2800      	cmp	r0, #0
 80061c6:	d0bf      	beq.n	8006148 <floor+0x48>
 80061c8:	2c00      	cmp	r4, #0
 80061ca:	da02      	bge.n	80061d2 <floor+0xd2>
 80061cc:	2e14      	cmp	r6, #20
 80061ce:	d103      	bne.n	80061d8 <floor+0xd8>
 80061d0:	3401      	adds	r4, #1
 80061d2:	ea25 0507 	bic.w	r5, r5, r7
 80061d6:	e7b7      	b.n	8006148 <floor+0x48>
 80061d8:	2301      	movs	r3, #1
 80061da:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80061de:	fa03 f606 	lsl.w	r6, r3, r6
 80061e2:	4435      	add	r5, r6
 80061e4:	4545      	cmp	r5, r8
 80061e6:	bf38      	it	cc
 80061e8:	18e4      	addcc	r4, r4, r3
 80061ea:	e7f2      	b.n	80061d2 <floor+0xd2>
 80061ec:	2500      	movs	r5, #0
 80061ee:	462c      	mov	r4, r5
 80061f0:	e7aa      	b.n	8006148 <floor+0x48>
 80061f2:	bf00      	nop
 80061f4:	f3af 8000 	nop.w
 80061f8:	8800759c 	.word	0x8800759c
 80061fc:	7e37e43c 	.word	0x7e37e43c
 8006200:	bff00000 	.word	0xbff00000
 8006204:	000fffff 	.word	0x000fffff

08006208 <matherr>:
 8006208:	2000      	movs	r0, #0
 800620a:	4770      	bx	lr
 800620c:	0000      	movs	r0, r0
	...

08006210 <nan>:
 8006210:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006218 <nan+0x8>
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	00000000 	.word	0x00000000
 800621c:	7ff80000 	.word	0x7ff80000

08006220 <rint>:
 8006220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006222:	ec51 0b10 	vmov	r0, r1, d0
 8006226:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800622a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800622e:	2e13      	cmp	r6, #19
 8006230:	460b      	mov	r3, r1
 8006232:	ee10 4a10 	vmov	r4, s0
 8006236:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800623a:	dc56      	bgt.n	80062ea <rint+0xca>
 800623c:	2e00      	cmp	r6, #0
 800623e:	da2b      	bge.n	8006298 <rint+0x78>
 8006240:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006244:	4302      	orrs	r2, r0
 8006246:	d023      	beq.n	8006290 <rint+0x70>
 8006248:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800624c:	4302      	orrs	r2, r0
 800624e:	4254      	negs	r4, r2
 8006250:	4314      	orrs	r4, r2
 8006252:	0c4b      	lsrs	r3, r1, #17
 8006254:	0b24      	lsrs	r4, r4, #12
 8006256:	045b      	lsls	r3, r3, #17
 8006258:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800625c:	ea44 0103 	orr.w	r1, r4, r3
 8006260:	460b      	mov	r3, r1
 8006262:	492f      	ldr	r1, [pc, #188]	; (8006320 <rint+0x100>)
 8006264:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8006268:	e9d1 6700 	ldrd	r6, r7, [r1]
 800626c:	4602      	mov	r2, r0
 800626e:	4639      	mov	r1, r7
 8006270:	4630      	mov	r0, r6
 8006272:	f7f9 ffaf 	bl	80001d4 <__adddf3>
 8006276:	e9cd 0100 	strd	r0, r1, [sp]
 800627a:	463b      	mov	r3, r7
 800627c:	4632      	mov	r2, r6
 800627e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006282:	f7f9 ffa5 	bl	80001d0 <__aeabi_dsub>
 8006286:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800628a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800628e:	4639      	mov	r1, r7
 8006290:	ec41 0b10 	vmov	d0, r0, r1
 8006294:	b003      	add	sp, #12
 8006296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006298:	4a22      	ldr	r2, [pc, #136]	; (8006324 <rint+0x104>)
 800629a:	4132      	asrs	r2, r6
 800629c:	ea01 0702 	and.w	r7, r1, r2
 80062a0:	4307      	orrs	r7, r0
 80062a2:	d0f5      	beq.n	8006290 <rint+0x70>
 80062a4:	0852      	lsrs	r2, r2, #1
 80062a6:	4011      	ands	r1, r2
 80062a8:	430c      	orrs	r4, r1
 80062aa:	d00b      	beq.n	80062c4 <rint+0xa4>
 80062ac:	ea23 0202 	bic.w	r2, r3, r2
 80062b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80062b4:	2e13      	cmp	r6, #19
 80062b6:	fa43 f306 	asr.w	r3, r3, r6
 80062ba:	bf0c      	ite	eq
 80062bc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80062c0:	2400      	movne	r4, #0
 80062c2:	4313      	orrs	r3, r2
 80062c4:	4916      	ldr	r1, [pc, #88]	; (8006320 <rint+0x100>)
 80062c6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80062ca:	4622      	mov	r2, r4
 80062cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80062d0:	4620      	mov	r0, r4
 80062d2:	4629      	mov	r1, r5
 80062d4:	f7f9 ff7e 	bl	80001d4 <__adddf3>
 80062d8:	e9cd 0100 	strd	r0, r1, [sp]
 80062dc:	4622      	mov	r2, r4
 80062de:	462b      	mov	r3, r5
 80062e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062e4:	f7f9 ff74 	bl	80001d0 <__aeabi_dsub>
 80062e8:	e7d2      	b.n	8006290 <rint+0x70>
 80062ea:	2e33      	cmp	r6, #51	; 0x33
 80062ec:	dd07      	ble.n	80062fe <rint+0xde>
 80062ee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80062f2:	d1cd      	bne.n	8006290 <rint+0x70>
 80062f4:	ee10 2a10 	vmov	r2, s0
 80062f8:	f7f9 ff6c 	bl	80001d4 <__adddf3>
 80062fc:	e7c8      	b.n	8006290 <rint+0x70>
 80062fe:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8006302:	f04f 32ff 	mov.w	r2, #4294967295
 8006306:	40f2      	lsrs	r2, r6
 8006308:	4210      	tst	r0, r2
 800630a:	d0c1      	beq.n	8006290 <rint+0x70>
 800630c:	0852      	lsrs	r2, r2, #1
 800630e:	4210      	tst	r0, r2
 8006310:	bf1f      	itttt	ne
 8006312:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8006316:	ea20 0202 	bicne.w	r2, r0, r2
 800631a:	4134      	asrne	r4, r6
 800631c:	4314      	orrne	r4, r2
 800631e:	e7d1      	b.n	80062c4 <rint+0xa4>
 8006320:	08006678 	.word	0x08006678
 8006324:	000fffff 	.word	0x000fffff

08006328 <scalbn>:
 8006328:	b570      	push	{r4, r5, r6, lr}
 800632a:	ec55 4b10 	vmov	r4, r5, d0
 800632e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006332:	4606      	mov	r6, r0
 8006334:	462b      	mov	r3, r5
 8006336:	b9aa      	cbnz	r2, 8006364 <scalbn+0x3c>
 8006338:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800633c:	4323      	orrs	r3, r4
 800633e:	d03b      	beq.n	80063b8 <scalbn+0x90>
 8006340:	4b31      	ldr	r3, [pc, #196]	; (8006408 <scalbn+0xe0>)
 8006342:	4629      	mov	r1, r5
 8006344:	2200      	movs	r2, #0
 8006346:	ee10 0a10 	vmov	r0, s0
 800634a:	f7fa f8f9 	bl	8000540 <__aeabi_dmul>
 800634e:	4b2f      	ldr	r3, [pc, #188]	; (800640c <scalbn+0xe4>)
 8006350:	429e      	cmp	r6, r3
 8006352:	4604      	mov	r4, r0
 8006354:	460d      	mov	r5, r1
 8006356:	da12      	bge.n	800637e <scalbn+0x56>
 8006358:	a327      	add	r3, pc, #156	; (adr r3, 80063f8 <scalbn+0xd0>)
 800635a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635e:	f7fa f8ef 	bl	8000540 <__aeabi_dmul>
 8006362:	e009      	b.n	8006378 <scalbn+0x50>
 8006364:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006368:	428a      	cmp	r2, r1
 800636a:	d10c      	bne.n	8006386 <scalbn+0x5e>
 800636c:	ee10 2a10 	vmov	r2, s0
 8006370:	4620      	mov	r0, r4
 8006372:	4629      	mov	r1, r5
 8006374:	f7f9 ff2e 	bl	80001d4 <__adddf3>
 8006378:	4604      	mov	r4, r0
 800637a:	460d      	mov	r5, r1
 800637c:	e01c      	b.n	80063b8 <scalbn+0x90>
 800637e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006382:	460b      	mov	r3, r1
 8006384:	3a36      	subs	r2, #54	; 0x36
 8006386:	4432      	add	r2, r6
 8006388:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800638c:	428a      	cmp	r2, r1
 800638e:	dd0b      	ble.n	80063a8 <scalbn+0x80>
 8006390:	ec45 4b11 	vmov	d1, r4, r5
 8006394:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8006400 <scalbn+0xd8>
 8006398:	f000 f83c 	bl	8006414 <copysign>
 800639c:	a318      	add	r3, pc, #96	; (adr r3, 8006400 <scalbn+0xd8>)
 800639e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a2:	ec51 0b10 	vmov	r0, r1, d0
 80063a6:	e7da      	b.n	800635e <scalbn+0x36>
 80063a8:	2a00      	cmp	r2, #0
 80063aa:	dd08      	ble.n	80063be <scalbn+0x96>
 80063ac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80063b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80063b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80063b8:	ec45 4b10 	vmov	d0, r4, r5
 80063bc:	bd70      	pop	{r4, r5, r6, pc}
 80063be:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80063c2:	da0d      	bge.n	80063e0 <scalbn+0xb8>
 80063c4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80063c8:	429e      	cmp	r6, r3
 80063ca:	ec45 4b11 	vmov	d1, r4, r5
 80063ce:	dce1      	bgt.n	8006394 <scalbn+0x6c>
 80063d0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80063f8 <scalbn+0xd0>
 80063d4:	f000 f81e 	bl	8006414 <copysign>
 80063d8:	a307      	add	r3, pc, #28	; (adr r3, 80063f8 <scalbn+0xd0>)
 80063da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063de:	e7e0      	b.n	80063a2 <scalbn+0x7a>
 80063e0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80063e4:	3236      	adds	r2, #54	; 0x36
 80063e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80063ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80063ee:	4620      	mov	r0, r4
 80063f0:	4629      	mov	r1, r5
 80063f2:	2200      	movs	r2, #0
 80063f4:	4b06      	ldr	r3, [pc, #24]	; (8006410 <scalbn+0xe8>)
 80063f6:	e7b2      	b.n	800635e <scalbn+0x36>
 80063f8:	c2f8f359 	.word	0xc2f8f359
 80063fc:	01a56e1f 	.word	0x01a56e1f
 8006400:	8800759c 	.word	0x8800759c
 8006404:	7e37e43c 	.word	0x7e37e43c
 8006408:	43500000 	.word	0x43500000
 800640c:	ffff3cb0 	.word	0xffff3cb0
 8006410:	3c900000 	.word	0x3c900000

08006414 <copysign>:
 8006414:	ec51 0b10 	vmov	r0, r1, d0
 8006418:	ee11 0a90 	vmov	r0, s3
 800641c:	ee10 2a10 	vmov	r2, s0
 8006420:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006424:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006428:	ea41 0300 	orr.w	r3, r1, r0
 800642c:	ec43 2b10 	vmov	d0, r2, r3
 8006430:	4770      	bx	lr
	...

08006434 <_init>:
 8006434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006436:	bf00      	nop
 8006438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800643a:	bc08      	pop	{r3}
 800643c:	469e      	mov	lr, r3
 800643e:	4770      	bx	lr

08006440 <_fini>:
 8006440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006442:	bf00      	nop
 8006444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006446:	bc08      	pop	{r3}
 8006448:	469e      	mov	lr, r3
 800644a:	4770      	bx	lr
